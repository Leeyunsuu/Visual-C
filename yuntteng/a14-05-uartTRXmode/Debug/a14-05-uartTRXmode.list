
a14-05-uartTRXmode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a60  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08003b6c  08003b6c  00013b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d00  08003d00  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003d00  08003d00  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d00  08003d00  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d00  08003d00  00013d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d04  08003d04  00013d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003d08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000070  08003d78  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08003d78  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000baa6  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ab3  00000000  00000000  0002bb3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c40  00000000  00000000  0002d5f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b98  00000000  00000000  0002e238  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000186f3  00000000  00000000  0002edd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000919f  00000000  00000000  000474c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b75d  00000000  00000000  00050662  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dbdbf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a58  00000000  00000000  000dbe3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b54 	.word	0x08003b54

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003b54 	.word	0x08003b54

0800014c <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


PUTCHAR_PROTOTYPE
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800015a:	2201      	movs	r2, #1
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <__io_putchar+0x20>)
 800015e:	f002 fc0a 	bl	8002976 <HAL_UART_Transmit>

  return ch;
 8000162:	687b      	ldr	r3, [r7, #4]
}
 8000164:	4618      	mov	r0, r3
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	20000210 	.word	0x20000210

08000170 <Uart_Tx_Byte>:

//TX
void Uart_Tx_Byte(char TxData, char Parity)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	460a      	mov	r2, r1
 800017a:	71fb      	strb	r3, [r7, #7]
 800017c:	4613      	mov	r3, r2
 800017e:	71bb      	strb	r3, [r7, #6]
	char chExit = 'n';
 8000180:	236e      	movs	r3, #110	; 0x6e
 8000182:	73fb      	strb	r3, [r7, #15]
	char chComp = 0x01;
 8000184:	2301      	movs	r3, #1
 8000186:	73bb      	strb	r3, [r7, #14]
	int ParityBit_cnt = 0;
 8000188:	2300      	movs	r3, #0
 800018a:	60bb      	str	r3, [r7, #8]

	tim2_cnt = 0;
 800018c:	4ba5      	ldr	r3, [pc, #660]	; (8000424 <Uart_Tx_Byte+0x2b4>)
 800018e:	2200      	movs	r2, #0
 8000190:	601a      	str	r2, [r3, #0]
	tim2_flag = 'y';
 8000192:	4ba5      	ldr	r3, [pc, #660]	; (8000428 <Uart_Tx_Byte+0x2b8>)
 8000194:	2279      	movs	r2, #121	; 0x79
 8000196:	701a      	strb	r2, [r3, #0]
	tim2_trigger = 'n';
 8000198:	4ba4      	ldr	r3, [pc, #656]	; (800042c <Uart_Tx_Byte+0x2bc>)
 800019a:	226e      	movs	r2, #110	; 0x6e
 800019c:	701a      	strb	r2, [r3, #0]

	while(1){
		if(('y' == tim2_trigger) && (tim2_cnt == 1)){ // idle
 800019e:	4ba3      	ldr	r3, [pc, #652]	; (800042c <Uart_Tx_Byte+0x2bc>)
 80001a0:	781b      	ldrb	r3, [r3, #0]
 80001a2:	2b79      	cmp	r3, #121	; 0x79
 80001a4:	d10c      	bne.n	80001c0 <Uart_Tx_Byte+0x50>
 80001a6:	4b9f      	ldr	r3, [pc, #636]	; (8000424 <Uart_Tx_Byte+0x2b4>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	2b01      	cmp	r3, #1
 80001ac:	d108      	bne.n	80001c0 <Uart_Tx_Byte+0x50>
			tim2_trigger = 'n';
 80001ae:	4b9f      	ldr	r3, [pc, #636]	; (800042c <Uart_Tx_Byte+0x2bc>)
 80001b0:	226e      	movs	r2, #110	; 0x6e
 80001b2:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80001b4:	2201      	movs	r2, #1
 80001b6:	2101      	movs	r1, #1
 80001b8:	489d      	ldr	r0, [pc, #628]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 80001ba:	f001 fb32 	bl	8001822 <HAL_GPIO_WritePin>
 80001be:	e18b      	b.n	80004d8 <Uart_Tx_Byte+0x368>
		}else if(('y' == tim2_trigger) && (tim2_cnt == 2)){ // start
 80001c0:	4b9a      	ldr	r3, [pc, #616]	; (800042c <Uart_Tx_Byte+0x2bc>)
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	2b79      	cmp	r3, #121	; 0x79
 80001c6:	d10c      	bne.n	80001e2 <Uart_Tx_Byte+0x72>
 80001c8:	4b96      	ldr	r3, [pc, #600]	; (8000424 <Uart_Tx_Byte+0x2b4>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	2b02      	cmp	r3, #2
 80001ce:	d108      	bne.n	80001e2 <Uart_Tx_Byte+0x72>
			tim2_trigger = 'n';
 80001d0:	4b96      	ldr	r3, [pc, #600]	; (800042c <Uart_Tx_Byte+0x2bc>)
 80001d2:	226e      	movs	r2, #110	; 0x6e
 80001d4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80001d6:	2200      	movs	r2, #0
 80001d8:	2101      	movs	r1, #1
 80001da:	4895      	ldr	r0, [pc, #596]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 80001dc:	f001 fb21 	bl	8001822 <HAL_GPIO_WritePin>
 80001e0:	e17a      	b.n	80004d8 <Uart_Tx_Byte+0x368>
		}else if(('y' == tim2_trigger) && (tim2_cnt == 3)){ // bit 0
 80001e2:	4b92      	ldr	r3, [pc, #584]	; (800042c <Uart_Tx_Byte+0x2bc>)
 80001e4:	781b      	ldrb	r3, [r3, #0]
 80001e6:	2b79      	cmp	r3, #121	; 0x79
 80001e8:	d11f      	bne.n	800022a <Uart_Tx_Byte+0xba>
 80001ea:	4b8e      	ldr	r3, [pc, #568]	; (8000424 <Uart_Tx_Byte+0x2b4>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	2b03      	cmp	r3, #3
 80001f0:	d11b      	bne.n	800022a <Uart_Tx_Byte+0xba>
			tim2_trigger = 'n';
 80001f2:	4b8e      	ldr	r3, [pc, #568]	; (800042c <Uart_Tx_Byte+0x2bc>)
 80001f4:	226e      	movs	r2, #110	; 0x6e
 80001f6:	701a      	strb	r2, [r3, #0]
			if((TxData & chComp) == chComp){
 80001f8:	79fa      	ldrb	r2, [r7, #7]
 80001fa:	7bbb      	ldrb	r3, [r7, #14]
 80001fc:	4013      	ands	r3, r2
 80001fe:	b2db      	uxtb	r3, r3
 8000200:	7bba      	ldrb	r2, [r7, #14]
 8000202:	429a      	cmp	r2, r3
 8000204:	d108      	bne.n	8000218 <Uart_Tx_Byte+0xa8>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000206:	2201      	movs	r2, #1
 8000208:	2101      	movs	r1, #1
 800020a:	4889      	ldr	r0, [pc, #548]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 800020c:	f001 fb09 	bl	8001822 <HAL_GPIO_WritePin>
				ParityBit_cnt += 1;
 8000210:	68bb      	ldr	r3, [r7, #8]
 8000212:	3301      	adds	r3, #1
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	e004      	b.n	8000222 <Uart_Tx_Byte+0xb2>
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000218:	2200      	movs	r2, #0
 800021a:	2101      	movs	r1, #1
 800021c:	4884      	ldr	r0, [pc, #528]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 800021e:	f001 fb00 	bl	8001822 <HAL_GPIO_WritePin>
			}
			chComp <<= 1;
 8000222:	7bbb      	ldrb	r3, [r7, #14]
 8000224:	005b      	lsls	r3, r3, #1
 8000226:	73bb      	strb	r3, [r7, #14]
 8000228:	e156      	b.n	80004d8 <Uart_Tx_Byte+0x368>
		}else if(('y' == tim2_trigger) && (tim2_cnt == 4)){ // bit 1
 800022a:	4b80      	ldr	r3, [pc, #512]	; (800042c <Uart_Tx_Byte+0x2bc>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	2b79      	cmp	r3, #121	; 0x79
 8000230:	d11f      	bne.n	8000272 <Uart_Tx_Byte+0x102>
 8000232:	4b7c      	ldr	r3, [pc, #496]	; (8000424 <Uart_Tx_Byte+0x2b4>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	2b04      	cmp	r3, #4
 8000238:	d11b      	bne.n	8000272 <Uart_Tx_Byte+0x102>
			tim2_trigger = 'n';
 800023a:	4b7c      	ldr	r3, [pc, #496]	; (800042c <Uart_Tx_Byte+0x2bc>)
 800023c:	226e      	movs	r2, #110	; 0x6e
 800023e:	701a      	strb	r2, [r3, #0]
			if((TxData & chComp) == chComp){
 8000240:	79fa      	ldrb	r2, [r7, #7]
 8000242:	7bbb      	ldrb	r3, [r7, #14]
 8000244:	4013      	ands	r3, r2
 8000246:	b2db      	uxtb	r3, r3
 8000248:	7bba      	ldrb	r2, [r7, #14]
 800024a:	429a      	cmp	r2, r3
 800024c:	d108      	bne.n	8000260 <Uart_Tx_Byte+0xf0>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800024e:	2201      	movs	r2, #1
 8000250:	2101      	movs	r1, #1
 8000252:	4877      	ldr	r0, [pc, #476]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 8000254:	f001 fae5 	bl	8001822 <HAL_GPIO_WritePin>
				ParityBit_cnt += 1;
 8000258:	68bb      	ldr	r3, [r7, #8]
 800025a:	3301      	adds	r3, #1
 800025c:	60bb      	str	r3, [r7, #8]
 800025e:	e004      	b.n	800026a <Uart_Tx_Byte+0xfa>
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000260:	2200      	movs	r2, #0
 8000262:	2101      	movs	r1, #1
 8000264:	4872      	ldr	r0, [pc, #456]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 8000266:	f001 fadc 	bl	8001822 <HAL_GPIO_WritePin>
			}
			chComp <<= 1;
 800026a:	7bbb      	ldrb	r3, [r7, #14]
 800026c:	005b      	lsls	r3, r3, #1
 800026e:	73bb      	strb	r3, [r7, #14]
 8000270:	e132      	b.n	80004d8 <Uart_Tx_Byte+0x368>
		}else if(('y' == tim2_trigger) && (tim2_cnt == 5)){ // bit 2
 8000272:	4b6e      	ldr	r3, [pc, #440]	; (800042c <Uart_Tx_Byte+0x2bc>)
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	2b79      	cmp	r3, #121	; 0x79
 8000278:	d11f      	bne.n	80002ba <Uart_Tx_Byte+0x14a>
 800027a:	4b6a      	ldr	r3, [pc, #424]	; (8000424 <Uart_Tx_Byte+0x2b4>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	2b05      	cmp	r3, #5
 8000280:	d11b      	bne.n	80002ba <Uart_Tx_Byte+0x14a>
			tim2_trigger = 'n';
 8000282:	4b6a      	ldr	r3, [pc, #424]	; (800042c <Uart_Tx_Byte+0x2bc>)
 8000284:	226e      	movs	r2, #110	; 0x6e
 8000286:	701a      	strb	r2, [r3, #0]
			if((TxData & chComp) == chComp){
 8000288:	79fa      	ldrb	r2, [r7, #7]
 800028a:	7bbb      	ldrb	r3, [r7, #14]
 800028c:	4013      	ands	r3, r2
 800028e:	b2db      	uxtb	r3, r3
 8000290:	7bba      	ldrb	r2, [r7, #14]
 8000292:	429a      	cmp	r2, r3
 8000294:	d108      	bne.n	80002a8 <Uart_Tx_Byte+0x138>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000296:	2201      	movs	r2, #1
 8000298:	2101      	movs	r1, #1
 800029a:	4865      	ldr	r0, [pc, #404]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 800029c:	f001 fac1 	bl	8001822 <HAL_GPIO_WritePin>
				ParityBit_cnt += 1;
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	3301      	adds	r3, #1
 80002a4:	60bb      	str	r3, [r7, #8]
 80002a6:	e004      	b.n	80002b2 <Uart_Tx_Byte+0x142>
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80002a8:	2200      	movs	r2, #0
 80002aa:	2101      	movs	r1, #1
 80002ac:	4860      	ldr	r0, [pc, #384]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 80002ae:	f001 fab8 	bl	8001822 <HAL_GPIO_WritePin>
			}
			chComp <<= 1;
 80002b2:	7bbb      	ldrb	r3, [r7, #14]
 80002b4:	005b      	lsls	r3, r3, #1
 80002b6:	73bb      	strb	r3, [r7, #14]
 80002b8:	e10e      	b.n	80004d8 <Uart_Tx_Byte+0x368>
		}else if(('y' == tim2_trigger) && (tim2_cnt == 6)){ // bit 3
 80002ba:	4b5c      	ldr	r3, [pc, #368]	; (800042c <Uart_Tx_Byte+0x2bc>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	2b79      	cmp	r3, #121	; 0x79
 80002c0:	d11f      	bne.n	8000302 <Uart_Tx_Byte+0x192>
 80002c2:	4b58      	ldr	r3, [pc, #352]	; (8000424 <Uart_Tx_Byte+0x2b4>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	2b06      	cmp	r3, #6
 80002c8:	d11b      	bne.n	8000302 <Uart_Tx_Byte+0x192>
			tim2_trigger = 'n';
 80002ca:	4b58      	ldr	r3, [pc, #352]	; (800042c <Uart_Tx_Byte+0x2bc>)
 80002cc:	226e      	movs	r2, #110	; 0x6e
 80002ce:	701a      	strb	r2, [r3, #0]
			if((TxData & chComp) == chComp){
 80002d0:	79fa      	ldrb	r2, [r7, #7]
 80002d2:	7bbb      	ldrb	r3, [r7, #14]
 80002d4:	4013      	ands	r3, r2
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	7bba      	ldrb	r2, [r7, #14]
 80002da:	429a      	cmp	r2, r3
 80002dc:	d108      	bne.n	80002f0 <Uart_Tx_Byte+0x180>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80002de:	2201      	movs	r2, #1
 80002e0:	2101      	movs	r1, #1
 80002e2:	4853      	ldr	r0, [pc, #332]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 80002e4:	f001 fa9d 	bl	8001822 <HAL_GPIO_WritePin>
				ParityBit_cnt += 1;
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	3301      	adds	r3, #1
 80002ec:	60bb      	str	r3, [r7, #8]
 80002ee:	e004      	b.n	80002fa <Uart_Tx_Byte+0x18a>
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80002f0:	2200      	movs	r2, #0
 80002f2:	2101      	movs	r1, #1
 80002f4:	484e      	ldr	r0, [pc, #312]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 80002f6:	f001 fa94 	bl	8001822 <HAL_GPIO_WritePin>
			}
			chComp <<= 1;
 80002fa:	7bbb      	ldrb	r3, [r7, #14]
 80002fc:	005b      	lsls	r3, r3, #1
 80002fe:	73bb      	strb	r3, [r7, #14]
 8000300:	e0ea      	b.n	80004d8 <Uart_Tx_Byte+0x368>
		}else if(('y' == tim2_trigger) && (tim2_cnt == 7)){ // bit 4
 8000302:	4b4a      	ldr	r3, [pc, #296]	; (800042c <Uart_Tx_Byte+0x2bc>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	2b79      	cmp	r3, #121	; 0x79
 8000308:	d11f      	bne.n	800034a <Uart_Tx_Byte+0x1da>
 800030a:	4b46      	ldr	r3, [pc, #280]	; (8000424 <Uart_Tx_Byte+0x2b4>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	2b07      	cmp	r3, #7
 8000310:	d11b      	bne.n	800034a <Uart_Tx_Byte+0x1da>
			tim2_trigger = 'n';
 8000312:	4b46      	ldr	r3, [pc, #280]	; (800042c <Uart_Tx_Byte+0x2bc>)
 8000314:	226e      	movs	r2, #110	; 0x6e
 8000316:	701a      	strb	r2, [r3, #0]
			if((TxData & chComp) == chComp){
 8000318:	79fa      	ldrb	r2, [r7, #7]
 800031a:	7bbb      	ldrb	r3, [r7, #14]
 800031c:	4013      	ands	r3, r2
 800031e:	b2db      	uxtb	r3, r3
 8000320:	7bba      	ldrb	r2, [r7, #14]
 8000322:	429a      	cmp	r2, r3
 8000324:	d108      	bne.n	8000338 <Uart_Tx_Byte+0x1c8>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000326:	2201      	movs	r2, #1
 8000328:	2101      	movs	r1, #1
 800032a:	4841      	ldr	r0, [pc, #260]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 800032c:	f001 fa79 	bl	8001822 <HAL_GPIO_WritePin>
				ParityBit_cnt += 1;
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	3301      	adds	r3, #1
 8000334:	60bb      	str	r3, [r7, #8]
 8000336:	e004      	b.n	8000342 <Uart_Tx_Byte+0x1d2>
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000338:	2200      	movs	r2, #0
 800033a:	2101      	movs	r1, #1
 800033c:	483c      	ldr	r0, [pc, #240]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 800033e:	f001 fa70 	bl	8001822 <HAL_GPIO_WritePin>
			}
			chComp <<= 1;
 8000342:	7bbb      	ldrb	r3, [r7, #14]
 8000344:	005b      	lsls	r3, r3, #1
 8000346:	73bb      	strb	r3, [r7, #14]
 8000348:	e0c6      	b.n	80004d8 <Uart_Tx_Byte+0x368>
		}else if(('y' == tim2_trigger) && (tim2_cnt == 8)){ // bit 5
 800034a:	4b38      	ldr	r3, [pc, #224]	; (800042c <Uart_Tx_Byte+0x2bc>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	2b79      	cmp	r3, #121	; 0x79
 8000350:	d11f      	bne.n	8000392 <Uart_Tx_Byte+0x222>
 8000352:	4b34      	ldr	r3, [pc, #208]	; (8000424 <Uart_Tx_Byte+0x2b4>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	2b08      	cmp	r3, #8
 8000358:	d11b      	bne.n	8000392 <Uart_Tx_Byte+0x222>
			tim2_trigger = 'n';
 800035a:	4b34      	ldr	r3, [pc, #208]	; (800042c <Uart_Tx_Byte+0x2bc>)
 800035c:	226e      	movs	r2, #110	; 0x6e
 800035e:	701a      	strb	r2, [r3, #0]
			if((TxData & chComp) == chComp){
 8000360:	79fa      	ldrb	r2, [r7, #7]
 8000362:	7bbb      	ldrb	r3, [r7, #14]
 8000364:	4013      	ands	r3, r2
 8000366:	b2db      	uxtb	r3, r3
 8000368:	7bba      	ldrb	r2, [r7, #14]
 800036a:	429a      	cmp	r2, r3
 800036c:	d108      	bne.n	8000380 <Uart_Tx_Byte+0x210>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800036e:	2201      	movs	r2, #1
 8000370:	2101      	movs	r1, #1
 8000372:	482f      	ldr	r0, [pc, #188]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 8000374:	f001 fa55 	bl	8001822 <HAL_GPIO_WritePin>
				ParityBit_cnt += 1;
 8000378:	68bb      	ldr	r3, [r7, #8]
 800037a:	3301      	adds	r3, #1
 800037c:	60bb      	str	r3, [r7, #8]
 800037e:	e004      	b.n	800038a <Uart_Tx_Byte+0x21a>
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000380:	2200      	movs	r2, #0
 8000382:	2101      	movs	r1, #1
 8000384:	482a      	ldr	r0, [pc, #168]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 8000386:	f001 fa4c 	bl	8001822 <HAL_GPIO_WritePin>
			}
			chComp <<= 1;
 800038a:	7bbb      	ldrb	r3, [r7, #14]
 800038c:	005b      	lsls	r3, r3, #1
 800038e:	73bb      	strb	r3, [r7, #14]
 8000390:	e0a2      	b.n	80004d8 <Uart_Tx_Byte+0x368>
		}else if(('y' == tim2_trigger) && (tim2_cnt == 9)){ // bit 6
 8000392:	4b26      	ldr	r3, [pc, #152]	; (800042c <Uart_Tx_Byte+0x2bc>)
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	2b79      	cmp	r3, #121	; 0x79
 8000398:	d11f      	bne.n	80003da <Uart_Tx_Byte+0x26a>
 800039a:	4b22      	ldr	r3, [pc, #136]	; (8000424 <Uart_Tx_Byte+0x2b4>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	2b09      	cmp	r3, #9
 80003a0:	d11b      	bne.n	80003da <Uart_Tx_Byte+0x26a>
			tim2_trigger = 'n';
 80003a2:	4b22      	ldr	r3, [pc, #136]	; (800042c <Uart_Tx_Byte+0x2bc>)
 80003a4:	226e      	movs	r2, #110	; 0x6e
 80003a6:	701a      	strb	r2, [r3, #0]
			if((TxData & chComp) == chComp){
 80003a8:	79fa      	ldrb	r2, [r7, #7]
 80003aa:	7bbb      	ldrb	r3, [r7, #14]
 80003ac:	4013      	ands	r3, r2
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	7bba      	ldrb	r2, [r7, #14]
 80003b2:	429a      	cmp	r2, r3
 80003b4:	d108      	bne.n	80003c8 <Uart_Tx_Byte+0x258>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80003b6:	2201      	movs	r2, #1
 80003b8:	2101      	movs	r1, #1
 80003ba:	481d      	ldr	r0, [pc, #116]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 80003bc:	f001 fa31 	bl	8001822 <HAL_GPIO_WritePin>
				ParityBit_cnt += 1;
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	3301      	adds	r3, #1
 80003c4:	60bb      	str	r3, [r7, #8]
 80003c6:	e004      	b.n	80003d2 <Uart_Tx_Byte+0x262>
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80003c8:	2200      	movs	r2, #0
 80003ca:	2101      	movs	r1, #1
 80003cc:	4818      	ldr	r0, [pc, #96]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 80003ce:	f001 fa28 	bl	8001822 <HAL_GPIO_WritePin>
			}
			chComp <<= 1;
 80003d2:	7bbb      	ldrb	r3, [r7, #14]
 80003d4:	005b      	lsls	r3, r3, #1
 80003d6:	73bb      	strb	r3, [r7, #14]
 80003d8:	e07e      	b.n	80004d8 <Uart_Tx_Byte+0x368>
		}else if(('y' == tim2_trigger) && (tim2_cnt == 10)){ // bit 7
 80003da:	4b14      	ldr	r3, [pc, #80]	; (800042c <Uart_Tx_Byte+0x2bc>)
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	2b79      	cmp	r3, #121	; 0x79
 80003e0:	d128      	bne.n	8000434 <Uart_Tx_Byte+0x2c4>
 80003e2:	4b10      	ldr	r3, [pc, #64]	; (8000424 <Uart_Tx_Byte+0x2b4>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	2b0a      	cmp	r3, #10
 80003e8:	d124      	bne.n	8000434 <Uart_Tx_Byte+0x2c4>
			tim2_trigger = 'n';
 80003ea:	4b10      	ldr	r3, [pc, #64]	; (800042c <Uart_Tx_Byte+0x2bc>)
 80003ec:	226e      	movs	r2, #110	; 0x6e
 80003ee:	701a      	strb	r2, [r3, #0]
			if((TxData & chComp) == chComp){
 80003f0:	79fa      	ldrb	r2, [r7, #7]
 80003f2:	7bbb      	ldrb	r3, [r7, #14]
 80003f4:	4013      	ands	r3, r2
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	7bba      	ldrb	r2, [r7, #14]
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d108      	bne.n	8000410 <Uart_Tx_Byte+0x2a0>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80003fe:	2201      	movs	r2, #1
 8000400:	2101      	movs	r1, #1
 8000402:	480b      	ldr	r0, [pc, #44]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 8000404:	f001 fa0d 	bl	8001822 <HAL_GPIO_WritePin>
				ParityBit_cnt += 1;
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	3301      	adds	r3, #1
 800040c:	60bb      	str	r3, [r7, #8]
 800040e:	e004      	b.n	800041a <Uart_Tx_Byte+0x2aa>
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	2101      	movs	r1, #1
 8000414:	4806      	ldr	r0, [pc, #24]	; (8000430 <Uart_Tx_Byte+0x2c0>)
 8000416:	f001 fa04 	bl	8001822 <HAL_GPIO_WritePin>
			}
			chComp <<= 1;
 800041a:	7bbb      	ldrb	r3, [r7, #14]
 800041c:	005b      	lsls	r3, r3, #1
 800041e:	73bb      	strb	r3, [r7, #14]
 8000420:	e05a      	b.n	80004d8 <Uart_Tx_Byte+0x368>
 8000422:	bf00      	nop
 8000424:	20000164 	.word	0x20000164
 8000428:	2000020c 	.word	0x2000020c
 800042c:	20000138 	.word	0x20000138
 8000430:	40010800 	.word	0x40010800
		}else if(('y' == tim2_trigger) && (tim2_cnt == 11)){ // [parity : none/even/odd] or [stop]
 8000434:	4b32      	ldr	r3, [pc, #200]	; (8000500 <Uart_Tx_Byte+0x390>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b79      	cmp	r3, #121	; 0x79
 800043a:	d139      	bne.n	80004b0 <Uart_Tx_Byte+0x340>
 800043c:	4b31      	ldr	r3, [pc, #196]	; (8000504 <Uart_Tx_Byte+0x394>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2b0b      	cmp	r3, #11
 8000442:	d135      	bne.n	80004b0 <Uart_Tx_Byte+0x340>
			tim2_trigger = 'n';
 8000444:	4b2e      	ldr	r3, [pc, #184]	; (8000500 <Uart_Tx_Byte+0x390>)
 8000446:	226e      	movs	r2, #110	; 0x6e
 8000448:	701a      	strb	r2, [r3, #0]
			if('n' == Parity){	// stop
 800044a:	79bb      	ldrb	r3, [r7, #6]
 800044c:	2b6e      	cmp	r3, #110	; 0x6e
 800044e:	d107      	bne.n	8000460 <Uart_Tx_Byte+0x2f0>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000450:	2201      	movs	r2, #1
 8000452:	2101      	movs	r1, #1
 8000454:	482c      	ldr	r0, [pc, #176]	; (8000508 <Uart_Tx_Byte+0x398>)
 8000456:	f001 f9e4 	bl	8001822 <HAL_GPIO_WritePin>
				chExit = 'y';
 800045a:	2379      	movs	r3, #121	; 0x79
 800045c:	73fb      	strb	r3, [r7, #15]
			if('n' == Parity){	// stop
 800045e:	e03a      	b.n	80004d6 <Uart_Tx_Byte+0x366>
			}else if('e' == Parity){
 8000460:	79bb      	ldrb	r3, [r7, #6]
 8000462:	2b65      	cmp	r3, #101	; 0x65
 8000464:	d110      	bne.n	8000488 <Uart_Tx_Byte+0x318>
				if((ParityBit_cnt % 2) == 0){
 8000466:	68bb      	ldr	r3, [r7, #8]
 8000468:	f003 0301 	and.w	r3, r3, #1
 800046c:	2b00      	cmp	r3, #0
 800046e:	d105      	bne.n	800047c <Uart_Tx_Byte+0x30c>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000470:	2200      	movs	r2, #0
 8000472:	2101      	movs	r1, #1
 8000474:	4824      	ldr	r0, [pc, #144]	; (8000508 <Uart_Tx_Byte+0x398>)
 8000476:	f001 f9d4 	bl	8001822 <HAL_GPIO_WritePin>
			if('n' == Parity){	// stop
 800047a:	e02c      	b.n	80004d6 <Uart_Tx_Byte+0x366>
				}else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800047c:	2201      	movs	r2, #1
 800047e:	2101      	movs	r1, #1
 8000480:	4821      	ldr	r0, [pc, #132]	; (8000508 <Uart_Tx_Byte+0x398>)
 8000482:	f001 f9ce 	bl	8001822 <HAL_GPIO_WritePin>
			if('n' == Parity){	// stop
 8000486:	e026      	b.n	80004d6 <Uart_Tx_Byte+0x366>
				}
			}else if('o' == Parity){
 8000488:	79bb      	ldrb	r3, [r7, #6]
 800048a:	2b6f      	cmp	r3, #111	; 0x6f
 800048c:	d123      	bne.n	80004d6 <Uart_Tx_Byte+0x366>
				if((ParityBit_cnt % 2) == 0){
 800048e:	68bb      	ldr	r3, [r7, #8]
 8000490:	f003 0301 	and.w	r3, r3, #1
 8000494:	2b00      	cmp	r3, #0
 8000496:	d105      	bne.n	80004a4 <Uart_Tx_Byte+0x334>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000498:	2201      	movs	r2, #1
 800049a:	2101      	movs	r1, #1
 800049c:	481a      	ldr	r0, [pc, #104]	; (8000508 <Uart_Tx_Byte+0x398>)
 800049e:	f001 f9c0 	bl	8001822 <HAL_GPIO_WritePin>
			if('n' == Parity){	// stop
 80004a2:	e018      	b.n	80004d6 <Uart_Tx_Byte+0x366>
				}else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80004a4:	2200      	movs	r2, #0
 80004a6:	2101      	movs	r1, #1
 80004a8:	4817      	ldr	r0, [pc, #92]	; (8000508 <Uart_Tx_Byte+0x398>)
 80004aa:	f001 f9ba 	bl	8001822 <HAL_GPIO_WritePin>
			if('n' == Parity){	// stop
 80004ae:	e012      	b.n	80004d6 <Uart_Tx_Byte+0x366>
				}
			}
		}else if(('y' == tim2_trigger) && (tim2_cnt == 12)){ // stop
 80004b0:	4b13      	ldr	r3, [pc, #76]	; (8000500 <Uart_Tx_Byte+0x390>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	2b79      	cmp	r3, #121	; 0x79
 80004b6:	d10f      	bne.n	80004d8 <Uart_Tx_Byte+0x368>
 80004b8:	4b12      	ldr	r3, [pc, #72]	; (8000504 <Uart_Tx_Byte+0x394>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2b0c      	cmp	r3, #12
 80004be:	d10b      	bne.n	80004d8 <Uart_Tx_Byte+0x368>
			tim2_trigger = 'n';
 80004c0:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <Uart_Tx_Byte+0x390>)
 80004c2:	226e      	movs	r2, #110	; 0x6e
 80004c4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80004c6:	2201      	movs	r2, #1
 80004c8:	2101      	movs	r1, #1
 80004ca:	480f      	ldr	r0, [pc, #60]	; (8000508 <Uart_Tx_Byte+0x398>)
 80004cc:	f001 f9a9 	bl	8001822 <HAL_GPIO_WritePin>
			chExit = 'y';
 80004d0:	2379      	movs	r3, #121	; 0x79
 80004d2:	73fb      	strb	r3, [r7, #15]
 80004d4:	e000      	b.n	80004d8 <Uart_Tx_Byte+0x368>
			if('n' == Parity){	// stop
 80004d6:	bf00      	nop
		}
		if(('y' == tim2_trigger) && ('y' == chExit)){
 80004d8:	4b09      	ldr	r3, [pc, #36]	; (8000500 <Uart_Tx_Byte+0x390>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	2b79      	cmp	r3, #121	; 0x79
 80004de:	f47f ae5e 	bne.w	800019e <Uart_Tx_Byte+0x2e>
 80004e2:	7bfb      	ldrb	r3, [r7, #15]
 80004e4:	2b79      	cmp	r3, #121	; 0x79
 80004e6:	f47f ae5a 	bne.w	800019e <Uart_Tx_Byte+0x2e>
			tim2_trigger = 'n';
 80004ea:	4b05      	ldr	r3, [pc, #20]	; (8000500 <Uart_Tx_Byte+0x390>)
 80004ec:	226e      	movs	r2, #110	; 0x6e
 80004ee:	701a      	strb	r2, [r3, #0]
			tim2_flag = 'n';
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <Uart_Tx_Byte+0x39c>)
 80004f2:	226e      	movs	r2, #110	; 0x6e
 80004f4:	701a      	strb	r2, [r3, #0]
			break;
 80004f6:	bf00      	nop
		}
	}
}
 80004f8:	bf00      	nop
 80004fa:	3710      	adds	r7, #16
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	20000138 	.word	0x20000138
 8000504:	20000164 	.word	0x20000164
 8000508:	40010800 	.word	0x40010800
 800050c:	2000020c 	.word	0x2000020c

08000510 <HAL_TIM_PeriodElapsedCallback>:
}


//RX
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim2.Instance){
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681a      	ldr	r2, [r3, #0]
 800051c:	4b9d      	ldr	r3, [pc, #628]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	429a      	cmp	r2, r3
 8000522:	d10b      	bne.n	800053c <HAL_TIM_PeriodElapsedCallback+0x2c>
			//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
			if('y' == tim2_flag){
 8000524:	4b9c      	ldr	r3, [pc, #624]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b79      	cmp	r3, #121	; 0x79
 800052a:	d107      	bne.n	800053c <HAL_TIM_PeriodElapsedCallback+0x2c>
				tim2_cnt += 1;
 800052c:	4b9b      	ldr	r3, [pc, #620]	; (800079c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	3301      	adds	r3, #1
 8000532:	4a9a      	ldr	r2, [pc, #616]	; (800079c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000534:	6013      	str	r3, [r2, #0]
				tim2_trigger = 'y';
 8000536:	4b9a      	ldr	r3, [pc, #616]	; (80007a0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8000538:	2279      	movs	r2, #121	; 0x79
 800053a:	701a      	strb	r2, [r3, #0]
			}
		}
	if(htim->Instance == htim3.Instance){
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	4b98      	ldr	r3, [pc, #608]	; (80007a4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	429a      	cmp	r2, r3
 8000546:	f040 81cf 	bne.w	80008e8 <HAL_TIM_PeriodElapsedCallback+0x3d8>
		if('y' == Uart_Rx_flag){
 800054a:	4b97      	ldr	r3, [pc, #604]	; (80007a8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2b79      	cmp	r3, #121	; 0x79
 8000550:	f040 81ca 	bne.w	80008e8 <HAL_TIM_PeriodElapsedCallback+0x3d8>
			if('n' == Uart_Rx_active){
 8000554:	4b95      	ldr	r3, [pc, #596]	; (80007ac <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b6e      	cmp	r3, #110	; 0x6e
 800055a:	d161      	bne.n	8000620 <HAL_TIM_PeriodElapsedCallback+0x110>
				Uart_Rx_Temp <<= 1;
 800055c:	4b94      	ldr	r3, [pc, #592]	; (80007b0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	005b      	lsls	r3, r3, #1
 8000562:	b2da      	uxtb	r2, r3
 8000564:	4b92      	ldr	r3, [pc, #584]	; (80007b0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000566:	701a      	strb	r2, [r3, #0]
				if(GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)){
 8000568:	2101      	movs	r1, #1
 800056a:	4892      	ldr	r0, [pc, #584]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800056c:	f001 f942 	bl	80017f4 <HAL_GPIO_ReadPin>
 8000570:	4603      	mov	r3, r0
 8000572:	2b01      	cmp	r3, #1
 8000574:	d105      	bne.n	8000582 <HAL_TIM_PeriodElapsedCallback+0x72>
					Uart_Rx_Temp += 1;
 8000576:	4b8e      	ldr	r3, [pc, #568]	; (80007b0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	3301      	adds	r3, #1
 800057c:	b2da      	uxtb	r2, r3
 800057e:	4b8c      	ldr	r3, [pc, #560]	; (80007b0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000580:	701a      	strb	r2, [r3, #0]
				}
				if((Uart_Rx_Temp & 0x0f) == 0x0c){
 8000582:	4b8b      	ldr	r3, [pc, #556]	; (80007b0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	f003 030f 	and.w	r3, r3, #15
 800058a:	2b0c      	cmp	r3, #12
 800058c:	f040 81ac 	bne.w	80008e8 <HAL_TIM_PeriodElapsedCallback+0x3d8>
					Uart_Rx_active = 'y';
 8000590:	4b86      	ldr	r3, [pc, #536]	; (80007ac <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000592:	2279      	movs	r2, #121	; 0x79
 8000594:	701a      	strb	r2, [r3, #0]
					Uart_Rx_Temp = 0x00;
 8000596:	4b86      	ldr	r3, [pc, #536]	; (80007b0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000598:	2200      	movs	r2, #0
 800059a:	701a      	strb	r2, [r3, #0]
					rxByte_cnt += 1;
 800059c:	4b86      	ldr	r3, [pc, #536]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	3301      	adds	r3, #1
 80005a2:	4a85      	ldr	r2, [pc, #532]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80005a4:	6013      	str	r3, [r2, #0]
					rxData[rxByte_cnt].start = 'y';
 80005a6:	4b84      	ldr	r3, [pc, #528]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	4984      	ldr	r1, [pc, #528]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80005ac:	4613      	mov	r3, r2
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	4413      	add	r3, r2
 80005b2:	440b      	add	r3, r1
 80005b4:	2279      	movs	r2, #121	; 0x79
 80005b6:	701a      	strb	r2, [r3, #0]
					rxData[rxByte_cnt].data = 0x00;
 80005b8:	4b7f      	ldr	r3, [pc, #508]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	497f      	ldr	r1, [pc, #508]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80005be:	4613      	mov	r3, r2
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	4413      	add	r3, r2
 80005c4:	440b      	add	r3, r1
 80005c6:	3301      	adds	r3, #1
 80005c8:	2200      	movs	r2, #0
 80005ca:	701a      	strb	r2, [r3, #0]
					rxData[rxByte_cnt].parity = 'n';
 80005cc:	4b7a      	ldr	r3, [pc, #488]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	497a      	ldr	r1, [pc, #488]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80005d2:	4613      	mov	r3, r2
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	4413      	add	r3, r2
 80005d8:	440b      	add	r3, r1
 80005da:	3302      	adds	r3, #2
 80005dc:	226e      	movs	r2, #110	; 0x6e
 80005de:	701a      	strb	r2, [r3, #0]
					rxData[rxByte_cnt].stop = 'x';
 80005e0:	4b75      	ldr	r3, [pc, #468]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	4975      	ldr	r1, [pc, #468]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80005e6:	4613      	mov	r3, r2
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	4413      	add	r3, r2
 80005ec:	440b      	add	r3, r1
 80005ee:	3303      	adds	r3, #3
 80005f0:	2278      	movs	r2, #120	; 0x78
 80005f2:	701a      	strb	r2, [r3, #0]
					rxBit_cnt = 0;
 80005f4:	4b72      	ldr	r3, [pc, #456]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
					rxSamp_cnt = 0;
 80005fa:	4b72      	ldr	r3, [pc, #456]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
					rxParity_bit = 0;
 8000600:	4b71      	ldr	r3, [pc, #452]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
					Uart_Rx_trigger = 'n';
 8000606:	4b71      	ldr	r3, [pc, #452]	; (80007cc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000608:	226e      	movs	r2, #110	; 0x6e
 800060a:	701a      	strb	r2, [r3, #0]
					Uart_Rx_data = 'n';
 800060c:	4b70      	ldr	r3, [pc, #448]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800060e:	226e      	movs	r2, #110	; 0x6e
 8000610:	701a      	strb	r2, [r3, #0]
					Uart_Rx_parity = 'n';
 8000612:	4b70      	ldr	r3, [pc, #448]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000614:	226e      	movs	r2, #110	; 0x6e
 8000616:	701a      	strb	r2, [r3, #0]
					Uart_Rx_stop = 'n';
 8000618:	4b6f      	ldr	r3, [pc, #444]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800061a:	226e      	movs	r2, #110	; 0x6e
 800061c:	701a      	strb	r2, [r3, #0]

				}
			}
		}
	}
}
 800061e:	e163      	b.n	80008e8 <HAL_TIM_PeriodElapsedCallback+0x3d8>
				Uart_Rx_trigger = 'n';
 8000620:	4b6a      	ldr	r3, [pc, #424]	; (80007cc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000622:	226e      	movs	r2, #110	; 0x6e
 8000624:	701a      	strb	r2, [r3, #0]
				rxSamp_cnt += 1;
 8000626:	4b67      	ldr	r3, [pc, #412]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	3301      	adds	r3, #1
 800062c:	4a65      	ldr	r2, [pc, #404]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800062e:	6013      	str	r3, [r2, #0]
				if((rxSamp_cnt % 4) == 0){
 8000630:	4b64      	ldr	r3, [pc, #400]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f003 0303 	and.w	r3, r3, #3
 8000638:	2b00      	cmp	r3, #0
 800063a:	d14d      	bne.n	80006d8 <HAL_TIM_PeriodElapsedCallback+0x1c8>
					Uart_Rx_trigger = 'y';
 800063c:	4b63      	ldr	r3, [pc, #396]	; (80007cc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800063e:	2279      	movs	r2, #121	; 0x79
 8000640:	701a      	strb	r2, [r3, #0]
					if(GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)){
 8000642:	2101      	movs	r1, #1
 8000644:	485b      	ldr	r0, [pc, #364]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000646:	f001 f8d5 	bl	80017f4 <HAL_GPIO_ReadPin>
 800064a:	4603      	mov	r3, r0
 800064c:	2b01      	cmp	r3, #1
 800064e:	d103      	bne.n	8000658 <HAL_TIM_PeriodElapsedCallback+0x148>
						rxBit_value = 1;
 8000650:	4b62      	ldr	r3, [pc, #392]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000652:	2201      	movs	r2, #1
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	e002      	b.n	800065e <HAL_TIM_PeriodElapsedCallback+0x14e>
						rxBit_value = 0;
 8000658:	4b60      	ldr	r3, [pc, #384]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
					rxBit_cnt += 1;
 800065e:	4b58      	ldr	r3, [pc, #352]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	3301      	adds	r3, #1
 8000664:	4a56      	ldr	r2, [pc, #344]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000666:	6013      	str	r3, [r2, #0]
					if((1 <= rxBit_cnt) && (rxBit_cnt <= 8)){
 8000668:	4b55      	ldr	r3, [pc, #340]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	dd07      	ble.n	8000680 <HAL_TIM_PeriodElapsedCallback+0x170>
 8000670:	4b53      	ldr	r3, [pc, #332]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b08      	cmp	r3, #8
 8000676:	dc03      	bgt.n	8000680 <HAL_TIM_PeriodElapsedCallback+0x170>
						Uart_Rx_data = 'y';
 8000678:	4b55      	ldr	r3, [pc, #340]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800067a:	2279      	movs	r2, #121	; 0x79
 800067c:	701a      	strb	r2, [r3, #0]
 800067e:	e02b      	b.n	80006d8 <HAL_TIM_PeriodElapsedCallback+0x1c8>
					}else if(9 == rxBit_cnt){
 8000680:	4b4f      	ldr	r3, [pc, #316]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b09      	cmp	r3, #9
 8000686:	d11d      	bne.n	80006c4 <HAL_TIM_PeriodElapsedCallback+0x1b4>
						Uart_Rx_data = 'n';
 8000688:	4b51      	ldr	r3, [pc, #324]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800068a:	226e      	movs	r2, #110	; 0x6e
 800068c:	701a      	strb	r2, [r3, #0]
						if('n' == Uart_Rx_Parity_Mode){
 800068e:	4b54      	ldr	r3, [pc, #336]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b6e      	cmp	r3, #110	; 0x6e
 8000694:	d106      	bne.n	80006a4 <HAL_TIM_PeriodElapsedCallback+0x194>
							Uart_Rx_parity = 'n';
 8000696:	4b4f      	ldr	r3, [pc, #316]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000698:	226e      	movs	r2, #110	; 0x6e
 800069a:	701a      	strb	r2, [r3, #0]
							Uart_Rx_stop = 'y';
 800069c:	4b4e      	ldr	r3, [pc, #312]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800069e:	2279      	movs	r2, #121	; 0x79
 80006a0:	701a      	strb	r2, [r3, #0]
 80006a2:	e019      	b.n	80006d8 <HAL_TIM_PeriodElapsedCallback+0x1c8>
						}else if('e' == Uart_Rx_Parity_Mode){
 80006a4:	4b4e      	ldr	r3, [pc, #312]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b65      	cmp	r3, #101	; 0x65
 80006aa:	d103      	bne.n	80006b4 <HAL_TIM_PeriodElapsedCallback+0x1a4>
							Uart_Rx_parity = 'y';
 80006ac:	4b49      	ldr	r3, [pc, #292]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80006ae:	2279      	movs	r2, #121	; 0x79
 80006b0:	701a      	strb	r2, [r3, #0]
 80006b2:	e011      	b.n	80006d8 <HAL_TIM_PeriodElapsedCallback+0x1c8>
						}else if('o' == Uart_Rx_Parity_Mode){
 80006b4:	4b4a      	ldr	r3, [pc, #296]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b6f      	cmp	r3, #111	; 0x6f
 80006ba:	d10d      	bne.n	80006d8 <HAL_TIM_PeriodElapsedCallback+0x1c8>
							Uart_Rx_parity = 'y';
 80006bc:	4b45      	ldr	r3, [pc, #276]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80006be:	2279      	movs	r2, #121	; 0x79
 80006c0:	701a      	strb	r2, [r3, #0]
 80006c2:	e009      	b.n	80006d8 <HAL_TIM_PeriodElapsedCallback+0x1c8>
					}else if(10 == rxBit_cnt){
 80006c4:	4b3e      	ldr	r3, [pc, #248]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b0a      	cmp	r3, #10
 80006ca:	d105      	bne.n	80006d8 <HAL_TIM_PeriodElapsedCallback+0x1c8>
						Uart_Rx_parity = 'n';
 80006cc:	4b41      	ldr	r3, [pc, #260]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80006ce:	226e      	movs	r2, #110	; 0x6e
 80006d0:	701a      	strb	r2, [r3, #0]
						Uart_Rx_stop = 'y';
 80006d2:	4b41      	ldr	r3, [pc, #260]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80006d4:	2279      	movs	r2, #121	; 0x79
 80006d6:	701a      	strb	r2, [r3, #0]
				if(('y' == Uart_Rx_trigger) && ('y' == Uart_Rx_data)){
 80006d8:	4b3c      	ldr	r3, [pc, #240]	; (80007cc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b79      	cmp	r3, #121	; 0x79
 80006de:	d136      	bne.n	800074e <HAL_TIM_PeriodElapsedCallback+0x23e>
 80006e0:	4b3b      	ldr	r3, [pc, #236]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b79      	cmp	r3, #121	; 0x79
 80006e6:	d132      	bne.n	800074e <HAL_TIM_PeriodElapsedCallback+0x23e>
					rxData[rxByte_cnt].data >>= 1;
 80006e8:	4b33      	ldr	r3, [pc, #204]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	4933      	ldr	r1, [pc, #204]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80006ee:	4613      	mov	r3, r2
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	4413      	add	r3, r2
 80006f4:	440b      	add	r3, r1
 80006f6:	3301      	adds	r3, #1
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	4a2f      	ldr	r2, [pc, #188]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80006fc:	6812      	ldr	r2, [r2, #0]
 80006fe:	085b      	lsrs	r3, r3, #1
 8000700:	b2d8      	uxtb	r0, r3
 8000702:	492e      	ldr	r1, [pc, #184]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000704:	4613      	mov	r3, r2
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	4413      	add	r3, r2
 800070a:	440b      	add	r3, r1
 800070c:	3301      	adds	r3, #1
 800070e:	4602      	mov	r2, r0
 8000710:	701a      	strb	r2, [r3, #0]
					if(1 == rxBit_value){
 8000712:	4b32      	ldr	r3, [pc, #200]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d119      	bne.n	800074e <HAL_TIM_PeriodElapsedCallback+0x23e>
						rxData[rxByte_cnt].data += 0x80;
 800071a:	4b27      	ldr	r3, [pc, #156]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	4927      	ldr	r1, [pc, #156]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000720:	4613      	mov	r3, r2
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	4413      	add	r3, r2
 8000726:	440b      	add	r3, r1
 8000728:	3301      	adds	r3, #1
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	4a22      	ldr	r2, [pc, #136]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800072e:	6812      	ldr	r2, [r2, #0]
 8000730:	3b80      	subs	r3, #128	; 0x80
 8000732:	b2d8      	uxtb	r0, r3
 8000734:	4921      	ldr	r1, [pc, #132]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000736:	4613      	mov	r3, r2
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	4413      	add	r3, r2
 800073c:	440b      	add	r3, r1
 800073e:	3301      	adds	r3, #1
 8000740:	4602      	mov	r2, r0
 8000742:	701a      	strb	r2, [r3, #0]
						rxParity_bit += 1;
 8000744:	4b20      	ldr	r3, [pc, #128]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	3301      	adds	r3, #1
 800074a:	4a1f      	ldr	r2, [pc, #124]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800074c:	6013      	str	r3, [r2, #0]
				if(('y' == Uart_Rx_trigger) && ('y' == Uart_Rx_parity)){
 800074e:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b79      	cmp	r3, #121	; 0x79
 8000754:	f040 80a4 	bne.w	80008a0 <HAL_TIM_PeriodElapsedCallback+0x390>
 8000758:	4b1e      	ldr	r3, [pc, #120]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b79      	cmp	r3, #121	; 0x79
 800075e:	f040 809f 	bne.w	80008a0 <HAL_TIM_PeriodElapsedCallback+0x390>
					if('e' == Uart_Rx_Parity_Mode){
 8000762:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b65      	cmp	r3, #101	; 0x65
 8000768:	d15f      	bne.n	800082a <HAL_TIM_PeriodElapsedCallback+0x31a>
						if(((rxParity_bit % 2) == 0) && (0 == rxBit_value)){
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	2b00      	cmp	r3, #0
 8000774:	d136      	bne.n	80007e4 <HAL_TIM_PeriodElapsedCallback+0x2d4>
 8000776:	4b19      	ldr	r3, [pc, #100]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d132      	bne.n	80007e4 <HAL_TIM_PeriodElapsedCallback+0x2d4>
							rxData[rxByte_cnt].parity = 'e';
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	490e      	ldr	r1, [pc, #56]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000784:	4613      	mov	r3, r2
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	4413      	add	r3, r2
 800078a:	440b      	add	r3, r1
 800078c:	3302      	adds	r3, #2
 800078e:	2265      	movs	r2, #101	; 0x65
 8000790:	701a      	strb	r2, [r3, #0]
 8000792:	e085      	b.n	80008a0 <HAL_TIM_PeriodElapsedCallback+0x390>
 8000794:	200001c4 	.word	0x200001c4
 8000798:	2000020c 	.word	0x2000020c
 800079c:	20000164 	.word	0x20000164
 80007a0:	20000138 	.word	0x20000138
 80007a4:	20000174 	.word	0x20000174
 80007a8:	20000161 	.word	0x20000161
 80007ac:	20000163 	.word	0x20000163
 80007b0:	20000254 	.word	0x20000254
 80007b4:	40011000 	.word	0x40011000
 80007b8:	200001bc 	.word	0x200001bc
 80007bc:	20000098 	.word	0x20000098
 80007c0:	2000016c 	.word	0x2000016c
 80007c4:	20000170 	.word	0x20000170
 80007c8:	2000015c 	.word	0x2000015c
 80007cc:	200001c0 	.word	0x200001c0
 80007d0:	20000168 	.word	0x20000168
 80007d4:	20000160 	.word	0x20000160
 80007d8:	20000139 	.word	0x20000139
 80007dc:	20000258 	.word	0x20000258
 80007e0:	20000162 	.word	0x20000162
						}else if(((rxParity_bit % 2) == 1) && (1 == rxBit_value)){
 80007e4:	4b42      	ldr	r3, [pc, #264]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	bfb8      	it	lt
 80007f0:	425b      	neglt	r3, r3
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d10e      	bne.n	8000814 <HAL_TIM_PeriodElapsedCallback+0x304>
 80007f6:	4b3f      	ldr	r3, [pc, #252]	; (80008f4 <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d10a      	bne.n	8000814 <HAL_TIM_PeriodElapsedCallback+0x304>
							rxData[rxByte_cnt].parity = 'e';
 80007fe:	4b3e      	ldr	r3, [pc, #248]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	493e      	ldr	r1, [pc, #248]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 8000804:	4613      	mov	r3, r2
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	4413      	add	r3, r2
 800080a:	440b      	add	r3, r1
 800080c:	3302      	adds	r3, #2
 800080e:	2265      	movs	r2, #101	; 0x65
 8000810:	701a      	strb	r2, [r3, #0]
 8000812:	e045      	b.n	80008a0 <HAL_TIM_PeriodElapsedCallback+0x390>
							rxData[rxByte_cnt].parity = 'f';
 8000814:	4b38      	ldr	r3, [pc, #224]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	4938      	ldr	r1, [pc, #224]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 800081a:	4613      	mov	r3, r2
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	4413      	add	r3, r2
 8000820:	440b      	add	r3, r1
 8000822:	3302      	adds	r3, #2
 8000824:	2266      	movs	r2, #102	; 0x66
 8000826:	701a      	strb	r2, [r3, #0]
 8000828:	e03a      	b.n	80008a0 <HAL_TIM_PeriodElapsedCallback+0x390>
					}else if('o' == Uart_Rx_Parity_Mode){
 800082a:	4b35      	ldr	r3, [pc, #212]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x3f0>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b6f      	cmp	r3, #111	; 0x6f
 8000830:	d136      	bne.n	80008a0 <HAL_TIM_PeriodElapsedCallback+0x390>
						if(((rxParity_bit % 2) == 0) && (1 == rxBit_value)){
 8000832:	4b2f      	ldr	r3, [pc, #188]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	2b00      	cmp	r3, #0
 800083c:	d10e      	bne.n	800085c <HAL_TIM_PeriodElapsedCallback+0x34c>
 800083e:	4b2d      	ldr	r3, [pc, #180]	; (80008f4 <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d10a      	bne.n	800085c <HAL_TIM_PeriodElapsedCallback+0x34c>
							rxData[rxByte_cnt].parity = 'o';
 8000846:	4b2c      	ldr	r3, [pc, #176]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	492c      	ldr	r1, [pc, #176]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 800084c:	4613      	mov	r3, r2
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	4413      	add	r3, r2
 8000852:	440b      	add	r3, r1
 8000854:	3302      	adds	r3, #2
 8000856:	226f      	movs	r2, #111	; 0x6f
 8000858:	701a      	strb	r2, [r3, #0]
 800085a:	e021      	b.n	80008a0 <HAL_TIM_PeriodElapsedCallback+0x390>
						}else if(((rxParity_bit % 2) == 1) && (0 == rxBit_value)){
 800085c:	4b24      	ldr	r3, [pc, #144]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	bfb8      	it	lt
 8000868:	425b      	neglt	r3, r3
 800086a:	2b01      	cmp	r3, #1
 800086c:	d10e      	bne.n	800088c <HAL_TIM_PeriodElapsedCallback+0x37c>
 800086e:	4b21      	ldr	r3, [pc, #132]	; (80008f4 <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d10a      	bne.n	800088c <HAL_TIM_PeriodElapsedCallback+0x37c>
							rxData[rxByte_cnt].parity = 'o';
 8000876:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	4920      	ldr	r1, [pc, #128]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 800087c:	4613      	mov	r3, r2
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	4413      	add	r3, r2
 8000882:	440b      	add	r3, r1
 8000884:	3302      	adds	r3, #2
 8000886:	226f      	movs	r2, #111	; 0x6f
 8000888:	701a      	strb	r2, [r3, #0]
 800088a:	e009      	b.n	80008a0 <HAL_TIM_PeriodElapsedCallback+0x390>
							rxData[rxByte_cnt].parity = 'f';
 800088c:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	491a      	ldr	r1, [pc, #104]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 8000892:	4613      	mov	r3, r2
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	4413      	add	r3, r2
 8000898:	440b      	add	r3, r1
 800089a:	3302      	adds	r3, #2
 800089c:	2266      	movs	r2, #102	; 0x66
 800089e:	701a      	strb	r2, [r3, #0]
				if(('y' == Uart_Rx_trigger) && ('y' == Uart_Rx_stop)){
 80008a0:	4b18      	ldr	r3, [pc, #96]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b79      	cmp	r3, #121	; 0x79
 80008a6:	d11f      	bne.n	80008e8 <HAL_TIM_PeriodElapsedCallback+0x3d8>
 80008a8:	4b17      	ldr	r3, [pc, #92]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b79      	cmp	r3, #121	; 0x79
 80008ae:	d11b      	bne.n	80008e8 <HAL_TIM_PeriodElapsedCallback+0x3d8>
					Uart_Rx_active = 'n';
 80008b0:	4b16      	ldr	r3, [pc, #88]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 80008b2:	226e      	movs	r2, #110	; 0x6e
 80008b4:	701a      	strb	r2, [r3, #0]
					if(1 == rxBit_value){
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d10a      	bne.n	80008d4 <HAL_TIM_PeriodElapsedCallback+0x3c4>
						rxData[rxByte_cnt].stop = 'y';
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	490e      	ldr	r1, [pc, #56]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 80008c4:	4613      	mov	r3, r2
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	4413      	add	r3, r2
 80008ca:	440b      	add	r3, r1
 80008cc:	3303      	adds	r3, #3
 80008ce:	2279      	movs	r2, #121	; 0x79
 80008d0:	701a      	strb	r2, [r3, #0]
}
 80008d2:	e009      	b.n	80008e8 <HAL_TIM_PeriodElapsedCallback+0x3d8>
						rxData[rxByte_cnt].stop = 'n';
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	4908      	ldr	r1, [pc, #32]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 80008da:	4613      	mov	r3, r2
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	4413      	add	r3, r2
 80008e0:	440b      	add	r3, r1
 80008e2:	3303      	adds	r3, #3
 80008e4:	226e      	movs	r2, #110	; 0x6e
 80008e6:	701a      	strb	r2, [r3, #0]
}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	2000015c 	.word	0x2000015c
 80008f4:	20000258 	.word	0x20000258
 80008f8:	200001bc 	.word	0x200001bc
 80008fc:	20000098 	.word	0x20000098
 8000900:	20000162 	.word	0x20000162
 8000904:	200001c0 	.word	0x200001c0
 8000908:	20000139 	.word	0x20000139
 800090c:	20000163 	.word	0x20000163

08000910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000910:	b5b0      	push	{r4, r5, r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000916:	f000 fc81 	bl	800121c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800091a:	f000 f927 	bl	8000b6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800091e:	f000 fa29 	bl	8000d74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000922:	f000 f9fd 	bl	8000d20 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000926:	f000 f963 	bl	8000bf0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800092a:	f000 f9ad 	bl	8000c88 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //TX
  printf("---uart tx mode\r\n---");
 800092e:	4877      	ldr	r0, [pc, #476]	; (8000b0c <main+0x1fc>)
 8000930:	f002 f9be 	bl	8002cb0 <iprintf>

   Uart_Tx_Parity_Mode = 'n'; // 'n':none, 'e':even, 'o':odd
 8000934:	4b76      	ldr	r3, [pc, #472]	; (8000b10 <main+0x200>)
 8000936:	226e      	movs	r2, #110	; 0x6e
 8000938:	701a      	strb	r2, [r3, #0]
   tim2_cnt = 0;
 800093a:	4b76      	ldr	r3, [pc, #472]	; (8000b14 <main+0x204>)
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
   tim2_flag = 'n';
 8000940:	4b75      	ldr	r3, [pc, #468]	; (8000b18 <main+0x208>)
 8000942:	226e      	movs	r2, #110	; 0x6e
 8000944:	701a      	strb	r2, [r3, #0]
   tim2_trigger = 'n';
 8000946:	4b75      	ldr	r3, [pc, #468]	; (8000b1c <main+0x20c>)
 8000948:	226e      	movs	r2, #110	; 0x6e
 800094a:	701a      	strb	r2, [r3, #0]

   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); // tx idle : high
 800094c:	2201      	movs	r2, #1
 800094e:	2101      	movs	r1, #1
 8000950:	4873      	ldr	r0, [pc, #460]	; (8000b20 <main+0x210>)
 8000952:	f000 ff66 	bl	8001822 <HAL_GPIO_WritePin>

   tim2_it_start = HAL_TIM_Base_Start_IT(&htim2);
 8000956:	4873      	ldr	r0, [pc, #460]	; (8000b24 <main+0x214>)
 8000958:	f001 fc22 	bl	80021a0 <HAL_TIM_Base_Start_IT>
 800095c:	4603      	mov	r3, r0
 800095e:	72fb      	strb	r3, [r7, #11]
   if(HAL_OK == tim2_it_start){
 8000960:	7afb      	ldrb	r3, [r7, #11]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d103      	bne.n	800096e <main+0x5e>
 	  printf("HAL_TIM_Base_Start_IT OK\r\n");
 8000966:	4870      	ldr	r0, [pc, #448]	; (8000b28 <main+0x218>)
 8000968:	f002 fa16 	bl	8002d98 <puts>
 800096c:	e002      	b.n	8000974 <main+0x64>
   }else{
 	  printf("HAL_TIM_Base_Start_IT error\r\n");
 800096e:	486f      	ldr	r0, [pc, #444]	; (8000b2c <main+0x21c>)
 8000970:	f002 fa12 	bl	8002d98 <puts>
   }

   chUartTxData[0] = 'a';
 8000974:	4b6e      	ldr	r3, [pc, #440]	; (8000b30 <main+0x220>)
 8000976:	2261      	movs	r2, #97	; 0x61
 8000978:	701a      	strb	r2, [r3, #0]


  //RX
  printf("---uart rx mode\r\n---");
 800097a:	486e      	ldr	r0, [pc, #440]	; (8000b34 <main+0x224>)
 800097c:	f002 f998 	bl	8002cb0 <iprintf>

    //-----parameter initial-----
    Uart_Rx_Parity_Mode = 'n'; // 'n':none, 'e':even, 'o':odd
 8000980:	4b6d      	ldr	r3, [pc, #436]	; (8000b38 <main+0x228>)
 8000982:	226e      	movs	r2, #110	; 0x6e
 8000984:	701a      	strb	r2, [r3, #0]
    rxByte_cnt = 0;
 8000986:	4b6d      	ldr	r3, [pc, #436]	; (8000b3c <main+0x22c>)
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
    rxBit_cnt = 0;
 800098c:	4b6c      	ldr	r3, [pc, #432]	; (8000b40 <main+0x230>)
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
    rxSamp_cnt = 0;
 8000992:	4b6c      	ldr	r3, [pc, #432]	; (8000b44 <main+0x234>)
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
    Uart_Rx_flag = 'n';
 8000998:	4b6b      	ldr	r3, [pc, #428]	; (8000b48 <main+0x238>)
 800099a:	226e      	movs	r2, #110	; 0x6e
 800099c:	701a      	strb	r2, [r3, #0]
    Uart_Rx_active = 'n';
 800099e:	4b6b      	ldr	r3, [pc, #428]	; (8000b4c <main+0x23c>)
 80009a0:	226e      	movs	r2, #110	; 0x6e
 80009a2:	701a      	strb	r2, [r3, #0]
    Uart_Rx_Temp = 0x00;
 80009a4:	4b6a      	ldr	r3, [pc, #424]	; (8000b50 <main+0x240>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	701a      	strb	r2, [r3, #0]

    tim3_it_start = HAL_TIM_Base_Start_IT(&htim3);
 80009aa:	486a      	ldr	r0, [pc, #424]	; (8000b54 <main+0x244>)
 80009ac:	f001 fbf8 	bl	80021a0 <HAL_TIM_Base_Start_IT>
 80009b0:	4603      	mov	r3, r0
 80009b2:	72bb      	strb	r3, [r7, #10]
    if(HAL_OK == tim3_it_start){
 80009b4:	7abb      	ldrb	r3, [r7, #10]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d103      	bne.n	80009c2 <main+0xb2>
  	  printf("HAL_TIM_Base_Start_IT OK\r\n");
 80009ba:	485b      	ldr	r0, [pc, #364]	; (8000b28 <main+0x218>)
 80009bc:	f002 f9ec 	bl	8002d98 <puts>
 80009c0:	e002      	b.n	80009c8 <main+0xb8>
    }else{
  	  printf("HAL_TIM_Base_Start_IT error\r\n");
 80009c2:	485a      	ldr	r0, [pc, #360]	; (8000b2c <main+0x21c>)
 80009c4:	f002 f9e8 	bl	8002d98 <puts>
    }

    //-----uart rx mode : start-----
    Uart_Rx_flag = 'y';
 80009c8:	4b5f      	ldr	r3, [pc, #380]	; (8000b48 <main+0x238>)
 80009ca:	2279      	movs	r2, #121	; 0x79
 80009cc:	701a      	strb	r2, [r3, #0]
    Uart_Rx_active = 'n';
 80009ce:	4b5f      	ldr	r3, [pc, #380]	; (8000b4c <main+0x23c>)
 80009d0:	226e      	movs	r2, #110	; 0x6e
 80009d2:	701a      	strb	r2, [r3, #0]

    /* USER CODE BEGIN 3 */


	  //----- parity mode ------------------------------------------------------------------------------
	  pa8pin = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 80009d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009d8:	4851      	ldr	r0, [pc, #324]	; (8000b20 <main+0x210>)
 80009da:	f000 ff0b 	bl	80017f4 <HAL_GPIO_ReadPin>
 80009de:	4603      	mov	r3, r0
 80009e0:	727b      	strb	r3, [r7, #9]
	  pb8pin = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);
 80009e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009e6:	485c      	ldr	r0, [pc, #368]	; (8000b58 <main+0x248>)
 80009e8:	f000 ff04 	bl	80017f4 <HAL_GPIO_ReadPin>
 80009ec:	4603      	mov	r3, r0
 80009ee:	723b      	strb	r3, [r7, #8]
	  if((GPIO_PIN_SET == pa8pin) && (GPIO_PIN_RESET == pb8pin)){
 80009f0:	7a7b      	ldrb	r3, [r7, #9]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d109      	bne.n	8000a0a <main+0xfa>
 80009f6:	7a3b      	ldrb	r3, [r7, #8]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d106      	bne.n	8000a0a <main+0xfa>
		  Uart_Tx_Parity_Mode = 'e';
 80009fc:	4b44      	ldr	r3, [pc, #272]	; (8000b10 <main+0x200>)
 80009fe:	2265      	movs	r2, #101	; 0x65
 8000a00:	701a      	strb	r2, [r3, #0]
		  Uart_Rx_Parity_Mode = 'e';
 8000a02:	4b4d      	ldr	r3, [pc, #308]	; (8000b38 <main+0x228>)
 8000a04:	2265      	movs	r2, #101	; 0x65
 8000a06:	701a      	strb	r2, [r3, #0]
 8000a08:	e012      	b.n	8000a30 <main+0x120>
	  }else if((GPIO_PIN_RESET == pa8pin) && (GPIO_PIN_SET == pb8pin)){
 8000a0a:	7a7b      	ldrb	r3, [r7, #9]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d109      	bne.n	8000a24 <main+0x114>
 8000a10:	7a3b      	ldrb	r3, [r7, #8]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d106      	bne.n	8000a24 <main+0x114>
		  Uart_Tx_Parity_Mode = 'o';
 8000a16:	4b3e      	ldr	r3, [pc, #248]	; (8000b10 <main+0x200>)
 8000a18:	226f      	movs	r2, #111	; 0x6f
 8000a1a:	701a      	strb	r2, [r3, #0]
		  Uart_Rx_Parity_Mode = 'o';
 8000a1c:	4b46      	ldr	r3, [pc, #280]	; (8000b38 <main+0x228>)
 8000a1e:	226f      	movs	r2, #111	; 0x6f
 8000a20:	701a      	strb	r2, [r3, #0]
 8000a22:	e005      	b.n	8000a30 <main+0x120>
	  }else{
		  Uart_Tx_Parity_Mode = 'n';
 8000a24:	4b3a      	ldr	r3, [pc, #232]	; (8000b10 <main+0x200>)
 8000a26:	226e      	movs	r2, #110	; 0x6e
 8000a28:	701a      	strb	r2, [r3, #0]
		  Uart_Rx_Parity_Mode = 'n';
 8000a2a:	4b43      	ldr	r3, [pc, #268]	; (8000b38 <main+0x228>)
 8000a2c:	226e      	movs	r2, #110	; 0x6e
 8000a2e:	701a      	strb	r2, [r3, #0]
	  //----- parity mode ------------------------------------------------------------------------------

	  //----- uart tx mode ------------------------------------------------------------------------------

	  //----- one byte -----
	  pc13pin = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000a30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a34:	4849      	ldr	r0, [pc, #292]	; (8000b5c <main+0x24c>)
 8000a36:	f000 fedd 	bl	80017f4 <HAL_GPIO_ReadPin>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
	  if(GPIO_PIN_RESET == pc13pin){
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d120      	bne.n	8000a86 <main+0x176>
		  Uart_Tx_Byte(chUartTxData[0], Uart_Tx_Parity_Mode);
 8000a44:	4b3a      	ldr	r3, [pc, #232]	; (8000b30 <main+0x220>)
 8000a46:	781a      	ldrb	r2, [r3, #0]
 8000a48:	4b31      	ldr	r3, [pc, #196]	; (8000b10 <main+0x200>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4610      	mov	r0, r2
 8000a50:	f7ff fb8e 	bl	8000170 <Uart_Tx_Byte>
		  printf("-a14-Uart_Tx_Byte=%c[0x%02x]---parity=%c---\r\n",chUartTxData[0],chUartTxData[0],Uart_Tx_Parity_Mode);
 8000a54:	4b36      	ldr	r3, [pc, #216]	; (8000b30 <main+0x220>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4b35      	ldr	r3, [pc, #212]	; (8000b30 <main+0x220>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	4b2b      	ldr	r3, [pc, #172]	; (8000b10 <main+0x200>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	483e      	ldr	r0, [pc, #248]	; (8000b60 <main+0x250>)
 8000a66:	f002 f923 	bl	8002cb0 <iprintf>
		  if('z' == chUartTxData[0]){
 8000a6a:	4b31      	ldr	r3, [pc, #196]	; (8000b30 <main+0x220>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b7a      	cmp	r3, #122	; 0x7a
 8000a70:	d103      	bne.n	8000a7a <main+0x16a>
			  chUartTxData[0] = 'a';
 8000a72:	4b2f      	ldr	r3, [pc, #188]	; (8000b30 <main+0x220>)
 8000a74:	2261      	movs	r2, #97	; 0x61
 8000a76:	701a      	strb	r2, [r3, #0]
 8000a78:	e005      	b.n	8000a86 <main+0x176>
		  }else{
			  chUartTxData[0] += 1;
 8000a7a:	4b2d      	ldr	r3, [pc, #180]	; (8000b30 <main+0x220>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <main+0x220>)
 8000a84:	701a      	strb	r2, [r3, #0]

	  //----- uart tx mode ------------------------------------------------------------------------------


	  //----- uart rx mode ------------------------------------------------------------------------------
	  if(('n' == Uart_Rx_active) && (1 <= rxByte_cnt)){
 8000a86:	4b31      	ldr	r3, [pc, #196]	; (8000b4c <main+0x23c>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b6e      	cmp	r3, #110	; 0x6e
 8000a8c:	d136      	bne.n	8000afc <main+0x1ec>
 8000a8e:	4b2b      	ldr	r3, [pc, #172]	; (8000b3c <main+0x22c>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	dd32      	ble.n	8000afc <main+0x1ec>
		  for(m = 1; m <= rxByte_cnt; m++){
 8000a96:	2301      	movs	r3, #1
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	e027      	b.n	8000aec <main+0x1dc>
			  printf("-a14----rx:%c---data[%d]=0x%02x,parity=%c,stop=%c\r\n",Uart_Rx_Parity_Mode,m,rxData[m].data,rxData[m].parity,rxData[m].stop);
 8000a9c:	4b26      	ldr	r3, [pc, #152]	; (8000b38 <main+0x228>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	461c      	mov	r4, r3
 8000aa2:	4930      	ldr	r1, [pc, #192]	; (8000b64 <main+0x254>)
 8000aa4:	68fa      	ldr	r2, [r7, #12]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	4413      	add	r3, r2
 8000aac:	440b      	add	r3, r1
 8000aae:	3301      	adds	r3, #1
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	461d      	mov	r5, r3
 8000ab4:	492b      	ldr	r1, [pc, #172]	; (8000b64 <main+0x254>)
 8000ab6:	68fa      	ldr	r2, [r7, #12]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	4413      	add	r3, r2
 8000abe:	440b      	add	r3, r1
 8000ac0:	3302      	adds	r3, #2
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	4927      	ldr	r1, [pc, #156]	; (8000b64 <main+0x254>)
 8000ac8:	68fa      	ldr	r2, [r7, #12]
 8000aca:	4613      	mov	r3, r2
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	4413      	add	r3, r2
 8000ad0:	440b      	add	r3, r1
 8000ad2:	3303      	adds	r3, #3
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	9301      	str	r3, [sp, #4]
 8000ad8:	9000      	str	r0, [sp, #0]
 8000ada:	462b      	mov	r3, r5
 8000adc:	68fa      	ldr	r2, [r7, #12]
 8000ade:	4621      	mov	r1, r4
 8000ae0:	4821      	ldr	r0, [pc, #132]	; (8000b68 <main+0x258>)
 8000ae2:	f002 f8e5 	bl	8002cb0 <iprintf>
		  for(m = 1; m <= rxByte_cnt; m++){
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <main+0x22c>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	68fa      	ldr	r2, [r7, #12]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	ddd2      	ble.n	8000a9c <main+0x18c>
		  }
		  rxByte_cnt = 0;
 8000af6:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <main+0x22c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
	  }
	  //----- uart rx mode ------------------------------------------------------------------------------

	  HAL_Delay(50);
 8000afc:	2032      	movs	r0, #50	; 0x32
 8000afe:	f000 fbef 	bl	80012e0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000b02:	2120      	movs	r1, #32
 8000b04:	4806      	ldr	r0, [pc, #24]	; (8000b20 <main+0x210>)
 8000b06:	f000 fea4 	bl	8001852 <HAL_GPIO_TogglePin>
	  pa8pin = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 8000b0a:	e763      	b.n	80009d4 <main+0xc4>
 8000b0c:	08003b6c 	.word	0x08003b6c
 8000b10:	2000013a 	.word	0x2000013a
 8000b14:	20000164 	.word	0x20000164
 8000b18:	2000020c 	.word	0x2000020c
 8000b1c:	20000138 	.word	0x20000138
 8000b20:	40010800 	.word	0x40010800
 8000b24:	200001c4 	.word	0x200001c4
 8000b28:	08003b84 	.word	0x08003b84
 8000b2c:	08003ba0 	.word	0x08003ba0
 8000b30:	2000013c 	.word	0x2000013c
 8000b34:	08003bc0 	.word	0x08003bc0
 8000b38:	20000162 	.word	0x20000162
 8000b3c:	200001bc 	.word	0x200001bc
 8000b40:	2000016c 	.word	0x2000016c
 8000b44:	20000170 	.word	0x20000170
 8000b48:	20000161 	.word	0x20000161
 8000b4c:	20000163 	.word	0x20000163
 8000b50:	20000254 	.word	0x20000254
 8000b54:	20000174 	.word	0x20000174
 8000b58:	40010c00 	.word	0x40010c00
 8000b5c:	40011000 	.word	0x40011000
 8000b60:	08003bd8 	.word	0x08003bd8
 8000b64:	20000098 	.word	0x20000098
 8000b68:	08003c08 	.word	0x08003c08

08000b6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b090      	sub	sp, #64	; 0x40
 8000b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b72:	f107 0318 	add.w	r3, r7, #24
 8000b76:	2228      	movs	r2, #40	; 0x28
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f002 f890 	bl	8002ca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b92:	2301      	movs	r3, #1
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b96:	2310      	movs	r3, #16
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000ba2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba8:	f107 0318 	add.w	r3, r7, #24
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 fe8b 	bl	80018c8 <HAL_RCC_OscConfig>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000bb8:	f000 f972 	bl	8000ea0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bcc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f001 f8f6 	bl	8001dc8 <HAL_RCC_ClockConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000be2:	f000 f95d 	bl	8000ea0 <Error_Handler>
  }
}
 8000be6:	bf00      	nop
 8000be8:	3740      	adds	r7, #64	; 0x40
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bf6:	f107 0308 	add.w	r3, r7, #8
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c04:	463b      	mov	r3, r7
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c0c:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <MX_TIM2_Init+0x94>)
 8000c0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8000c14:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <MX_TIM2_Init+0x94>)
 8000c16:	223f      	movs	r2, #63	; 0x3f
 8000c18:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <MX_TIM2_Init+0x94>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 103;
 8000c20:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <MX_TIM2_Init+0x94>)
 8000c22:	2267      	movs	r2, #103	; 0x67
 8000c24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c26:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <MX_TIM2_Init+0x94>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c2c:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <MX_TIM2_Init+0x94>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c32:	4814      	ldr	r0, [pc, #80]	; (8000c84 <MX_TIM2_Init+0x94>)
 8000c34:	f001 fa64 	bl	8002100 <HAL_TIM_Base_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000c3e:	f000 f92f 	bl	8000ea0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c48:	f107 0308 	add.w	r3, r7, #8
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	480d      	ldr	r0, [pc, #52]	; (8000c84 <MX_TIM2_Init+0x94>)
 8000c50:	f001 fc00 	bl	8002454 <HAL_TIM_ConfigClockSource>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000c5a:	f000 f921 	bl	8000ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c66:	463b      	mov	r3, r7
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4806      	ldr	r0, [pc, #24]	; (8000c84 <MX_TIM2_Init+0x94>)
 8000c6c:	f001 fdc6 	bl	80027fc <HAL_TIMEx_MasterConfigSynchronization>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000c76:	f000 f913 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200001c4 	.word	0x200001c4

08000c88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c8e:	f107 0308 	add.w	r3, r7, #8
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c9c:	463b      	mov	r3, r7
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ca4:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <MX_TIM3_Init+0x90>)
 8000ca6:	4a1d      	ldr	r2, [pc, #116]	; (8000d1c <MX_TIM3_Init+0x94>)
 8000ca8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000caa:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <MX_TIM3_Init+0x90>)
 8000cac:	223f      	movs	r2, #63	; 0x3f
 8000cae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb0:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <MX_TIM3_Init+0x90>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 25;
 8000cb6:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <MX_TIM3_Init+0x90>)
 8000cb8:	2219      	movs	r2, #25
 8000cba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cbc:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <MX_TIM3_Init+0x90>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc2:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <MX_TIM3_Init+0x90>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cc8:	4813      	ldr	r0, [pc, #76]	; (8000d18 <MX_TIM3_Init+0x90>)
 8000cca:	f001 fa19 	bl	8002100 <HAL_TIM_Base_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8000cd4:	f000 f8e4 	bl	8000ea0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cdc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cde:	f107 0308 	add.w	r3, r7, #8
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	480c      	ldr	r0, [pc, #48]	; (8000d18 <MX_TIM3_Init+0x90>)
 8000ce6:	f001 fbb5 	bl	8002454 <HAL_TIM_ConfigClockSource>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8000cf0:	f000 f8d6 	bl	8000ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4805      	ldr	r0, [pc, #20]	; (8000d18 <MX_TIM3_Init+0x90>)
 8000d02:	f001 fd7b 	bl	80027fc <HAL_TIMEx_MasterConfigSynchronization>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000d0c:	f000 f8c8 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d10:	bf00      	nop
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000174 	.word	0x20000174
 8000d1c:	40000400 	.word	0x40000400

08000d20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <MX_USART2_UART_Init+0x4c>)
 8000d26:	4a12      	ldr	r2, [pc, #72]	; (8000d70 <MX_USART2_UART_Init+0x50>)
 8000d28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <MX_USART2_UART_Init+0x4c>)
 8000d2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <MX_USART2_UART_Init+0x4c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <MX_USART2_UART_Init+0x4c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <MX_USART2_UART_Init+0x4c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d44:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <MX_USART2_UART_Init+0x4c>)
 8000d46:	220c      	movs	r2, #12
 8000d48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4a:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <MX_USART2_UART_Init+0x4c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <MX_USART2_UART_Init+0x4c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d56:	4805      	ldr	r0, [pc, #20]	; (8000d6c <MX_USART2_UART_Init+0x4c>)
 8000d58:	f001 fdc0 	bl	80028dc <HAL_UART_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d62:	f000 f89d 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000210 	.word	0x20000210
 8000d70:	40004400 	.word	0x40004400

08000d74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b088      	sub	sp, #32
 8000d78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7a:	f107 0310 	add.w	r3, r7, #16
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d88:	4b40      	ldr	r3, [pc, #256]	; (8000e8c <MX_GPIO_Init+0x118>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	4a3f      	ldr	r2, [pc, #252]	; (8000e8c <MX_GPIO_Init+0x118>)
 8000d8e:	f043 0310 	orr.w	r3, r3, #16
 8000d92:	6193      	str	r3, [r2, #24]
 8000d94:	4b3d      	ldr	r3, [pc, #244]	; (8000e8c <MX_GPIO_Init+0x118>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	f003 0310 	and.w	r3, r3, #16
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000da0:	4b3a      	ldr	r3, [pc, #232]	; (8000e8c <MX_GPIO_Init+0x118>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a39      	ldr	r2, [pc, #228]	; (8000e8c <MX_GPIO_Init+0x118>)
 8000da6:	f043 0320 	orr.w	r3, r3, #32
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b37      	ldr	r3, [pc, #220]	; (8000e8c <MX_GPIO_Init+0x118>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0320 	and.w	r3, r3, #32
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db8:	4b34      	ldr	r3, [pc, #208]	; (8000e8c <MX_GPIO_Init+0x118>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	4a33      	ldr	r2, [pc, #204]	; (8000e8c <MX_GPIO_Init+0x118>)
 8000dbe:	f043 0304 	orr.w	r3, r3, #4
 8000dc2:	6193      	str	r3, [r2, #24]
 8000dc4:	4b31      	ldr	r3, [pc, #196]	; (8000e8c <MX_GPIO_Init+0x118>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	f003 0304 	and.w	r3, r3, #4
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd0:	4b2e      	ldr	r3, [pc, #184]	; (8000e8c <MX_GPIO_Init+0x118>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	4a2d      	ldr	r2, [pc, #180]	; (8000e8c <MX_GPIO_Init+0x118>)
 8000dd6:	f043 0308 	orr.w	r3, r3, #8
 8000dda:	6193      	str	r3, [r2, #24]
 8000ddc:	4b2b      	ldr	r3, [pc, #172]	; (8000e8c <MX_GPIO_Init+0x118>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	f003 0308 	and.w	r3, r3, #8
 8000de4:	603b      	str	r3, [r7, #0]
 8000de6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin, GPIO_PIN_RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2121      	movs	r1, #33	; 0x21
 8000dec:	4828      	ldr	r0, [pc, #160]	; (8000e90 <MX_GPIO_Init+0x11c>)
 8000dee:	f000 fd18 	bl	8001822 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000df2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000df8:	4b26      	ldr	r3, [pc, #152]	; (8000e94 <MX_GPIO_Init+0x120>)
 8000dfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	4619      	mov	r1, r3
 8000e06:	4824      	ldr	r0, [pc, #144]	; (8000e98 <MX_GPIO_Init+0x124>)
 8000e08:	f000 fb9a 	bl	8001540 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e18:	f107 0310 	add.w	r3, r7, #16
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	481e      	ldr	r0, [pc, #120]	; (8000e98 <MX_GPIO_Init+0x124>)
 8000e20:	f000 fb8e 	bl	8001540 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin;
 8000e24:	2321      	movs	r3, #33	; 0x21
 8000e26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2302      	movs	r3, #2
 8000e32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4815      	ldr	r0, [pc, #84]	; (8000e90 <MX_GPIO_Init+0x11c>)
 8000e3c:	f000 fb80 	bl	8001540 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4e:	f107 0310 	add.w	r3, r7, #16
 8000e52:	4619      	mov	r1, r3
 8000e54:	480e      	ldr	r0, [pc, #56]	; (8000e90 <MX_GPIO_Init+0x11c>)
 8000e56:	f000 fb73 	bl	8001540 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e68:	f107 0310 	add.w	r3, r7, #16
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	480b      	ldr	r0, [pc, #44]	; (8000e9c <MX_GPIO_Init+0x128>)
 8000e70:	f000 fb66 	bl	8001540 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2100      	movs	r1, #0
 8000e78:	2028      	movs	r0, #40	; 0x28
 8000e7a:	f000 fb2a 	bl	80014d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e7e:	2028      	movs	r0, #40	; 0x28
 8000e80:	f000 fb43 	bl	800150a <HAL_NVIC_EnableIRQ>

}
 8000e84:	bf00      	nop
 8000e86:	3720      	adds	r7, #32
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40010800 	.word	0x40010800
 8000e94:	10110000 	.word	0x10110000
 8000e98:	40011000 	.word	0x40011000
 8000e9c:	40010c00 	.word	0x40010c00

08000ea0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr

08000eac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <HAL_MspInit+0x5c>)
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	4a14      	ldr	r2, [pc, #80]	; (8000f08 <HAL_MspInit+0x5c>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6193      	str	r3, [r2, #24]
 8000ebe:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_MspInit+0x5c>)
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eca:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <HAL_MspInit+0x5c>)
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <HAL_MspInit+0x5c>)
 8000ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed4:	61d3      	str	r3, [r2, #28]
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <HAL_MspInit+0x5c>)
 8000ed8:	69db      	ldr	r3, [r3, #28]
 8000eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <HAL_MspInit+0x60>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <HAL_MspInit+0x60>)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efe:	bf00      	nop
 8000f00:	3714      	adds	r7, #20
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	40010000 	.word	0x40010000

08000f10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f20:	d114      	bne.n	8000f4c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f22:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <HAL_TIM_Base_MspInit+0x78>)
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	4a18      	ldr	r2, [pc, #96]	; (8000f88 <HAL_TIM_Base_MspInit+0x78>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	61d3      	str	r3, [r2, #28]
 8000f2e:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <HAL_TIM_Base_MspInit+0x78>)
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	201c      	movs	r0, #28
 8000f40:	f000 fac7 	bl	80014d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f44:	201c      	movs	r0, #28
 8000f46:	f000 fae0 	bl	800150a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f4a:	e018      	b.n	8000f7e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <HAL_TIM_Base_MspInit+0x7c>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d113      	bne.n	8000f7e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <HAL_TIM_Base_MspInit+0x78>)
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <HAL_TIM_Base_MspInit+0x78>)
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	61d3      	str	r3, [r2, #28]
 8000f62:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <HAL_TIM_Base_MspInit+0x78>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2100      	movs	r1, #0
 8000f72:	201d      	movs	r0, #29
 8000f74:	f000 faad 	bl	80014d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f78:	201d      	movs	r0, #29
 8000f7a:	f000 fac6 	bl	800150a <HAL_NVIC_EnableIRQ>
}
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	40000400 	.word	0x40000400

08000f90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 0310 	add.w	r3, r7, #16
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a15      	ldr	r2, [pc, #84]	; (8001000 <HAL_UART_MspInit+0x70>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d123      	bne.n	8000ff8 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fb0:	4b14      	ldr	r3, [pc, #80]	; (8001004 <HAL_UART_MspInit+0x74>)
 8000fb2:	69db      	ldr	r3, [r3, #28]
 8000fb4:	4a13      	ldr	r2, [pc, #76]	; (8001004 <HAL_UART_MspInit+0x74>)
 8000fb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fba:	61d3      	str	r3, [r2, #28]
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <HAL_UART_MspInit+0x74>)
 8000fbe:	69db      	ldr	r3, [r3, #28]
 8000fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <HAL_UART_MspInit+0x74>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	4a0d      	ldr	r2, [pc, #52]	; (8001004 <HAL_UART_MspInit+0x74>)
 8000fce:	f043 0304 	orr.w	r3, r3, #4
 8000fd2:	6193      	str	r3, [r2, #24]
 8000fd4:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <HAL_UART_MspInit+0x74>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	f003 0304 	and.w	r3, r3, #4
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fe0:	230c      	movs	r3, #12
 8000fe2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <HAL_UART_MspInit+0x78>)
 8000ff4:	f000 faa4 	bl	8001540 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ff8:	bf00      	nop
 8000ffa:	3720      	adds	r7, #32
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40004400 	.word	0x40004400
 8001004:	40021000 	.word	0x40021000
 8001008:	40010800 	.word	0x40010800

0800100c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800101c:	e7fe      	b.n	800101c <HardFault_Handler+0x4>

0800101e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001022:	e7fe      	b.n	8001022 <MemManage_Handler+0x4>

08001024 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001028:	e7fe      	b.n	8001028 <BusFault_Handler+0x4>

0800102a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800102e:	e7fe      	b.n	800102e <UsageFault_Handler+0x4>

08001030 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr

0800103c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr

08001048 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001058:	f000 f926 	bl	80012a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}

08001060 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001064:	4802      	ldr	r0, [pc, #8]	; (8001070 <TIM2_IRQHandler+0x10>)
 8001066:	f001 f8ed 	bl	8002244 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200001c4 	.word	0x200001c4

08001074 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001078:	4802      	ldr	r0, [pc, #8]	; (8001084 <TIM3_IRQHandler+0x10>)
 800107a:	f001 f8e3 	bl	8002244 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000174 	.word	0x20000174

08001088 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800108c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001090:	f000 fbf8 	bl	8001884 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}

08001098 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	e00a      	b.n	80010c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010aa:	f3af 8000 	nop.w
 80010ae:	4601      	mov	r1, r0
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	1c5a      	adds	r2, r3, #1
 80010b4:	60ba      	str	r2, [r7, #8]
 80010b6:	b2ca      	uxtb	r2, r1
 80010b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	3301      	adds	r3, #1
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	697a      	ldr	r2, [r7, #20]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	dbf0      	blt.n	80010aa <_read+0x12>
	}

return len;
 80010c8:	687b      	ldr	r3, [r7, #4]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b086      	sub	sp, #24
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	60f8      	str	r0, [r7, #12]
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	e009      	b.n	80010f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	1c5a      	adds	r2, r3, #1
 80010e8:	60ba      	str	r2, [r7, #8]
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff f82d 	bl	800014c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	3301      	adds	r3, #1
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	697a      	ldr	r2, [r7, #20]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	dbf1      	blt.n	80010e4 <_write+0x12>
	}
	return len;
 8001100:	687b      	ldr	r3, [r7, #4]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <_close>:

int _close(int file)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
	return -1;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001116:	4618      	mov	r0, r3
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr

08001120 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001130:	605a      	str	r2, [r3, #4]
	return 0;
 8001132:	2300      	movs	r3, #0
}
 8001134:	4618      	mov	r0, r3
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr

0800113e <_isatty>:

int _isatty(int file)
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
	return 1;
 8001146:	2301      	movs	r3, #1
}
 8001148:	4618      	mov	r0, r3
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr

08001152 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001152:	b480      	push	{r7}
 8001154:	b085      	sub	sp, #20
 8001156:	af00      	add	r7, sp, #0
 8001158:	60f8      	str	r0, [r7, #12]
 800115a:	60b9      	str	r1, [r7, #8]
 800115c:	607a      	str	r2, [r7, #4]
	return 0;
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr
	...

0800116c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001174:	4b11      	ldr	r3, [pc, #68]	; (80011bc <_sbrk+0x50>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d102      	bne.n	8001182 <_sbrk+0x16>
		heap_end = &end;
 800117c:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <_sbrk+0x50>)
 800117e:	4a10      	ldr	r2, [pc, #64]	; (80011c0 <_sbrk+0x54>)
 8001180:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <_sbrk+0x50>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <_sbrk+0x50>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4413      	add	r3, r2
 8001190:	466a      	mov	r2, sp
 8001192:	4293      	cmp	r3, r2
 8001194:	d907      	bls.n	80011a6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001196:	f001 fd59 	bl	8002c4c <__errno>
 800119a:	4602      	mov	r2, r0
 800119c:	230c      	movs	r3, #12
 800119e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80011a0:	f04f 33ff 	mov.w	r3, #4294967295
 80011a4:	e006      	b.n	80011b4 <_sbrk+0x48>
	}

	heap_end += incr;
 80011a6:	4b05      	ldr	r3, [pc, #20]	; (80011bc <_sbrk+0x50>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	4a03      	ldr	r2, [pc, #12]	; (80011bc <_sbrk+0x50>)
 80011b0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80011b2:	68fb      	ldr	r3, [r7, #12]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	2000008c 	.word	0x2000008c
 80011c0:	20000268 	.word	0x20000268

080011c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr

080011d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011d0:	480c      	ldr	r0, [pc, #48]	; (8001204 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011d2:	490d      	ldr	r1, [pc, #52]	; (8001208 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011d4:	4a0d      	ldr	r2, [pc, #52]	; (800120c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d8:	e002      	b.n	80011e0 <LoopCopyDataInit>

080011da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011de:	3304      	adds	r3, #4

080011e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e4:	d3f9      	bcc.n	80011da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e6:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011e8:	4c0a      	ldr	r4, [pc, #40]	; (8001214 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011ec:	e001      	b.n	80011f2 <LoopFillZerobss>

080011ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f0:	3204      	adds	r2, #4

080011f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f4:	d3fb      	bcc.n	80011ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011f6:	f7ff ffe5 	bl	80011c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011fa:	f001 fd2d 	bl	8002c58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011fe:	f7ff fb87 	bl	8000910 <main>
  bx lr
 8001202:	4770      	bx	lr
  ldr r0, =_sdata
 8001204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001208:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800120c:	08003d08 	.word	0x08003d08
  ldr r2, =_sbss
 8001210:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001214:	20000264 	.word	0x20000264

08001218 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001218:	e7fe      	b.n	8001218 <ADC1_2_IRQHandler>
	...

0800121c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <HAL_Init+0x28>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a07      	ldr	r2, [pc, #28]	; (8001244 <HAL_Init+0x28>)
 8001226:	f043 0310 	orr.w	r3, r3, #16
 800122a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800122c:	2003      	movs	r0, #3
 800122e:	f000 f945 	bl	80014bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001232:	2000      	movs	r0, #0
 8001234:	f000 f808 	bl	8001248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001238:	f7ff fe38 	bl	8000eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40022000 	.word	0x40022000

08001248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_InitTick+0x54>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <HAL_InitTick+0x58>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4619      	mov	r1, r3
 800125a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001262:	fbb2 f3f3 	udiv	r3, r2, r3
 8001266:	4618      	mov	r0, r3
 8001268:	f000 f95d 	bl	8001526 <HAL_SYSTICK_Config>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e00e      	b.n	8001294 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b0f      	cmp	r3, #15
 800127a:	d80a      	bhi.n	8001292 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800127c:	2200      	movs	r2, #0
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	f04f 30ff 	mov.w	r0, #4294967295
 8001284:	f000 f925 	bl	80014d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001288:	4a06      	ldr	r2, [pc, #24]	; (80012a4 <HAL_InitTick+0x5c>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800128e:	2300      	movs	r3, #0
 8001290:	e000      	b.n	8001294 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
}
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000000 	.word	0x20000000
 80012a0:	20000008 	.word	0x20000008
 80012a4:	20000004 	.word	0x20000004

080012a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012ac:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <HAL_IncTick+0x1c>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <HAL_IncTick+0x20>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4413      	add	r3, r2
 80012b8:	4a03      	ldr	r2, [pc, #12]	; (80012c8 <HAL_IncTick+0x20>)
 80012ba:	6013      	str	r3, [r2, #0]
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr
 80012c4:	20000008 	.word	0x20000008
 80012c8:	2000025c 	.word	0x2000025c

080012cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return uwTick;
 80012d0:	4b02      	ldr	r3, [pc, #8]	; (80012dc <HAL_GetTick+0x10>)
 80012d2:	681b      	ldr	r3, [r3, #0]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	2000025c 	.word	0x2000025c

080012e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e8:	f7ff fff0 	bl	80012cc <HAL_GetTick>
 80012ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f8:	d005      	beq.n	8001306 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012fa:	4b09      	ldr	r3, [pc, #36]	; (8001320 <HAL_Delay+0x40>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	461a      	mov	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4413      	add	r3, r2
 8001304:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001306:	bf00      	nop
 8001308:	f7ff ffe0 	bl	80012cc <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	429a      	cmp	r2, r3
 8001316:	d8f7      	bhi.n	8001308 <HAL_Delay+0x28>
  {
  }
}
 8001318:	bf00      	nop
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000008 	.word	0x20000008

08001324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001340:	4013      	ands	r3, r2
 8001342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800134c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001356:	4a04      	ldr	r2, [pc, #16]	; (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	60d3      	str	r3, [r2, #12]
}
 800135c:	bf00      	nop
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <__NVIC_GetPriorityGrouping+0x18>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	0a1b      	lsrs	r3, r3, #8
 8001376:	f003 0307 	and.w	r3, r3, #7
}
 800137a:	4618      	mov	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	2b00      	cmp	r3, #0
 8001398:	db0b      	blt.n	80013b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	f003 021f 	and.w	r2, r3, #31
 80013a0:	4906      	ldr	r1, [pc, #24]	; (80013bc <__NVIC_EnableIRQ+0x34>)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	095b      	lsrs	r3, r3, #5
 80013a8:	2001      	movs	r0, #1
 80013aa:	fa00 f202 	lsl.w	r2, r0, r2
 80013ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	e000e100 	.word	0xe000e100

080013c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	6039      	str	r1, [r7, #0]
 80013ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	db0a      	blt.n	80013ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	490c      	ldr	r1, [pc, #48]	; (800140c <__NVIC_SetPriority+0x4c>)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	0112      	lsls	r2, r2, #4
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	440b      	add	r3, r1
 80013e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e8:	e00a      	b.n	8001400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4908      	ldr	r1, [pc, #32]	; (8001410 <__NVIC_SetPriority+0x50>)
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	3b04      	subs	r3, #4
 80013f8:	0112      	lsls	r2, r2, #4
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	440b      	add	r3, r1
 80013fe:	761a      	strb	r2, [r3, #24]
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000e100 	.word	0xe000e100
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001414:	b480      	push	{r7}
 8001416:	b089      	sub	sp, #36	; 0x24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f1c3 0307 	rsb	r3, r3, #7
 800142e:	2b04      	cmp	r3, #4
 8001430:	bf28      	it	cs
 8001432:	2304      	movcs	r3, #4
 8001434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3304      	adds	r3, #4
 800143a:	2b06      	cmp	r3, #6
 800143c:	d902      	bls.n	8001444 <NVIC_EncodePriority+0x30>
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3b03      	subs	r3, #3
 8001442:	e000      	b.n	8001446 <NVIC_EncodePriority+0x32>
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001448:	f04f 32ff 	mov.w	r2, #4294967295
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43da      	mvns	r2, r3
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	401a      	ands	r2, r3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800145c:	f04f 31ff 	mov.w	r1, #4294967295
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	fa01 f303 	lsl.w	r3, r1, r3
 8001466:	43d9      	mvns	r1, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	4313      	orrs	r3, r2
         );
}
 800146e:	4618      	mov	r0, r3
 8001470:	3724      	adds	r7, #36	; 0x24
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001488:	d301      	bcc.n	800148e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800148a:	2301      	movs	r3, #1
 800148c:	e00f      	b.n	80014ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148e:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <SysTick_Config+0x40>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001496:	210f      	movs	r1, #15
 8001498:	f04f 30ff 	mov.w	r0, #4294967295
 800149c:	f7ff ff90 	bl	80013c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a0:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <SysTick_Config+0x40>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a6:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <SysTick_Config+0x40>)
 80014a8:	2207      	movs	r2, #7
 80014aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	e000e010 	.word	0xe000e010

080014bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ff2d 	bl	8001324 <__NVIC_SetPriorityGrouping>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b086      	sub	sp, #24
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
 80014de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e4:	f7ff ff42 	bl	800136c <__NVIC_GetPriorityGrouping>
 80014e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	68b9      	ldr	r1, [r7, #8]
 80014ee:	6978      	ldr	r0, [r7, #20]
 80014f0:	f7ff ff90 	bl	8001414 <NVIC_EncodePriority>
 80014f4:	4602      	mov	r2, r0
 80014f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fa:	4611      	mov	r1, r2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff5f 	bl	80013c0 <__NVIC_SetPriority>
}
 8001502:	bf00      	nop
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	4603      	mov	r3, r0
 8001512:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff35 	bl	8001388 <__NVIC_EnableIRQ>
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff ffa2 	bl	8001478 <SysTick_Config>
 8001534:	4603      	mov	r3, r0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001540:	b480      	push	{r7}
 8001542:	b08b      	sub	sp, #44	; 0x2c
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800154a:	2300      	movs	r3, #0
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800154e:	2300      	movs	r3, #0
 8001550:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001552:	e127      	b.n	80017a4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001554:	2201      	movs	r2, #1
 8001556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	69fa      	ldr	r2, [r7, #28]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	429a      	cmp	r2, r3
 800156e:	f040 8116 	bne.w	800179e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b12      	cmp	r3, #18
 8001578:	d034      	beq.n	80015e4 <HAL_GPIO_Init+0xa4>
 800157a:	2b12      	cmp	r3, #18
 800157c:	d80d      	bhi.n	800159a <HAL_GPIO_Init+0x5a>
 800157e:	2b02      	cmp	r3, #2
 8001580:	d02b      	beq.n	80015da <HAL_GPIO_Init+0x9a>
 8001582:	2b02      	cmp	r3, #2
 8001584:	d804      	bhi.n	8001590 <HAL_GPIO_Init+0x50>
 8001586:	2b00      	cmp	r3, #0
 8001588:	d031      	beq.n	80015ee <HAL_GPIO_Init+0xae>
 800158a:	2b01      	cmp	r3, #1
 800158c:	d01c      	beq.n	80015c8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800158e:	e048      	b.n	8001622 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001590:	2b03      	cmp	r3, #3
 8001592:	d043      	beq.n	800161c <HAL_GPIO_Init+0xdc>
 8001594:	2b11      	cmp	r3, #17
 8001596:	d01b      	beq.n	80015d0 <HAL_GPIO_Init+0x90>
          break;
 8001598:	e043      	b.n	8001622 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800159a:	4a89      	ldr	r2, [pc, #548]	; (80017c0 <HAL_GPIO_Init+0x280>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d026      	beq.n	80015ee <HAL_GPIO_Init+0xae>
 80015a0:	4a87      	ldr	r2, [pc, #540]	; (80017c0 <HAL_GPIO_Init+0x280>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d806      	bhi.n	80015b4 <HAL_GPIO_Init+0x74>
 80015a6:	4a87      	ldr	r2, [pc, #540]	; (80017c4 <HAL_GPIO_Init+0x284>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d020      	beq.n	80015ee <HAL_GPIO_Init+0xae>
 80015ac:	4a86      	ldr	r2, [pc, #536]	; (80017c8 <HAL_GPIO_Init+0x288>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d01d      	beq.n	80015ee <HAL_GPIO_Init+0xae>
          break;
 80015b2:	e036      	b.n	8001622 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80015b4:	4a85      	ldr	r2, [pc, #532]	; (80017cc <HAL_GPIO_Init+0x28c>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d019      	beq.n	80015ee <HAL_GPIO_Init+0xae>
 80015ba:	4a85      	ldr	r2, [pc, #532]	; (80017d0 <HAL_GPIO_Init+0x290>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d016      	beq.n	80015ee <HAL_GPIO_Init+0xae>
 80015c0:	4a84      	ldr	r2, [pc, #528]	; (80017d4 <HAL_GPIO_Init+0x294>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d013      	beq.n	80015ee <HAL_GPIO_Init+0xae>
          break;
 80015c6:	e02c      	b.n	8001622 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	623b      	str	r3, [r7, #32]
          break;
 80015ce:	e028      	b.n	8001622 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	3304      	adds	r3, #4
 80015d6:	623b      	str	r3, [r7, #32]
          break;
 80015d8:	e023      	b.n	8001622 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	3308      	adds	r3, #8
 80015e0:	623b      	str	r3, [r7, #32]
          break;
 80015e2:	e01e      	b.n	8001622 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	330c      	adds	r3, #12
 80015ea:	623b      	str	r3, [r7, #32]
          break;
 80015ec:	e019      	b.n	8001622 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d102      	bne.n	80015fc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015f6:	2304      	movs	r3, #4
 80015f8:	623b      	str	r3, [r7, #32]
          break;
 80015fa:	e012      	b.n	8001622 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d105      	bne.n	8001610 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001604:	2308      	movs	r3, #8
 8001606:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69fa      	ldr	r2, [r7, #28]
 800160c:	611a      	str	r2, [r3, #16]
          break;
 800160e:	e008      	b.n	8001622 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001610:	2308      	movs	r3, #8
 8001612:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	69fa      	ldr	r2, [r7, #28]
 8001618:	615a      	str	r2, [r3, #20]
          break;
 800161a:	e002      	b.n	8001622 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800161c:	2300      	movs	r3, #0
 800161e:	623b      	str	r3, [r7, #32]
          break;
 8001620:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	2bff      	cmp	r3, #255	; 0xff
 8001626:	d801      	bhi.n	800162c <HAL_GPIO_Init+0xec>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	e001      	b.n	8001630 <HAL_GPIO_Init+0xf0>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3304      	adds	r3, #4
 8001630:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	2bff      	cmp	r3, #255	; 0xff
 8001636:	d802      	bhi.n	800163e <HAL_GPIO_Init+0xfe>
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	e002      	b.n	8001644 <HAL_GPIO_Init+0x104>
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	3b08      	subs	r3, #8
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	210f      	movs	r1, #15
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	fa01 f303 	lsl.w	r3, r1, r3
 8001652:	43db      	mvns	r3, r3
 8001654:	401a      	ands	r2, r3
 8001656:	6a39      	ldr	r1, [r7, #32]
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	fa01 f303 	lsl.w	r3, r1, r3
 800165e:	431a      	orrs	r2, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 8096 	beq.w	800179e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001672:	4b59      	ldr	r3, [pc, #356]	; (80017d8 <HAL_GPIO_Init+0x298>)
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	4a58      	ldr	r2, [pc, #352]	; (80017d8 <HAL_GPIO_Init+0x298>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6193      	str	r3, [r2, #24]
 800167e:	4b56      	ldr	r3, [pc, #344]	; (80017d8 <HAL_GPIO_Init+0x298>)
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800168a:	4a54      	ldr	r2, [pc, #336]	; (80017dc <HAL_GPIO_Init+0x29c>)
 800168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168e:	089b      	lsrs	r3, r3, #2
 8001690:	3302      	adds	r3, #2
 8001692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001696:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	f003 0303 	and.w	r3, r3, #3
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	220f      	movs	r2, #15
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43db      	mvns	r3, r3
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	4013      	ands	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a4b      	ldr	r2, [pc, #300]	; (80017e0 <HAL_GPIO_Init+0x2a0>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d013      	beq.n	80016de <HAL_GPIO_Init+0x19e>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a4a      	ldr	r2, [pc, #296]	; (80017e4 <HAL_GPIO_Init+0x2a4>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d00d      	beq.n	80016da <HAL_GPIO_Init+0x19a>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a49      	ldr	r2, [pc, #292]	; (80017e8 <HAL_GPIO_Init+0x2a8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d007      	beq.n	80016d6 <HAL_GPIO_Init+0x196>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a48      	ldr	r2, [pc, #288]	; (80017ec <HAL_GPIO_Init+0x2ac>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d101      	bne.n	80016d2 <HAL_GPIO_Init+0x192>
 80016ce:	2303      	movs	r3, #3
 80016d0:	e006      	b.n	80016e0 <HAL_GPIO_Init+0x1a0>
 80016d2:	2304      	movs	r3, #4
 80016d4:	e004      	b.n	80016e0 <HAL_GPIO_Init+0x1a0>
 80016d6:	2302      	movs	r3, #2
 80016d8:	e002      	b.n	80016e0 <HAL_GPIO_Init+0x1a0>
 80016da:	2301      	movs	r3, #1
 80016dc:	e000      	b.n	80016e0 <HAL_GPIO_Init+0x1a0>
 80016de:	2300      	movs	r3, #0
 80016e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016e2:	f002 0203 	and.w	r2, r2, #3
 80016e6:	0092      	lsls	r2, r2, #2
 80016e8:	4093      	lsls	r3, r2
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016f0:	493a      	ldr	r1, [pc, #232]	; (80017dc <HAL_GPIO_Init+0x29c>)
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	089b      	lsrs	r3, r3, #2
 80016f6:	3302      	adds	r3, #2
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d006      	beq.n	8001718 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800170a:	4b39      	ldr	r3, [pc, #228]	; (80017f0 <HAL_GPIO_Init+0x2b0>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	4938      	ldr	r1, [pc, #224]	; (80017f0 <HAL_GPIO_Init+0x2b0>)
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	4313      	orrs	r3, r2
 8001714:	600b      	str	r3, [r1, #0]
 8001716:	e006      	b.n	8001726 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001718:	4b35      	ldr	r3, [pc, #212]	; (80017f0 <HAL_GPIO_Init+0x2b0>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	43db      	mvns	r3, r3
 8001720:	4933      	ldr	r1, [pc, #204]	; (80017f0 <HAL_GPIO_Init+0x2b0>)
 8001722:	4013      	ands	r3, r2
 8001724:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d006      	beq.n	8001740 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001732:	4b2f      	ldr	r3, [pc, #188]	; (80017f0 <HAL_GPIO_Init+0x2b0>)
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	492e      	ldr	r1, [pc, #184]	; (80017f0 <HAL_GPIO_Init+0x2b0>)
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	4313      	orrs	r3, r2
 800173c:	604b      	str	r3, [r1, #4]
 800173e:	e006      	b.n	800174e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001740:	4b2b      	ldr	r3, [pc, #172]	; (80017f0 <HAL_GPIO_Init+0x2b0>)
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	43db      	mvns	r3, r3
 8001748:	4929      	ldr	r1, [pc, #164]	; (80017f0 <HAL_GPIO_Init+0x2b0>)
 800174a:	4013      	ands	r3, r2
 800174c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d006      	beq.n	8001768 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800175a:	4b25      	ldr	r3, [pc, #148]	; (80017f0 <HAL_GPIO_Init+0x2b0>)
 800175c:	689a      	ldr	r2, [r3, #8]
 800175e:	4924      	ldr	r1, [pc, #144]	; (80017f0 <HAL_GPIO_Init+0x2b0>)
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	4313      	orrs	r3, r2
 8001764:	608b      	str	r3, [r1, #8]
 8001766:	e006      	b.n	8001776 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001768:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <HAL_GPIO_Init+0x2b0>)
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	43db      	mvns	r3, r3
 8001770:	491f      	ldr	r1, [pc, #124]	; (80017f0 <HAL_GPIO_Init+0x2b0>)
 8001772:	4013      	ands	r3, r2
 8001774:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d006      	beq.n	8001790 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001782:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <HAL_GPIO_Init+0x2b0>)
 8001784:	68da      	ldr	r2, [r3, #12]
 8001786:	491a      	ldr	r1, [pc, #104]	; (80017f0 <HAL_GPIO_Init+0x2b0>)
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	4313      	orrs	r3, r2
 800178c:	60cb      	str	r3, [r1, #12]
 800178e:	e006      	b.n	800179e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001790:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <HAL_GPIO_Init+0x2b0>)
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	43db      	mvns	r3, r3
 8001798:	4915      	ldr	r1, [pc, #84]	; (80017f0 <HAL_GPIO_Init+0x2b0>)
 800179a:	4013      	ands	r3, r2
 800179c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	3301      	adds	r3, #1
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	fa22 f303 	lsr.w	r3, r2, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f47f aed0 	bne.w	8001554 <HAL_GPIO_Init+0x14>
  }
}
 80017b4:	bf00      	nop
 80017b6:	372c      	adds	r7, #44	; 0x2c
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	10210000 	.word	0x10210000
 80017c4:	10110000 	.word	0x10110000
 80017c8:	10120000 	.word	0x10120000
 80017cc:	10310000 	.word	0x10310000
 80017d0:	10320000 	.word	0x10320000
 80017d4:	10220000 	.word	0x10220000
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40010000 	.word	0x40010000
 80017e0:	40010800 	.word	0x40010800
 80017e4:	40010c00 	.word	0x40010c00
 80017e8:	40011000 	.word	0x40011000
 80017ec:	40011400 	.word	0x40011400
 80017f0:	40010400 	.word	0x40010400

080017f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	887b      	ldrh	r3, [r7, #2]
 8001806:	4013      	ands	r3, r2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d002      	beq.n	8001812 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800180c:	2301      	movs	r3, #1
 800180e:	73fb      	strb	r3, [r7, #15]
 8001810:	e001      	b.n	8001816 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001812:	2300      	movs	r3, #0
 8001814:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001816:	7bfb      	ldrb	r3, [r7, #15]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr

08001822 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
 800182a:	460b      	mov	r3, r1
 800182c:	807b      	strh	r3, [r7, #2]
 800182e:	4613      	mov	r3, r2
 8001830:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001832:	787b      	ldrb	r3, [r7, #1]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001838:	887a      	ldrh	r2, [r7, #2]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800183e:	e003      	b.n	8001848 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001840:	887b      	ldrh	r3, [r7, #2]
 8001842:	041a      	lsls	r2, r3, #16
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	611a      	str	r2, [r3, #16]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr

08001852 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001852:	b480      	push	{r7}
 8001854:	b085      	sub	sp, #20
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
 800185a:	460b      	mov	r3, r1
 800185c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001864:	887a      	ldrh	r2, [r7, #2]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	4013      	ands	r3, r2
 800186a:	041a      	lsls	r2, r3, #16
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	43d9      	mvns	r1, r3
 8001870:	887b      	ldrh	r3, [r7, #2]
 8001872:	400b      	ands	r3, r1
 8001874:	431a      	orrs	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	611a      	str	r2, [r3, #16]
}
 800187a:	bf00      	nop
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr

08001884 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800188e:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001890:	695a      	ldr	r2, [r3, #20]
 8001892:	88fb      	ldrh	r3, [r7, #6]
 8001894:	4013      	ands	r3, r2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d006      	beq.n	80018a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800189a:	4a05      	ldr	r2, [pc, #20]	; (80018b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800189c:	88fb      	ldrh	r3, [r7, #6]
 800189e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018a0:	88fb      	ldrh	r3, [r7, #6]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 f806 	bl	80018b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40010400 	.word	0x40010400

080018b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e26c      	b.n	8001db4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 8087 	beq.w	80019f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018e8:	4b92      	ldr	r3, [pc, #584]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f003 030c 	and.w	r3, r3, #12
 80018f0:	2b04      	cmp	r3, #4
 80018f2:	d00c      	beq.n	800190e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018f4:	4b8f      	ldr	r3, [pc, #572]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 030c 	and.w	r3, r3, #12
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	d112      	bne.n	8001926 <HAL_RCC_OscConfig+0x5e>
 8001900:	4b8c      	ldr	r3, [pc, #560]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800190c:	d10b      	bne.n	8001926 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800190e:	4b89      	ldr	r3, [pc, #548]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d06c      	beq.n	80019f4 <HAL_RCC_OscConfig+0x12c>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d168      	bne.n	80019f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e246      	b.n	8001db4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800192e:	d106      	bne.n	800193e <HAL_RCC_OscConfig+0x76>
 8001930:	4b80      	ldr	r3, [pc, #512]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a7f      	ldr	r2, [pc, #508]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001936:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	e02e      	b.n	800199c <HAL_RCC_OscConfig+0xd4>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d10c      	bne.n	8001960 <HAL_RCC_OscConfig+0x98>
 8001946:	4b7b      	ldr	r3, [pc, #492]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a7a      	ldr	r2, [pc, #488]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 800194c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	4b78      	ldr	r3, [pc, #480]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a77      	ldr	r2, [pc, #476]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001958:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800195c:	6013      	str	r3, [r2, #0]
 800195e:	e01d      	b.n	800199c <HAL_RCC_OscConfig+0xd4>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001968:	d10c      	bne.n	8001984 <HAL_RCC_OscConfig+0xbc>
 800196a:	4b72      	ldr	r3, [pc, #456]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a71      	ldr	r2, [pc, #452]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	4b6f      	ldr	r3, [pc, #444]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a6e      	ldr	r2, [pc, #440]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 800197c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	e00b      	b.n	800199c <HAL_RCC_OscConfig+0xd4>
 8001984:	4b6b      	ldr	r3, [pc, #428]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a6a      	ldr	r2, [pc, #424]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 800198a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800198e:	6013      	str	r3, [r2, #0]
 8001990:	4b68      	ldr	r3, [pc, #416]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a67      	ldr	r2, [pc, #412]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800199a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d013      	beq.n	80019cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a4:	f7ff fc92 	bl	80012cc <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019ac:	f7ff fc8e 	bl	80012cc <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b64      	cmp	r3, #100	; 0x64
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e1fa      	b.n	8001db4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019be:	4b5d      	ldr	r3, [pc, #372]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d0f0      	beq.n	80019ac <HAL_RCC_OscConfig+0xe4>
 80019ca:	e014      	b.n	80019f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019cc:	f7ff fc7e 	bl	80012cc <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d4:	f7ff fc7a 	bl	80012cc <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b64      	cmp	r3, #100	; 0x64
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e1e6      	b.n	8001db4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019e6:	4b53      	ldr	r3, [pc, #332]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f0      	bne.n	80019d4 <HAL_RCC_OscConfig+0x10c>
 80019f2:	e000      	b.n	80019f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d063      	beq.n	8001aca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a02:	4b4c      	ldr	r3, [pc, #304]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f003 030c 	and.w	r3, r3, #12
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00b      	beq.n	8001a26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a0e:	4b49      	ldr	r3, [pc, #292]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 030c 	and.w	r3, r3, #12
 8001a16:	2b08      	cmp	r3, #8
 8001a18:	d11c      	bne.n	8001a54 <HAL_RCC_OscConfig+0x18c>
 8001a1a:	4b46      	ldr	r3, [pc, #280]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d116      	bne.n	8001a54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a26:	4b43      	ldr	r3, [pc, #268]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d005      	beq.n	8001a3e <HAL_RCC_OscConfig+0x176>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d001      	beq.n	8001a3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e1ba      	b.n	8001db4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a3e:	4b3d      	ldr	r3, [pc, #244]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	4939      	ldr	r1, [pc, #228]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a52:	e03a      	b.n	8001aca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d020      	beq.n	8001a9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a5c:	4b36      	ldr	r3, [pc, #216]	; (8001b38 <HAL_RCC_OscConfig+0x270>)
 8001a5e:	2201      	movs	r2, #1
 8001a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a62:	f7ff fc33 	bl	80012cc <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a6a:	f7ff fc2f 	bl	80012cc <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e19b      	b.n	8001db4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7c:	4b2d      	ldr	r3, [pc, #180]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0f0      	beq.n	8001a6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a88:	4b2a      	ldr	r3, [pc, #168]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	695b      	ldr	r3, [r3, #20]
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	4927      	ldr	r1, [pc, #156]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	600b      	str	r3, [r1, #0]
 8001a9c:	e015      	b.n	8001aca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a9e:	4b26      	ldr	r3, [pc, #152]	; (8001b38 <HAL_RCC_OscConfig+0x270>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa4:	f7ff fc12 	bl	80012cc <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aac:	f7ff fc0e 	bl	80012cc <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e17a      	b.n	8001db4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001abe:	4b1d      	ldr	r3, [pc, #116]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1f0      	bne.n	8001aac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0308 	and.w	r3, r3, #8
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d03a      	beq.n	8001b4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d019      	beq.n	8001b12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ade:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae4:	f7ff fbf2 	bl	80012cc <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aec:	f7ff fbee 	bl	80012cc <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e15a      	b.n	8001db4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001afe:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0f0      	beq.n	8001aec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b0a:	2001      	movs	r0, #1
 8001b0c:	f000 fada 	bl	80020c4 <RCC_Delay>
 8001b10:	e01c      	b.n	8001b4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b12:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b18:	f7ff fbd8 	bl	80012cc <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b1e:	e00f      	b.n	8001b40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b20:	f7ff fbd4 	bl	80012cc <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d908      	bls.n	8001b40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e140      	b.n	8001db4 <HAL_RCC_OscConfig+0x4ec>
 8001b32:	bf00      	nop
 8001b34:	40021000 	.word	0x40021000
 8001b38:	42420000 	.word	0x42420000
 8001b3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b40:	4b9e      	ldr	r3, [pc, #632]	; (8001dbc <HAL_RCC_OscConfig+0x4f4>)
 8001b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1e9      	bne.n	8001b20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f000 80a6 	beq.w	8001ca6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b5e:	4b97      	ldr	r3, [pc, #604]	; (8001dbc <HAL_RCC_OscConfig+0x4f4>)
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10d      	bne.n	8001b86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b6a:	4b94      	ldr	r3, [pc, #592]	; (8001dbc <HAL_RCC_OscConfig+0x4f4>)
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	4a93      	ldr	r2, [pc, #588]	; (8001dbc <HAL_RCC_OscConfig+0x4f4>)
 8001b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b74:	61d3      	str	r3, [r2, #28]
 8001b76:	4b91      	ldr	r3, [pc, #580]	; (8001dbc <HAL_RCC_OscConfig+0x4f4>)
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b82:	2301      	movs	r3, #1
 8001b84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b86:	4b8e      	ldr	r3, [pc, #568]	; (8001dc0 <HAL_RCC_OscConfig+0x4f8>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d118      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b92:	4b8b      	ldr	r3, [pc, #556]	; (8001dc0 <HAL_RCC_OscConfig+0x4f8>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a8a      	ldr	r2, [pc, #552]	; (8001dc0 <HAL_RCC_OscConfig+0x4f8>)
 8001b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b9e:	f7ff fb95 	bl	80012cc <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ba6:	f7ff fb91 	bl	80012cc <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b64      	cmp	r3, #100	; 0x64
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e0fd      	b.n	8001db4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb8:	4b81      	ldr	r3, [pc, #516]	; (8001dc0 <HAL_RCC_OscConfig+0x4f8>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0f0      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d106      	bne.n	8001bda <HAL_RCC_OscConfig+0x312>
 8001bcc:	4b7b      	ldr	r3, [pc, #492]	; (8001dbc <HAL_RCC_OscConfig+0x4f4>)
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	4a7a      	ldr	r2, [pc, #488]	; (8001dbc <HAL_RCC_OscConfig+0x4f4>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	6213      	str	r3, [r2, #32]
 8001bd8:	e02d      	b.n	8001c36 <HAL_RCC_OscConfig+0x36e>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10c      	bne.n	8001bfc <HAL_RCC_OscConfig+0x334>
 8001be2:	4b76      	ldr	r3, [pc, #472]	; (8001dbc <HAL_RCC_OscConfig+0x4f4>)
 8001be4:	6a1b      	ldr	r3, [r3, #32]
 8001be6:	4a75      	ldr	r2, [pc, #468]	; (8001dbc <HAL_RCC_OscConfig+0x4f4>)
 8001be8:	f023 0301 	bic.w	r3, r3, #1
 8001bec:	6213      	str	r3, [r2, #32]
 8001bee:	4b73      	ldr	r3, [pc, #460]	; (8001dbc <HAL_RCC_OscConfig+0x4f4>)
 8001bf0:	6a1b      	ldr	r3, [r3, #32]
 8001bf2:	4a72      	ldr	r2, [pc, #456]	; (8001dbc <HAL_RCC_OscConfig+0x4f4>)
 8001bf4:	f023 0304 	bic.w	r3, r3, #4
 8001bf8:	6213      	str	r3, [r2, #32]
 8001bfa:	e01c      	b.n	8001c36 <HAL_RCC_OscConfig+0x36e>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	2b05      	cmp	r3, #5
 8001c02:	d10c      	bne.n	8001c1e <HAL_RCC_OscConfig+0x356>
 8001c04:	4b6d      	ldr	r3, [pc, #436]	; (8001dbc <HAL_RCC_OscConfig+0x4f4>)
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	4a6c      	ldr	r2, [pc, #432]	; (8001dbc <HAL_RCC_OscConfig+0x4f4>)
 8001c0a:	f043 0304 	orr.w	r3, r3, #4
 8001c0e:	6213      	str	r3, [r2, #32]
 8001c10:	4b6a      	ldr	r3, [pc, #424]	; (8001dbc <HAL_RCC_OscConfig+0x4f4>)
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	4a69      	ldr	r2, [pc, #420]	; (8001dbc <HAL_RCC_OscConfig+0x4f4>)
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	6213      	str	r3, [r2, #32]
 8001c1c:	e00b      	b.n	8001c36 <HAL_RCC_OscConfig+0x36e>
 8001c1e:	4b67      	ldr	r3, [pc, #412]	; (8001dbc <HAL_RCC_OscConfig+0x4f4>)
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	4a66      	ldr	r2, [pc, #408]	; (8001dbc <HAL_RCC_OscConfig+0x4f4>)
 8001c24:	f023 0301 	bic.w	r3, r3, #1
 8001c28:	6213      	str	r3, [r2, #32]
 8001c2a:	4b64      	ldr	r3, [pc, #400]	; (8001dbc <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	4a63      	ldr	r2, [pc, #396]	; (8001dbc <HAL_RCC_OscConfig+0x4f4>)
 8001c30:	f023 0304 	bic.w	r3, r3, #4
 8001c34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d015      	beq.n	8001c6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c3e:	f7ff fb45 	bl	80012cc <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c44:	e00a      	b.n	8001c5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c46:	f7ff fb41 	bl	80012cc <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e0ab      	b.n	8001db4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c5c:	4b57      	ldr	r3, [pc, #348]	; (8001dbc <HAL_RCC_OscConfig+0x4f4>)
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0ee      	beq.n	8001c46 <HAL_RCC_OscConfig+0x37e>
 8001c68:	e014      	b.n	8001c94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c6a:	f7ff fb2f 	bl	80012cc <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c70:	e00a      	b.n	8001c88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c72:	f7ff fb2b 	bl	80012cc <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e095      	b.n	8001db4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c88:	4b4c      	ldr	r3, [pc, #304]	; (8001dbc <HAL_RCC_OscConfig+0x4f4>)
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1ee      	bne.n	8001c72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c94:	7dfb      	ldrb	r3, [r7, #23]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d105      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c9a:	4b48      	ldr	r3, [pc, #288]	; (8001dbc <HAL_RCC_OscConfig+0x4f4>)
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	4a47      	ldr	r2, [pc, #284]	; (8001dbc <HAL_RCC_OscConfig+0x4f4>)
 8001ca0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 8081 	beq.w	8001db2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cb0:	4b42      	ldr	r3, [pc, #264]	; (8001dbc <HAL_RCC_OscConfig+0x4f4>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 030c 	and.w	r3, r3, #12
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	d061      	beq.n	8001d80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d146      	bne.n	8001d52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc4:	4b3f      	ldr	r3, [pc, #252]	; (8001dc4 <HAL_RCC_OscConfig+0x4fc>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cca:	f7ff faff 	bl	80012cc <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd2:	f7ff fafb 	bl	80012cc <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e067      	b.n	8001db4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ce4:	4b35      	ldr	r3, [pc, #212]	; (8001dbc <HAL_RCC_OscConfig+0x4f4>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1f0      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf8:	d108      	bne.n	8001d0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cfa:	4b30      	ldr	r3, [pc, #192]	; (8001dbc <HAL_RCC_OscConfig+0x4f4>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	492d      	ldr	r1, [pc, #180]	; (8001dbc <HAL_RCC_OscConfig+0x4f4>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d0c:	4b2b      	ldr	r3, [pc, #172]	; (8001dbc <HAL_RCC_OscConfig+0x4f4>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a19      	ldr	r1, [r3, #32]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1c:	430b      	orrs	r3, r1
 8001d1e:	4927      	ldr	r1, [pc, #156]	; (8001dbc <HAL_RCC_OscConfig+0x4f4>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d24:	4b27      	ldr	r3, [pc, #156]	; (8001dc4 <HAL_RCC_OscConfig+0x4fc>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2a:	f7ff facf 	bl	80012cc <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d32:	f7ff facb 	bl	80012cc <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e037      	b.n	8001db4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d44:	4b1d      	ldr	r3, [pc, #116]	; (8001dbc <HAL_RCC_OscConfig+0x4f4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0f0      	beq.n	8001d32 <HAL_RCC_OscConfig+0x46a>
 8001d50:	e02f      	b.n	8001db2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d52:	4b1c      	ldr	r3, [pc, #112]	; (8001dc4 <HAL_RCC_OscConfig+0x4fc>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d58:	f7ff fab8 	bl	80012cc <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d60:	f7ff fab4 	bl	80012cc <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e020      	b.n	8001db4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d72:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <HAL_RCC_OscConfig+0x4f4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1f0      	bne.n	8001d60 <HAL_RCC_OscConfig+0x498>
 8001d7e:	e018      	b.n	8001db2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	69db      	ldr	r3, [r3, #28]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d101      	bne.n	8001d8c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e013      	b.n	8001db4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <HAL_RCC_OscConfig+0x4f4>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d106      	bne.n	8001dae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d001      	beq.n	8001db2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40007000 	.word	0x40007000
 8001dc4:	42420060 	.word	0x42420060

08001dc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e0d0      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ddc:	4b6a      	ldr	r3, [pc, #424]	; (8001f88 <HAL_RCC_ClockConfig+0x1c0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d910      	bls.n	8001e0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dea:	4b67      	ldr	r3, [pc, #412]	; (8001f88 <HAL_RCC_ClockConfig+0x1c0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f023 0207 	bic.w	r2, r3, #7
 8001df2:	4965      	ldr	r1, [pc, #404]	; (8001f88 <HAL_RCC_ClockConfig+0x1c0>)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfa:	4b63      	ldr	r3, [pc, #396]	; (8001f88 <HAL_RCC_ClockConfig+0x1c0>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d001      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e0b8      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d020      	beq.n	8001e5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d005      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e24:	4b59      	ldr	r3, [pc, #356]	; (8001f8c <HAL_RCC_ClockConfig+0x1c4>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	4a58      	ldr	r2, [pc, #352]	; (8001f8c <HAL_RCC_ClockConfig+0x1c4>)
 8001e2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0308 	and.w	r3, r3, #8
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d005      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e3c:	4b53      	ldr	r3, [pc, #332]	; (8001f8c <HAL_RCC_ClockConfig+0x1c4>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	4a52      	ldr	r2, [pc, #328]	; (8001f8c <HAL_RCC_ClockConfig+0x1c4>)
 8001e42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e48:	4b50      	ldr	r3, [pc, #320]	; (8001f8c <HAL_RCC_ClockConfig+0x1c4>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	494d      	ldr	r1, [pc, #308]	; (8001f8c <HAL_RCC_ClockConfig+0x1c4>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d040      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d107      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6e:	4b47      	ldr	r3, [pc, #284]	; (8001f8c <HAL_RCC_ClockConfig+0x1c4>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d115      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e07f      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d107      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e86:	4b41      	ldr	r3, [pc, #260]	; (8001f8c <HAL_RCC_ClockConfig+0x1c4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d109      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e073      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e96:	4b3d      	ldr	r3, [pc, #244]	; (8001f8c <HAL_RCC_ClockConfig+0x1c4>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e06b      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ea6:	4b39      	ldr	r3, [pc, #228]	; (8001f8c <HAL_RCC_ClockConfig+0x1c4>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f023 0203 	bic.w	r2, r3, #3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	4936      	ldr	r1, [pc, #216]	; (8001f8c <HAL_RCC_ClockConfig+0x1c4>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001eb8:	f7ff fa08 	bl	80012cc <HAL_GetTick>
 8001ebc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ebe:	e00a      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec0:	f7ff fa04 	bl	80012cc <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e053      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed6:	4b2d      	ldr	r3, [pc, #180]	; (8001f8c <HAL_RCC_ClockConfig+0x1c4>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 020c 	and.w	r2, r3, #12
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d1eb      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ee8:	4b27      	ldr	r3, [pc, #156]	; (8001f88 <HAL_RCC_ClockConfig+0x1c0>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d210      	bcs.n	8001f18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef6:	4b24      	ldr	r3, [pc, #144]	; (8001f88 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f023 0207 	bic.w	r2, r3, #7
 8001efe:	4922      	ldr	r1, [pc, #136]	; (8001f88 <HAL_RCC_ClockConfig+0x1c0>)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f06:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <HAL_RCC_ClockConfig+0x1c0>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d001      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e032      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d008      	beq.n	8001f36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f24:	4b19      	ldr	r3, [pc, #100]	; (8001f8c <HAL_RCC_ClockConfig+0x1c4>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	4916      	ldr	r1, [pc, #88]	; (8001f8c <HAL_RCC_ClockConfig+0x1c4>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d009      	beq.n	8001f56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f42:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <HAL_RCC_ClockConfig+0x1c4>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	490e      	ldr	r1, [pc, #56]	; (8001f8c <HAL_RCC_ClockConfig+0x1c4>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f56:	f000 f821 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 8001f5a:	4601      	mov	r1, r0
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <HAL_RCC_ClockConfig+0x1c4>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	091b      	lsrs	r3, r3, #4
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	4a0a      	ldr	r2, [pc, #40]	; (8001f90 <HAL_RCC_ClockConfig+0x1c8>)
 8001f68:	5cd3      	ldrb	r3, [r2, r3]
 8001f6a:	fa21 f303 	lsr.w	r3, r1, r3
 8001f6e:	4a09      	ldr	r2, [pc, #36]	; (8001f94 <HAL_RCC_ClockConfig+0x1cc>)
 8001f70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f72:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <HAL_RCC_ClockConfig+0x1d0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff f966 	bl	8001248 <HAL_InitTick>

  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40022000 	.word	0x40022000
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	08003c50 	.word	0x08003c50
 8001f94:	20000000 	.word	0x20000000
 8001f98:	20000004 	.word	0x20000004

08001f9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f9c:	b490      	push	{r4, r7}
 8001f9e:	b08a      	sub	sp, #40	; 0x28
 8001fa0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fa2:	4b2a      	ldr	r3, [pc, #168]	; (800204c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001fa4:	1d3c      	adds	r4, r7, #4
 8001fa6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fa8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fac:	4b28      	ldr	r3, [pc, #160]	; (8002050 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61bb      	str	r3, [r7, #24]
 8001fba:	2300      	movs	r3, #0
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fc6:	4b23      	ldr	r3, [pc, #140]	; (8002054 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f003 030c 	and.w	r3, r3, #12
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	d002      	beq.n	8001fdc <HAL_RCC_GetSysClockFreq+0x40>
 8001fd6:	2b08      	cmp	r3, #8
 8001fd8:	d003      	beq.n	8001fe2 <HAL_RCC_GetSysClockFreq+0x46>
 8001fda:	e02d      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fdc:	4b1e      	ldr	r3, [pc, #120]	; (8002058 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fde:	623b      	str	r3, [r7, #32]
      break;
 8001fe0:	e02d      	b.n	800203e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	0c9b      	lsrs	r3, r3, #18
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fee:	4413      	add	r3, r2
 8001ff0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ff4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d013      	beq.n	8002028 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002000:	4b14      	ldr	r3, [pc, #80]	; (8002054 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	0c5b      	lsrs	r3, r3, #17
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800200e:	4413      	add	r3, r2
 8002010:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002014:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	4a0f      	ldr	r2, [pc, #60]	; (8002058 <HAL_RCC_GetSysClockFreq+0xbc>)
 800201a:	fb02 f203 	mul.w	r2, r2, r3
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	fbb2 f3f3 	udiv	r3, r2, r3
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
 8002026:	e004      	b.n	8002032 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	4a0c      	ldr	r2, [pc, #48]	; (800205c <HAL_RCC_GetSysClockFreq+0xc0>)
 800202c:	fb02 f303 	mul.w	r3, r2, r3
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	623b      	str	r3, [r7, #32]
      break;
 8002036:	e002      	b.n	800203e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002038:	4b07      	ldr	r3, [pc, #28]	; (8002058 <HAL_RCC_GetSysClockFreq+0xbc>)
 800203a:	623b      	str	r3, [r7, #32]
      break;
 800203c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800203e:	6a3b      	ldr	r3, [r7, #32]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3728      	adds	r7, #40	; 0x28
 8002044:	46bd      	mov	sp, r7
 8002046:	bc90      	pop	{r4, r7}
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	08003c3c 	.word	0x08003c3c
 8002050:	08003c4c 	.word	0x08003c4c
 8002054:	40021000 	.word	0x40021000
 8002058:	007a1200 	.word	0x007a1200
 800205c:	003d0900 	.word	0x003d0900

08002060 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002064:	4b02      	ldr	r3, [pc, #8]	; (8002070 <HAL_RCC_GetHCLKFreq+0x10>)
 8002066:	681b      	ldr	r3, [r3, #0]
}
 8002068:	4618      	mov	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr
 8002070:	20000000 	.word	0x20000000

08002074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002078:	f7ff fff2 	bl	8002060 <HAL_RCC_GetHCLKFreq>
 800207c:	4601      	mov	r1, r0
 800207e:	4b05      	ldr	r3, [pc, #20]	; (8002094 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	0a1b      	lsrs	r3, r3, #8
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	4a03      	ldr	r2, [pc, #12]	; (8002098 <HAL_RCC_GetPCLK1Freq+0x24>)
 800208a:	5cd3      	ldrb	r3, [r2, r3]
 800208c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002090:	4618      	mov	r0, r3
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40021000 	.word	0x40021000
 8002098:	08003c60 	.word	0x08003c60

0800209c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020a0:	f7ff ffde 	bl	8002060 <HAL_RCC_GetHCLKFreq>
 80020a4:	4601      	mov	r1, r0
 80020a6:	4b05      	ldr	r3, [pc, #20]	; (80020bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	0adb      	lsrs	r3, r3, #11
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	4a03      	ldr	r2, [pc, #12]	; (80020c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020b2:	5cd3      	ldrb	r3, [r2, r3]
 80020b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40021000 	.word	0x40021000
 80020c0:	08003c60 	.word	0x08003c60

080020c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020cc:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <RCC_Delay+0x34>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a0a      	ldr	r2, [pc, #40]	; (80020fc <RCC_Delay+0x38>)
 80020d2:	fba2 2303 	umull	r2, r3, r2, r3
 80020d6:	0a5b      	lsrs	r3, r3, #9
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	fb02 f303 	mul.w	r3, r2, r3
 80020de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020e0:	bf00      	nop
  }
  while (Delay --);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	1e5a      	subs	r2, r3, #1
 80020e6:	60fa      	str	r2, [r7, #12]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1f9      	bne.n	80020e0 <RCC_Delay+0x1c>
}
 80020ec:	bf00      	nop
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	20000000 	.word	0x20000000
 80020fc:	10624dd3 	.word	0x10624dd3

08002100 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e041      	b.n	8002196 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d106      	bne.n	800212c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7fe fef2 	bl	8000f10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2202      	movs	r2, #2
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3304      	adds	r3, #4
 800213c:	4619      	mov	r1, r3
 800213e:	4610      	mov	r0, r2
 8002140:	f000 fa64 	bl	800260c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
	...

080021a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d001      	beq.n	80021b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e03a      	b.n	800222e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2202      	movs	r2, #2
 80021bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68da      	ldr	r2, [r3, #12]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 0201 	orr.w	r2, r2, #1
 80021ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a18      	ldr	r2, [pc, #96]	; (8002238 <HAL_TIM_Base_Start_IT+0x98>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d00e      	beq.n	80021f8 <HAL_TIM_Base_Start_IT+0x58>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e2:	d009      	beq.n	80021f8 <HAL_TIM_Base_Start_IT+0x58>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a14      	ldr	r2, [pc, #80]	; (800223c <HAL_TIM_Base_Start_IT+0x9c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d004      	beq.n	80021f8 <HAL_TIM_Base_Start_IT+0x58>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a13      	ldr	r2, [pc, #76]	; (8002240 <HAL_TIM_Base_Start_IT+0xa0>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d111      	bne.n	800221c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2b06      	cmp	r3, #6
 8002208:	d010      	beq.n	800222c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f042 0201 	orr.w	r2, r2, #1
 8002218:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800221a:	e007      	b.n	800222c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 0201 	orr.w	r2, r2, #1
 800222a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr
 8002238:	40012c00 	.word	0x40012c00
 800223c:	40000400 	.word	0x40000400
 8002240:	40000800 	.word	0x40000800

08002244 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b02      	cmp	r3, #2
 8002258:	d122      	bne.n	80022a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b02      	cmp	r3, #2
 8002266:	d11b      	bne.n	80022a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f06f 0202 	mvn.w	r2, #2
 8002270:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2201      	movs	r2, #1
 8002276:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f9a4 	bl	80025d4 <HAL_TIM_IC_CaptureCallback>
 800228c:	e005      	b.n	800229a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f997 	bl	80025c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 f9a6 	bl	80025e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	f003 0304 	and.w	r3, r3, #4
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	d122      	bne.n	80022f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	f003 0304 	and.w	r3, r3, #4
 80022b8:	2b04      	cmp	r3, #4
 80022ba:	d11b      	bne.n	80022f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f06f 0204 	mvn.w	r2, #4
 80022c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2202      	movs	r2, #2
 80022ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f97a 	bl	80025d4 <HAL_TIM_IC_CaptureCallback>
 80022e0:	e005      	b.n	80022ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f96d 	bl	80025c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 f97c 	bl	80025e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b08      	cmp	r3, #8
 8002300:	d122      	bne.n	8002348 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	f003 0308 	and.w	r3, r3, #8
 800230c:	2b08      	cmp	r3, #8
 800230e:	d11b      	bne.n	8002348 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f06f 0208 	mvn.w	r2, #8
 8002318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2204      	movs	r2, #4
 800231e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f950 	bl	80025d4 <HAL_TIM_IC_CaptureCallback>
 8002334:	e005      	b.n	8002342 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f943 	bl	80025c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 f952 	bl	80025e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	f003 0310 	and.w	r3, r3, #16
 8002352:	2b10      	cmp	r3, #16
 8002354:	d122      	bne.n	800239c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	f003 0310 	and.w	r3, r3, #16
 8002360:	2b10      	cmp	r3, #16
 8002362:	d11b      	bne.n	800239c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f06f 0210 	mvn.w	r2, #16
 800236c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2208      	movs	r2, #8
 8002372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f926 	bl	80025d4 <HAL_TIM_IC_CaptureCallback>
 8002388:	e005      	b.n	8002396 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f919 	bl	80025c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 f928 	bl	80025e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d10e      	bne.n	80023c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d107      	bne.n	80023c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f06f 0201 	mvn.w	r2, #1
 80023c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7fe f8a4 	bl	8000510 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d2:	2b80      	cmp	r3, #128	; 0x80
 80023d4:	d10e      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e0:	2b80      	cmp	r3, #128	; 0x80
 80023e2:	d107      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 fa6b 	bl	80028ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023fe:	2b40      	cmp	r3, #64	; 0x40
 8002400:	d10e      	bne.n	8002420 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240c:	2b40      	cmp	r3, #64	; 0x40
 800240e:	d107      	bne.n	8002420 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f8ec 	bl	80025f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	f003 0320 	and.w	r3, r3, #32
 800242a:	2b20      	cmp	r3, #32
 800242c:	d10e      	bne.n	800244c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f003 0320 	and.w	r3, r3, #32
 8002438:	2b20      	cmp	r3, #32
 800243a:	d107      	bne.n	800244c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f06f 0220 	mvn.w	r2, #32
 8002444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 fa36 	bl	80028b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800244c:	bf00      	nop
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <HAL_TIM_ConfigClockSource+0x18>
 8002468:	2302      	movs	r3, #2
 800246a:	e0a6      	b.n	80025ba <HAL_TIM_ConfigClockSource+0x166>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2202      	movs	r2, #2
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800248a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002492:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b40      	cmp	r3, #64	; 0x40
 80024a2:	d067      	beq.n	8002574 <HAL_TIM_ConfigClockSource+0x120>
 80024a4:	2b40      	cmp	r3, #64	; 0x40
 80024a6:	d80b      	bhi.n	80024c0 <HAL_TIM_ConfigClockSource+0x6c>
 80024a8:	2b10      	cmp	r3, #16
 80024aa:	d073      	beq.n	8002594 <HAL_TIM_ConfigClockSource+0x140>
 80024ac:	2b10      	cmp	r3, #16
 80024ae:	d802      	bhi.n	80024b6 <HAL_TIM_ConfigClockSource+0x62>
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d06f      	beq.n	8002594 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80024b4:	e078      	b.n	80025a8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80024b6:	2b20      	cmp	r3, #32
 80024b8:	d06c      	beq.n	8002594 <HAL_TIM_ConfigClockSource+0x140>
 80024ba:	2b30      	cmp	r3, #48	; 0x30
 80024bc:	d06a      	beq.n	8002594 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80024be:	e073      	b.n	80025a8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80024c0:	2b70      	cmp	r3, #112	; 0x70
 80024c2:	d00d      	beq.n	80024e0 <HAL_TIM_ConfigClockSource+0x8c>
 80024c4:	2b70      	cmp	r3, #112	; 0x70
 80024c6:	d804      	bhi.n	80024d2 <HAL_TIM_ConfigClockSource+0x7e>
 80024c8:	2b50      	cmp	r3, #80	; 0x50
 80024ca:	d033      	beq.n	8002534 <HAL_TIM_ConfigClockSource+0xe0>
 80024cc:	2b60      	cmp	r3, #96	; 0x60
 80024ce:	d041      	beq.n	8002554 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80024d0:	e06a      	b.n	80025a8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80024d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024d6:	d066      	beq.n	80025a6 <HAL_TIM_ConfigClockSource+0x152>
 80024d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024dc:	d017      	beq.n	800250e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80024de:	e063      	b.n	80025a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6818      	ldr	r0, [r3, #0]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	6899      	ldr	r1, [r3, #8]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f000 f965 	bl	80027be <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002502:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	609a      	str	r2, [r3, #8]
      break;
 800250c:	e04c      	b.n	80025a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6818      	ldr	r0, [r3, #0]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	6899      	ldr	r1, [r3, #8]
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	f000 f94e 	bl	80027be <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002530:	609a      	str	r2, [r3, #8]
      break;
 8002532:	e039      	b.n	80025a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6818      	ldr	r0, [r3, #0]
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	6859      	ldr	r1, [r3, #4]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	461a      	mov	r2, r3
 8002542:	f000 f8c5 	bl	80026d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2150      	movs	r1, #80	; 0x50
 800254c:	4618      	mov	r0, r3
 800254e:	f000 f91c 	bl	800278a <TIM_ITRx_SetConfig>
      break;
 8002552:	e029      	b.n	80025a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6818      	ldr	r0, [r3, #0]
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	6859      	ldr	r1, [r3, #4]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	461a      	mov	r2, r3
 8002562:	f000 f8e3 	bl	800272c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2160      	movs	r1, #96	; 0x60
 800256c:	4618      	mov	r0, r3
 800256e:	f000 f90c 	bl	800278a <TIM_ITRx_SetConfig>
      break;
 8002572:	e019      	b.n	80025a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6818      	ldr	r0, [r3, #0]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	6859      	ldr	r1, [r3, #4]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	461a      	mov	r2, r3
 8002582:	f000 f8a5 	bl	80026d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2140      	movs	r1, #64	; 0x40
 800258c:	4618      	mov	r0, r3
 800258e:	f000 f8fc 	bl	800278a <TIM_ITRx_SetConfig>
      break;
 8002592:	e009      	b.n	80025a8 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4619      	mov	r1, r3
 800259e:	4610      	mov	r0, r2
 80025a0:	f000 f8f3 	bl	800278a <TIM_ITRx_SetConfig>
        break;
 80025a4:	e000      	b.n	80025a8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80025a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr

080025d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr

080025e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr

080025f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	bc80      	pop	{r7}
 8002608:	4770      	bx	lr
	...

0800260c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a29      	ldr	r2, [pc, #164]	; (80026c4 <TIM_Base_SetConfig+0xb8>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d00b      	beq.n	800263c <TIM_Base_SetConfig+0x30>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800262a:	d007      	beq.n	800263c <TIM_Base_SetConfig+0x30>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a26      	ldr	r2, [pc, #152]	; (80026c8 <TIM_Base_SetConfig+0xbc>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d003      	beq.n	800263c <TIM_Base_SetConfig+0x30>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a25      	ldr	r2, [pc, #148]	; (80026cc <TIM_Base_SetConfig+0xc0>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d108      	bne.n	800264e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002642:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	4313      	orrs	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a1c      	ldr	r2, [pc, #112]	; (80026c4 <TIM_Base_SetConfig+0xb8>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d00b      	beq.n	800266e <TIM_Base_SetConfig+0x62>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800265c:	d007      	beq.n	800266e <TIM_Base_SetConfig+0x62>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a19      	ldr	r2, [pc, #100]	; (80026c8 <TIM_Base_SetConfig+0xbc>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d003      	beq.n	800266e <TIM_Base_SetConfig+0x62>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a18      	ldr	r2, [pc, #96]	; (80026cc <TIM_Base_SetConfig+0xc0>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d108      	bne.n	8002680 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002674:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	4313      	orrs	r3, r2
 800267e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	4313      	orrs	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a07      	ldr	r2, [pc, #28]	; (80026c4 <TIM_Base_SetConfig+0xb8>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d103      	bne.n	80026b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	691a      	ldr	r2, [r3, #16]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	615a      	str	r2, [r3, #20]
}
 80026ba:	bf00      	nop
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr
 80026c4:	40012c00 	.word	0x40012c00
 80026c8:	40000400 	.word	0x40000400
 80026cc:	40000800 	.word	0x40000800

080026d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b087      	sub	sp, #28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	f023 0201 	bic.w	r2, r3, #1
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	4313      	orrs	r3, r2
 8002704:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f023 030a 	bic.w	r3, r3, #10
 800270c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	4313      	orrs	r3, r2
 8002714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	621a      	str	r2, [r3, #32]
}
 8002722:	bf00      	nop
 8002724:	371c      	adds	r7, #28
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr

0800272c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800272c:	b480      	push	{r7}
 800272e:	b087      	sub	sp, #28
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	f023 0210 	bic.w	r2, r3, #16
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002756:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	031b      	lsls	r3, r3, #12
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	4313      	orrs	r3, r2
 8002760:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002768:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	011b      	lsls	r3, r3, #4
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	621a      	str	r2, [r3, #32]
}
 8002780:	bf00      	nop
 8002782:	371c      	adds	r7, #28
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr

0800278a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800278a:	b480      	push	{r7}
 800278c:	b085      	sub	sp, #20
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	f043 0307 	orr.w	r3, r3, #7
 80027ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	609a      	str	r2, [r3, #8]
}
 80027b4:	bf00      	nop
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr

080027be <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027be:	b480      	push	{r7}
 80027c0:	b087      	sub	sp, #28
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	60f8      	str	r0, [r7, #12]
 80027c6:	60b9      	str	r1, [r7, #8]
 80027c8:	607a      	str	r2, [r7, #4]
 80027ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027d8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	021a      	lsls	r2, r3, #8
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	431a      	orrs	r2, r3
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	609a      	str	r2, [r3, #8]
}
 80027f2:	bf00      	nop
 80027f4:	371c      	adds	r7, #28
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr

080027fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800280c:	2b01      	cmp	r3, #1
 800280e:	d101      	bne.n	8002814 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002810:	2302      	movs	r3, #2
 8002812:	e046      	b.n	80028a2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2202      	movs	r2, #2
 8002820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800283a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	4313      	orrs	r3, r2
 8002844:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a16      	ldr	r2, [pc, #88]	; (80028ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d00e      	beq.n	8002876 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002860:	d009      	beq.n	8002876 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a12      	ldr	r2, [pc, #72]	; (80028b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d004      	beq.n	8002876 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a10      	ldr	r2, [pc, #64]	; (80028b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d10c      	bne.n	8002890 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800287c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	4313      	orrs	r3, r2
 8002886:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr
 80028ac:	40012c00 	.word	0x40012c00
 80028b0:	40000400 	.word	0x40000400
 80028b4:	40000800 	.word	0x40000800

080028b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr

080028ca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr

080028dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e03f      	b.n	800296e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d106      	bne.n	8002908 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7fe fb44 	bl	8000f90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2224      	movs	r2, #36	; 0x24
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800291e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 f905 	bl	8002b30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002934:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	695a      	ldr	r2, [r3, #20]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002944:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002954:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2220      	movs	r2, #32
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2220      	movs	r2, #32
 8002968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b08a      	sub	sp, #40	; 0x28
 800297a:	af02      	add	r7, sp, #8
 800297c:	60f8      	str	r0, [r7, #12]
 800297e:	60b9      	str	r1, [r7, #8]
 8002980:	603b      	str	r3, [r7, #0]
 8002982:	4613      	mov	r3, r2
 8002984:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b20      	cmp	r3, #32
 8002994:	d17c      	bne.n	8002a90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d002      	beq.n	80029a2 <HAL_UART_Transmit+0x2c>
 800299c:	88fb      	ldrh	r3, [r7, #6]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e075      	b.n	8002a92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d101      	bne.n	80029b4 <HAL_UART_Transmit+0x3e>
 80029b0:	2302      	movs	r3, #2
 80029b2:	e06e      	b.n	8002a92 <HAL_UART_Transmit+0x11c>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2221      	movs	r2, #33	; 0x21
 80029c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029ca:	f7fe fc7f 	bl	80012cc <HAL_GetTick>
 80029ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	88fa      	ldrh	r2, [r7, #6]
 80029d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	88fa      	ldrh	r2, [r7, #6]
 80029da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029e4:	d108      	bne.n	80029f8 <HAL_UART_Transmit+0x82>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d104      	bne.n	80029f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80029ee:	2300      	movs	r3, #0
 80029f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	61bb      	str	r3, [r7, #24]
 80029f6:	e003      	b.n	8002a00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002a08:	e02a      	b.n	8002a60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	2200      	movs	r2, #0
 8002a12:	2180      	movs	r1, #128	; 0x80
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f000 f840 	bl	8002a9a <UART_WaitOnFlagUntilTimeout>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e036      	b.n	8002a92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10b      	bne.n	8002a42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	881b      	ldrh	r3, [r3, #0]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	3302      	adds	r3, #2
 8002a3e:	61bb      	str	r3, [r7, #24]
 8002a40:	e007      	b.n	8002a52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	781a      	ldrb	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1cf      	bne.n	8002a0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	2200      	movs	r2, #0
 8002a72:	2140      	movs	r1, #64	; 0x40
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 f810 	bl	8002a9a <UART_WaitOnFlagUntilTimeout>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e006      	b.n	8002a92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2220      	movs	r2, #32
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	e000      	b.n	8002a92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a90:	2302      	movs	r3, #2
  }
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3720      	adds	r7, #32
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b084      	sub	sp, #16
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	60f8      	str	r0, [r7, #12]
 8002aa2:	60b9      	str	r1, [r7, #8]
 8002aa4:	603b      	str	r3, [r7, #0]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aaa:	e02c      	b.n	8002b06 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab2:	d028      	beq.n	8002b06 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d007      	beq.n	8002aca <UART_WaitOnFlagUntilTimeout+0x30>
 8002aba:	f7fe fc07 	bl	80012cc <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d21d      	bcs.n	8002b06 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ad8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	695a      	ldr	r2, [r3, #20]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 0201 	bic.w	r2, r2, #1
 8002ae8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2220      	movs	r2, #32
 8002aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2220      	movs	r2, #32
 8002af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e00f      	b.n	8002b26 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	bf0c      	ite	eq
 8002b16:	2301      	moveq	r3, #1
 8002b18:	2300      	movne	r3, #0
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d0c3      	beq.n	8002aac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689a      	ldr	r2, [r3, #8]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b6a:	f023 030c 	bic.w	r3, r3, #12
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6812      	ldr	r2, [r2, #0]
 8002b72:	68b9      	ldr	r1, [r7, #8]
 8002b74:	430b      	orrs	r3, r1
 8002b76:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699a      	ldr	r2, [r3, #24]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a2c      	ldr	r2, [pc, #176]	; (8002c44 <UART_SetConfig+0x114>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d103      	bne.n	8002ba0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b98:	f7ff fa80 	bl	800209c <HAL_RCC_GetPCLK2Freq>
 8002b9c:	60f8      	str	r0, [r7, #12]
 8002b9e:	e002      	b.n	8002ba6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ba0:	f7ff fa68 	bl	8002074 <HAL_RCC_GetPCLK1Freq>
 8002ba4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	009a      	lsls	r2, r3, #2
 8002bb0:	441a      	add	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bbc:	4a22      	ldr	r2, [pc, #136]	; (8002c48 <UART_SetConfig+0x118>)
 8002bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc2:	095b      	lsrs	r3, r3, #5
 8002bc4:	0119      	lsls	r1, r3, #4
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	009a      	lsls	r2, r3, #2
 8002bd0:	441a      	add	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bdc:	4b1a      	ldr	r3, [pc, #104]	; (8002c48 <UART_SetConfig+0x118>)
 8002bde:	fba3 0302 	umull	r0, r3, r3, r2
 8002be2:	095b      	lsrs	r3, r3, #5
 8002be4:	2064      	movs	r0, #100	; 0x64
 8002be6:	fb00 f303 	mul.w	r3, r0, r3
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	3332      	adds	r3, #50	; 0x32
 8002bf0:	4a15      	ldr	r2, [pc, #84]	; (8002c48 <UART_SetConfig+0x118>)
 8002bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf6:	095b      	lsrs	r3, r3, #5
 8002bf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bfc:	4419      	add	r1, r3
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	009a      	lsls	r2, r3, #2
 8002c08:	441a      	add	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c14:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <UART_SetConfig+0x118>)
 8002c16:	fba3 0302 	umull	r0, r3, r3, r2
 8002c1a:	095b      	lsrs	r3, r3, #5
 8002c1c:	2064      	movs	r0, #100	; 0x64
 8002c1e:	fb00 f303 	mul.w	r3, r0, r3
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	3332      	adds	r3, #50	; 0x32
 8002c28:	4a07      	ldr	r2, [pc, #28]	; (8002c48 <UART_SetConfig+0x118>)
 8002c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2e:	095b      	lsrs	r3, r3, #5
 8002c30:	f003 020f 	and.w	r2, r3, #15
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	440a      	add	r2, r1
 8002c3a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c3c:	bf00      	nop
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40013800 	.word	0x40013800
 8002c48:	51eb851f 	.word	0x51eb851f

08002c4c <__errno>:
 8002c4c:	4b01      	ldr	r3, [pc, #4]	; (8002c54 <__errno+0x8>)
 8002c4e:	6818      	ldr	r0, [r3, #0]
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	2000000c 	.word	0x2000000c

08002c58 <__libc_init_array>:
 8002c58:	b570      	push	{r4, r5, r6, lr}
 8002c5a:	2500      	movs	r5, #0
 8002c5c:	4e0c      	ldr	r6, [pc, #48]	; (8002c90 <__libc_init_array+0x38>)
 8002c5e:	4c0d      	ldr	r4, [pc, #52]	; (8002c94 <__libc_init_array+0x3c>)
 8002c60:	1ba4      	subs	r4, r4, r6
 8002c62:	10a4      	asrs	r4, r4, #2
 8002c64:	42a5      	cmp	r5, r4
 8002c66:	d109      	bne.n	8002c7c <__libc_init_array+0x24>
 8002c68:	f000 ff74 	bl	8003b54 <_init>
 8002c6c:	2500      	movs	r5, #0
 8002c6e:	4e0a      	ldr	r6, [pc, #40]	; (8002c98 <__libc_init_array+0x40>)
 8002c70:	4c0a      	ldr	r4, [pc, #40]	; (8002c9c <__libc_init_array+0x44>)
 8002c72:	1ba4      	subs	r4, r4, r6
 8002c74:	10a4      	asrs	r4, r4, #2
 8002c76:	42a5      	cmp	r5, r4
 8002c78:	d105      	bne.n	8002c86 <__libc_init_array+0x2e>
 8002c7a:	bd70      	pop	{r4, r5, r6, pc}
 8002c7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c80:	4798      	blx	r3
 8002c82:	3501      	adds	r5, #1
 8002c84:	e7ee      	b.n	8002c64 <__libc_init_array+0xc>
 8002c86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c8a:	4798      	blx	r3
 8002c8c:	3501      	adds	r5, #1
 8002c8e:	e7f2      	b.n	8002c76 <__libc_init_array+0x1e>
 8002c90:	08003d00 	.word	0x08003d00
 8002c94:	08003d00 	.word	0x08003d00
 8002c98:	08003d00 	.word	0x08003d00
 8002c9c:	08003d04 	.word	0x08003d04

08002ca0 <memset>:
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	4402      	add	r2, r0
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d100      	bne.n	8002caa <memset+0xa>
 8002ca8:	4770      	bx	lr
 8002caa:	f803 1b01 	strb.w	r1, [r3], #1
 8002cae:	e7f9      	b.n	8002ca4 <memset+0x4>

08002cb0 <iprintf>:
 8002cb0:	b40f      	push	{r0, r1, r2, r3}
 8002cb2:	4b0a      	ldr	r3, [pc, #40]	; (8002cdc <iprintf+0x2c>)
 8002cb4:	b513      	push	{r0, r1, r4, lr}
 8002cb6:	681c      	ldr	r4, [r3, #0]
 8002cb8:	b124      	cbz	r4, 8002cc4 <iprintf+0x14>
 8002cba:	69a3      	ldr	r3, [r4, #24]
 8002cbc:	b913      	cbnz	r3, 8002cc4 <iprintf+0x14>
 8002cbe:	4620      	mov	r0, r4
 8002cc0:	f000 fa22 	bl	8003108 <__sinit>
 8002cc4:	ab05      	add	r3, sp, #20
 8002cc6:	9a04      	ldr	r2, [sp, #16]
 8002cc8:	68a1      	ldr	r1, [r4, #8]
 8002cca:	4620      	mov	r0, r4
 8002ccc:	9301      	str	r3, [sp, #4]
 8002cce:	f000 fbd7 	bl	8003480 <_vfiprintf_r>
 8002cd2:	b002      	add	sp, #8
 8002cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cd8:	b004      	add	sp, #16
 8002cda:	4770      	bx	lr
 8002cdc:	2000000c 	.word	0x2000000c

08002ce0 <_puts_r>:
 8002ce0:	b570      	push	{r4, r5, r6, lr}
 8002ce2:	460e      	mov	r6, r1
 8002ce4:	4605      	mov	r5, r0
 8002ce6:	b118      	cbz	r0, 8002cf0 <_puts_r+0x10>
 8002ce8:	6983      	ldr	r3, [r0, #24]
 8002cea:	b90b      	cbnz	r3, 8002cf0 <_puts_r+0x10>
 8002cec:	f000 fa0c 	bl	8003108 <__sinit>
 8002cf0:	69ab      	ldr	r3, [r5, #24]
 8002cf2:	68ac      	ldr	r4, [r5, #8]
 8002cf4:	b913      	cbnz	r3, 8002cfc <_puts_r+0x1c>
 8002cf6:	4628      	mov	r0, r5
 8002cf8:	f000 fa06 	bl	8003108 <__sinit>
 8002cfc:	4b23      	ldr	r3, [pc, #140]	; (8002d8c <_puts_r+0xac>)
 8002cfe:	429c      	cmp	r4, r3
 8002d00:	d117      	bne.n	8002d32 <_puts_r+0x52>
 8002d02:	686c      	ldr	r4, [r5, #4]
 8002d04:	89a3      	ldrh	r3, [r4, #12]
 8002d06:	071b      	lsls	r3, r3, #28
 8002d08:	d51d      	bpl.n	8002d46 <_puts_r+0x66>
 8002d0a:	6923      	ldr	r3, [r4, #16]
 8002d0c:	b1db      	cbz	r3, 8002d46 <_puts_r+0x66>
 8002d0e:	3e01      	subs	r6, #1
 8002d10:	68a3      	ldr	r3, [r4, #8]
 8002d12:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002d16:	3b01      	subs	r3, #1
 8002d18:	60a3      	str	r3, [r4, #8]
 8002d1a:	b9e9      	cbnz	r1, 8002d58 <_puts_r+0x78>
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	da2e      	bge.n	8002d7e <_puts_r+0x9e>
 8002d20:	4622      	mov	r2, r4
 8002d22:	210a      	movs	r1, #10
 8002d24:	4628      	mov	r0, r5
 8002d26:	f000 f83f 	bl	8002da8 <__swbuf_r>
 8002d2a:	3001      	adds	r0, #1
 8002d2c:	d011      	beq.n	8002d52 <_puts_r+0x72>
 8002d2e:	200a      	movs	r0, #10
 8002d30:	e011      	b.n	8002d56 <_puts_r+0x76>
 8002d32:	4b17      	ldr	r3, [pc, #92]	; (8002d90 <_puts_r+0xb0>)
 8002d34:	429c      	cmp	r4, r3
 8002d36:	d101      	bne.n	8002d3c <_puts_r+0x5c>
 8002d38:	68ac      	ldr	r4, [r5, #8]
 8002d3a:	e7e3      	b.n	8002d04 <_puts_r+0x24>
 8002d3c:	4b15      	ldr	r3, [pc, #84]	; (8002d94 <_puts_r+0xb4>)
 8002d3e:	429c      	cmp	r4, r3
 8002d40:	bf08      	it	eq
 8002d42:	68ec      	ldreq	r4, [r5, #12]
 8002d44:	e7de      	b.n	8002d04 <_puts_r+0x24>
 8002d46:	4621      	mov	r1, r4
 8002d48:	4628      	mov	r0, r5
 8002d4a:	f000 f87f 	bl	8002e4c <__swsetup_r>
 8002d4e:	2800      	cmp	r0, #0
 8002d50:	d0dd      	beq.n	8002d0e <_puts_r+0x2e>
 8002d52:	f04f 30ff 	mov.w	r0, #4294967295
 8002d56:	bd70      	pop	{r4, r5, r6, pc}
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	da04      	bge.n	8002d66 <_puts_r+0x86>
 8002d5c:	69a2      	ldr	r2, [r4, #24]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	dc06      	bgt.n	8002d70 <_puts_r+0x90>
 8002d62:	290a      	cmp	r1, #10
 8002d64:	d004      	beq.n	8002d70 <_puts_r+0x90>
 8002d66:	6823      	ldr	r3, [r4, #0]
 8002d68:	1c5a      	adds	r2, r3, #1
 8002d6a:	6022      	str	r2, [r4, #0]
 8002d6c:	7019      	strb	r1, [r3, #0]
 8002d6e:	e7cf      	b.n	8002d10 <_puts_r+0x30>
 8002d70:	4622      	mov	r2, r4
 8002d72:	4628      	mov	r0, r5
 8002d74:	f000 f818 	bl	8002da8 <__swbuf_r>
 8002d78:	3001      	adds	r0, #1
 8002d7a:	d1c9      	bne.n	8002d10 <_puts_r+0x30>
 8002d7c:	e7e9      	b.n	8002d52 <_puts_r+0x72>
 8002d7e:	200a      	movs	r0, #10
 8002d80:	6823      	ldr	r3, [r4, #0]
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	6022      	str	r2, [r4, #0]
 8002d86:	7018      	strb	r0, [r3, #0]
 8002d88:	e7e5      	b.n	8002d56 <_puts_r+0x76>
 8002d8a:	bf00      	nop
 8002d8c:	08003c8c 	.word	0x08003c8c
 8002d90:	08003cac 	.word	0x08003cac
 8002d94:	08003c6c 	.word	0x08003c6c

08002d98 <puts>:
 8002d98:	4b02      	ldr	r3, [pc, #8]	; (8002da4 <puts+0xc>)
 8002d9a:	4601      	mov	r1, r0
 8002d9c:	6818      	ldr	r0, [r3, #0]
 8002d9e:	f7ff bf9f 	b.w	8002ce0 <_puts_r>
 8002da2:	bf00      	nop
 8002da4:	2000000c 	.word	0x2000000c

08002da8 <__swbuf_r>:
 8002da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002daa:	460e      	mov	r6, r1
 8002dac:	4614      	mov	r4, r2
 8002dae:	4605      	mov	r5, r0
 8002db0:	b118      	cbz	r0, 8002dba <__swbuf_r+0x12>
 8002db2:	6983      	ldr	r3, [r0, #24]
 8002db4:	b90b      	cbnz	r3, 8002dba <__swbuf_r+0x12>
 8002db6:	f000 f9a7 	bl	8003108 <__sinit>
 8002dba:	4b21      	ldr	r3, [pc, #132]	; (8002e40 <__swbuf_r+0x98>)
 8002dbc:	429c      	cmp	r4, r3
 8002dbe:	d12a      	bne.n	8002e16 <__swbuf_r+0x6e>
 8002dc0:	686c      	ldr	r4, [r5, #4]
 8002dc2:	69a3      	ldr	r3, [r4, #24]
 8002dc4:	60a3      	str	r3, [r4, #8]
 8002dc6:	89a3      	ldrh	r3, [r4, #12]
 8002dc8:	071a      	lsls	r2, r3, #28
 8002dca:	d52e      	bpl.n	8002e2a <__swbuf_r+0x82>
 8002dcc:	6923      	ldr	r3, [r4, #16]
 8002dce:	b363      	cbz	r3, 8002e2a <__swbuf_r+0x82>
 8002dd0:	6923      	ldr	r3, [r4, #16]
 8002dd2:	6820      	ldr	r0, [r4, #0]
 8002dd4:	b2f6      	uxtb	r6, r6
 8002dd6:	1ac0      	subs	r0, r0, r3
 8002dd8:	6963      	ldr	r3, [r4, #20]
 8002dda:	4637      	mov	r7, r6
 8002ddc:	4283      	cmp	r3, r0
 8002dde:	dc04      	bgt.n	8002dea <__swbuf_r+0x42>
 8002de0:	4621      	mov	r1, r4
 8002de2:	4628      	mov	r0, r5
 8002de4:	f000 f926 	bl	8003034 <_fflush_r>
 8002de8:	bb28      	cbnz	r0, 8002e36 <__swbuf_r+0x8e>
 8002dea:	68a3      	ldr	r3, [r4, #8]
 8002dec:	3001      	adds	r0, #1
 8002dee:	3b01      	subs	r3, #1
 8002df0:	60a3      	str	r3, [r4, #8]
 8002df2:	6823      	ldr	r3, [r4, #0]
 8002df4:	1c5a      	adds	r2, r3, #1
 8002df6:	6022      	str	r2, [r4, #0]
 8002df8:	701e      	strb	r6, [r3, #0]
 8002dfa:	6963      	ldr	r3, [r4, #20]
 8002dfc:	4283      	cmp	r3, r0
 8002dfe:	d004      	beq.n	8002e0a <__swbuf_r+0x62>
 8002e00:	89a3      	ldrh	r3, [r4, #12]
 8002e02:	07db      	lsls	r3, r3, #31
 8002e04:	d519      	bpl.n	8002e3a <__swbuf_r+0x92>
 8002e06:	2e0a      	cmp	r6, #10
 8002e08:	d117      	bne.n	8002e3a <__swbuf_r+0x92>
 8002e0a:	4621      	mov	r1, r4
 8002e0c:	4628      	mov	r0, r5
 8002e0e:	f000 f911 	bl	8003034 <_fflush_r>
 8002e12:	b190      	cbz	r0, 8002e3a <__swbuf_r+0x92>
 8002e14:	e00f      	b.n	8002e36 <__swbuf_r+0x8e>
 8002e16:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <__swbuf_r+0x9c>)
 8002e18:	429c      	cmp	r4, r3
 8002e1a:	d101      	bne.n	8002e20 <__swbuf_r+0x78>
 8002e1c:	68ac      	ldr	r4, [r5, #8]
 8002e1e:	e7d0      	b.n	8002dc2 <__swbuf_r+0x1a>
 8002e20:	4b09      	ldr	r3, [pc, #36]	; (8002e48 <__swbuf_r+0xa0>)
 8002e22:	429c      	cmp	r4, r3
 8002e24:	bf08      	it	eq
 8002e26:	68ec      	ldreq	r4, [r5, #12]
 8002e28:	e7cb      	b.n	8002dc2 <__swbuf_r+0x1a>
 8002e2a:	4621      	mov	r1, r4
 8002e2c:	4628      	mov	r0, r5
 8002e2e:	f000 f80d 	bl	8002e4c <__swsetup_r>
 8002e32:	2800      	cmp	r0, #0
 8002e34:	d0cc      	beq.n	8002dd0 <__swbuf_r+0x28>
 8002e36:	f04f 37ff 	mov.w	r7, #4294967295
 8002e3a:	4638      	mov	r0, r7
 8002e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	08003c8c 	.word	0x08003c8c
 8002e44:	08003cac 	.word	0x08003cac
 8002e48:	08003c6c 	.word	0x08003c6c

08002e4c <__swsetup_r>:
 8002e4c:	4b32      	ldr	r3, [pc, #200]	; (8002f18 <__swsetup_r+0xcc>)
 8002e4e:	b570      	push	{r4, r5, r6, lr}
 8002e50:	681d      	ldr	r5, [r3, #0]
 8002e52:	4606      	mov	r6, r0
 8002e54:	460c      	mov	r4, r1
 8002e56:	b125      	cbz	r5, 8002e62 <__swsetup_r+0x16>
 8002e58:	69ab      	ldr	r3, [r5, #24]
 8002e5a:	b913      	cbnz	r3, 8002e62 <__swsetup_r+0x16>
 8002e5c:	4628      	mov	r0, r5
 8002e5e:	f000 f953 	bl	8003108 <__sinit>
 8002e62:	4b2e      	ldr	r3, [pc, #184]	; (8002f1c <__swsetup_r+0xd0>)
 8002e64:	429c      	cmp	r4, r3
 8002e66:	d10f      	bne.n	8002e88 <__swsetup_r+0x3c>
 8002e68:	686c      	ldr	r4, [r5, #4]
 8002e6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	0715      	lsls	r5, r2, #28
 8002e72:	d42c      	bmi.n	8002ece <__swsetup_r+0x82>
 8002e74:	06d0      	lsls	r0, r2, #27
 8002e76:	d411      	bmi.n	8002e9c <__swsetup_r+0x50>
 8002e78:	2209      	movs	r2, #9
 8002e7a:	6032      	str	r2, [r6, #0]
 8002e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e80:	81a3      	strh	r3, [r4, #12]
 8002e82:	f04f 30ff 	mov.w	r0, #4294967295
 8002e86:	e03e      	b.n	8002f06 <__swsetup_r+0xba>
 8002e88:	4b25      	ldr	r3, [pc, #148]	; (8002f20 <__swsetup_r+0xd4>)
 8002e8a:	429c      	cmp	r4, r3
 8002e8c:	d101      	bne.n	8002e92 <__swsetup_r+0x46>
 8002e8e:	68ac      	ldr	r4, [r5, #8]
 8002e90:	e7eb      	b.n	8002e6a <__swsetup_r+0x1e>
 8002e92:	4b24      	ldr	r3, [pc, #144]	; (8002f24 <__swsetup_r+0xd8>)
 8002e94:	429c      	cmp	r4, r3
 8002e96:	bf08      	it	eq
 8002e98:	68ec      	ldreq	r4, [r5, #12]
 8002e9a:	e7e6      	b.n	8002e6a <__swsetup_r+0x1e>
 8002e9c:	0751      	lsls	r1, r2, #29
 8002e9e:	d512      	bpl.n	8002ec6 <__swsetup_r+0x7a>
 8002ea0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ea2:	b141      	cbz	r1, 8002eb6 <__swsetup_r+0x6a>
 8002ea4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ea8:	4299      	cmp	r1, r3
 8002eaa:	d002      	beq.n	8002eb2 <__swsetup_r+0x66>
 8002eac:	4630      	mov	r0, r6
 8002eae:	f000 fa19 	bl	80032e4 <_free_r>
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	6363      	str	r3, [r4, #52]	; 0x34
 8002eb6:	89a3      	ldrh	r3, [r4, #12]
 8002eb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002ebc:	81a3      	strh	r3, [r4, #12]
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	6063      	str	r3, [r4, #4]
 8002ec2:	6923      	ldr	r3, [r4, #16]
 8002ec4:	6023      	str	r3, [r4, #0]
 8002ec6:	89a3      	ldrh	r3, [r4, #12]
 8002ec8:	f043 0308 	orr.w	r3, r3, #8
 8002ecc:	81a3      	strh	r3, [r4, #12]
 8002ece:	6923      	ldr	r3, [r4, #16]
 8002ed0:	b94b      	cbnz	r3, 8002ee6 <__swsetup_r+0x9a>
 8002ed2:	89a3      	ldrh	r3, [r4, #12]
 8002ed4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002edc:	d003      	beq.n	8002ee6 <__swsetup_r+0x9a>
 8002ede:	4621      	mov	r1, r4
 8002ee0:	4630      	mov	r0, r6
 8002ee2:	f000 f9bf 	bl	8003264 <__smakebuf_r>
 8002ee6:	89a2      	ldrh	r2, [r4, #12]
 8002ee8:	f012 0301 	ands.w	r3, r2, #1
 8002eec:	d00c      	beq.n	8002f08 <__swsetup_r+0xbc>
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60a3      	str	r3, [r4, #8]
 8002ef2:	6963      	ldr	r3, [r4, #20]
 8002ef4:	425b      	negs	r3, r3
 8002ef6:	61a3      	str	r3, [r4, #24]
 8002ef8:	6923      	ldr	r3, [r4, #16]
 8002efa:	b953      	cbnz	r3, 8002f12 <__swsetup_r+0xc6>
 8002efc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f00:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002f04:	d1ba      	bne.n	8002e7c <__swsetup_r+0x30>
 8002f06:	bd70      	pop	{r4, r5, r6, pc}
 8002f08:	0792      	lsls	r2, r2, #30
 8002f0a:	bf58      	it	pl
 8002f0c:	6963      	ldrpl	r3, [r4, #20]
 8002f0e:	60a3      	str	r3, [r4, #8]
 8002f10:	e7f2      	b.n	8002ef8 <__swsetup_r+0xac>
 8002f12:	2000      	movs	r0, #0
 8002f14:	e7f7      	b.n	8002f06 <__swsetup_r+0xba>
 8002f16:	bf00      	nop
 8002f18:	2000000c 	.word	0x2000000c
 8002f1c:	08003c8c 	.word	0x08003c8c
 8002f20:	08003cac 	.word	0x08003cac
 8002f24:	08003c6c 	.word	0x08003c6c

08002f28 <__sflush_r>:
 8002f28:	898a      	ldrh	r2, [r1, #12]
 8002f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f2e:	4605      	mov	r5, r0
 8002f30:	0710      	lsls	r0, r2, #28
 8002f32:	460c      	mov	r4, r1
 8002f34:	d458      	bmi.n	8002fe8 <__sflush_r+0xc0>
 8002f36:	684b      	ldr	r3, [r1, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	dc05      	bgt.n	8002f48 <__sflush_r+0x20>
 8002f3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	dc02      	bgt.n	8002f48 <__sflush_r+0x20>
 8002f42:	2000      	movs	r0, #0
 8002f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f4a:	2e00      	cmp	r6, #0
 8002f4c:	d0f9      	beq.n	8002f42 <__sflush_r+0x1a>
 8002f4e:	2300      	movs	r3, #0
 8002f50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002f54:	682f      	ldr	r7, [r5, #0]
 8002f56:	6a21      	ldr	r1, [r4, #32]
 8002f58:	602b      	str	r3, [r5, #0]
 8002f5a:	d032      	beq.n	8002fc2 <__sflush_r+0x9a>
 8002f5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f5e:	89a3      	ldrh	r3, [r4, #12]
 8002f60:	075a      	lsls	r2, r3, #29
 8002f62:	d505      	bpl.n	8002f70 <__sflush_r+0x48>
 8002f64:	6863      	ldr	r3, [r4, #4]
 8002f66:	1ac0      	subs	r0, r0, r3
 8002f68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002f6a:	b10b      	cbz	r3, 8002f70 <__sflush_r+0x48>
 8002f6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f6e:	1ac0      	subs	r0, r0, r3
 8002f70:	2300      	movs	r3, #0
 8002f72:	4602      	mov	r2, r0
 8002f74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f76:	6a21      	ldr	r1, [r4, #32]
 8002f78:	4628      	mov	r0, r5
 8002f7a:	47b0      	blx	r6
 8002f7c:	1c43      	adds	r3, r0, #1
 8002f7e:	89a3      	ldrh	r3, [r4, #12]
 8002f80:	d106      	bne.n	8002f90 <__sflush_r+0x68>
 8002f82:	6829      	ldr	r1, [r5, #0]
 8002f84:	291d      	cmp	r1, #29
 8002f86:	d848      	bhi.n	800301a <__sflush_r+0xf2>
 8002f88:	4a29      	ldr	r2, [pc, #164]	; (8003030 <__sflush_r+0x108>)
 8002f8a:	40ca      	lsrs	r2, r1
 8002f8c:	07d6      	lsls	r6, r2, #31
 8002f8e:	d544      	bpl.n	800301a <__sflush_r+0xf2>
 8002f90:	2200      	movs	r2, #0
 8002f92:	6062      	str	r2, [r4, #4]
 8002f94:	6922      	ldr	r2, [r4, #16]
 8002f96:	04d9      	lsls	r1, r3, #19
 8002f98:	6022      	str	r2, [r4, #0]
 8002f9a:	d504      	bpl.n	8002fa6 <__sflush_r+0x7e>
 8002f9c:	1c42      	adds	r2, r0, #1
 8002f9e:	d101      	bne.n	8002fa4 <__sflush_r+0x7c>
 8002fa0:	682b      	ldr	r3, [r5, #0]
 8002fa2:	b903      	cbnz	r3, 8002fa6 <__sflush_r+0x7e>
 8002fa4:	6560      	str	r0, [r4, #84]	; 0x54
 8002fa6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fa8:	602f      	str	r7, [r5, #0]
 8002faa:	2900      	cmp	r1, #0
 8002fac:	d0c9      	beq.n	8002f42 <__sflush_r+0x1a>
 8002fae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002fb2:	4299      	cmp	r1, r3
 8002fb4:	d002      	beq.n	8002fbc <__sflush_r+0x94>
 8002fb6:	4628      	mov	r0, r5
 8002fb8:	f000 f994 	bl	80032e4 <_free_r>
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	6360      	str	r0, [r4, #52]	; 0x34
 8002fc0:	e7c0      	b.n	8002f44 <__sflush_r+0x1c>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	4628      	mov	r0, r5
 8002fc6:	47b0      	blx	r6
 8002fc8:	1c41      	adds	r1, r0, #1
 8002fca:	d1c8      	bne.n	8002f5e <__sflush_r+0x36>
 8002fcc:	682b      	ldr	r3, [r5, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d0c5      	beq.n	8002f5e <__sflush_r+0x36>
 8002fd2:	2b1d      	cmp	r3, #29
 8002fd4:	d001      	beq.n	8002fda <__sflush_r+0xb2>
 8002fd6:	2b16      	cmp	r3, #22
 8002fd8:	d101      	bne.n	8002fde <__sflush_r+0xb6>
 8002fda:	602f      	str	r7, [r5, #0]
 8002fdc:	e7b1      	b.n	8002f42 <__sflush_r+0x1a>
 8002fde:	89a3      	ldrh	r3, [r4, #12]
 8002fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fe4:	81a3      	strh	r3, [r4, #12]
 8002fe6:	e7ad      	b.n	8002f44 <__sflush_r+0x1c>
 8002fe8:	690f      	ldr	r7, [r1, #16]
 8002fea:	2f00      	cmp	r7, #0
 8002fec:	d0a9      	beq.n	8002f42 <__sflush_r+0x1a>
 8002fee:	0793      	lsls	r3, r2, #30
 8002ff0:	bf18      	it	ne
 8002ff2:	2300      	movne	r3, #0
 8002ff4:	680e      	ldr	r6, [r1, #0]
 8002ff6:	bf08      	it	eq
 8002ff8:	694b      	ldreq	r3, [r1, #20]
 8002ffa:	eba6 0807 	sub.w	r8, r6, r7
 8002ffe:	600f      	str	r7, [r1, #0]
 8003000:	608b      	str	r3, [r1, #8]
 8003002:	f1b8 0f00 	cmp.w	r8, #0
 8003006:	dd9c      	ble.n	8002f42 <__sflush_r+0x1a>
 8003008:	4643      	mov	r3, r8
 800300a:	463a      	mov	r2, r7
 800300c:	6a21      	ldr	r1, [r4, #32]
 800300e:	4628      	mov	r0, r5
 8003010:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003012:	47b0      	blx	r6
 8003014:	2800      	cmp	r0, #0
 8003016:	dc06      	bgt.n	8003026 <__sflush_r+0xfe>
 8003018:	89a3      	ldrh	r3, [r4, #12]
 800301a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800301e:	81a3      	strh	r3, [r4, #12]
 8003020:	f04f 30ff 	mov.w	r0, #4294967295
 8003024:	e78e      	b.n	8002f44 <__sflush_r+0x1c>
 8003026:	4407      	add	r7, r0
 8003028:	eba8 0800 	sub.w	r8, r8, r0
 800302c:	e7e9      	b.n	8003002 <__sflush_r+0xda>
 800302e:	bf00      	nop
 8003030:	20400001 	.word	0x20400001

08003034 <_fflush_r>:
 8003034:	b538      	push	{r3, r4, r5, lr}
 8003036:	690b      	ldr	r3, [r1, #16]
 8003038:	4605      	mov	r5, r0
 800303a:	460c      	mov	r4, r1
 800303c:	b1db      	cbz	r3, 8003076 <_fflush_r+0x42>
 800303e:	b118      	cbz	r0, 8003048 <_fflush_r+0x14>
 8003040:	6983      	ldr	r3, [r0, #24]
 8003042:	b90b      	cbnz	r3, 8003048 <_fflush_r+0x14>
 8003044:	f000 f860 	bl	8003108 <__sinit>
 8003048:	4b0c      	ldr	r3, [pc, #48]	; (800307c <_fflush_r+0x48>)
 800304a:	429c      	cmp	r4, r3
 800304c:	d109      	bne.n	8003062 <_fflush_r+0x2e>
 800304e:	686c      	ldr	r4, [r5, #4]
 8003050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003054:	b17b      	cbz	r3, 8003076 <_fflush_r+0x42>
 8003056:	4621      	mov	r1, r4
 8003058:	4628      	mov	r0, r5
 800305a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800305e:	f7ff bf63 	b.w	8002f28 <__sflush_r>
 8003062:	4b07      	ldr	r3, [pc, #28]	; (8003080 <_fflush_r+0x4c>)
 8003064:	429c      	cmp	r4, r3
 8003066:	d101      	bne.n	800306c <_fflush_r+0x38>
 8003068:	68ac      	ldr	r4, [r5, #8]
 800306a:	e7f1      	b.n	8003050 <_fflush_r+0x1c>
 800306c:	4b05      	ldr	r3, [pc, #20]	; (8003084 <_fflush_r+0x50>)
 800306e:	429c      	cmp	r4, r3
 8003070:	bf08      	it	eq
 8003072:	68ec      	ldreq	r4, [r5, #12]
 8003074:	e7ec      	b.n	8003050 <_fflush_r+0x1c>
 8003076:	2000      	movs	r0, #0
 8003078:	bd38      	pop	{r3, r4, r5, pc}
 800307a:	bf00      	nop
 800307c:	08003c8c 	.word	0x08003c8c
 8003080:	08003cac 	.word	0x08003cac
 8003084:	08003c6c 	.word	0x08003c6c

08003088 <std>:
 8003088:	2300      	movs	r3, #0
 800308a:	b510      	push	{r4, lr}
 800308c:	4604      	mov	r4, r0
 800308e:	e9c0 3300 	strd	r3, r3, [r0]
 8003092:	6083      	str	r3, [r0, #8]
 8003094:	8181      	strh	r1, [r0, #12]
 8003096:	6643      	str	r3, [r0, #100]	; 0x64
 8003098:	81c2      	strh	r2, [r0, #14]
 800309a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800309e:	6183      	str	r3, [r0, #24]
 80030a0:	4619      	mov	r1, r3
 80030a2:	2208      	movs	r2, #8
 80030a4:	305c      	adds	r0, #92	; 0x5c
 80030a6:	f7ff fdfb 	bl	8002ca0 <memset>
 80030aa:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <std+0x38>)
 80030ac:	6224      	str	r4, [r4, #32]
 80030ae:	6263      	str	r3, [r4, #36]	; 0x24
 80030b0:	4b04      	ldr	r3, [pc, #16]	; (80030c4 <std+0x3c>)
 80030b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80030b4:	4b04      	ldr	r3, [pc, #16]	; (80030c8 <std+0x40>)
 80030b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80030b8:	4b04      	ldr	r3, [pc, #16]	; (80030cc <std+0x44>)
 80030ba:	6323      	str	r3, [r4, #48]	; 0x30
 80030bc:	bd10      	pop	{r4, pc}
 80030be:	bf00      	nop
 80030c0:	080039dd 	.word	0x080039dd
 80030c4:	080039ff 	.word	0x080039ff
 80030c8:	08003a37 	.word	0x08003a37
 80030cc:	08003a5b 	.word	0x08003a5b

080030d0 <_cleanup_r>:
 80030d0:	4901      	ldr	r1, [pc, #4]	; (80030d8 <_cleanup_r+0x8>)
 80030d2:	f000 b885 	b.w	80031e0 <_fwalk_reent>
 80030d6:	bf00      	nop
 80030d8:	08003035 	.word	0x08003035

080030dc <__sfmoreglue>:
 80030dc:	b570      	push	{r4, r5, r6, lr}
 80030de:	2568      	movs	r5, #104	; 0x68
 80030e0:	1e4a      	subs	r2, r1, #1
 80030e2:	4355      	muls	r5, r2
 80030e4:	460e      	mov	r6, r1
 80030e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80030ea:	f000 f947 	bl	800337c <_malloc_r>
 80030ee:	4604      	mov	r4, r0
 80030f0:	b140      	cbz	r0, 8003104 <__sfmoreglue+0x28>
 80030f2:	2100      	movs	r1, #0
 80030f4:	e9c0 1600 	strd	r1, r6, [r0]
 80030f8:	300c      	adds	r0, #12
 80030fa:	60a0      	str	r0, [r4, #8]
 80030fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003100:	f7ff fdce 	bl	8002ca0 <memset>
 8003104:	4620      	mov	r0, r4
 8003106:	bd70      	pop	{r4, r5, r6, pc}

08003108 <__sinit>:
 8003108:	6983      	ldr	r3, [r0, #24]
 800310a:	b510      	push	{r4, lr}
 800310c:	4604      	mov	r4, r0
 800310e:	bb33      	cbnz	r3, 800315e <__sinit+0x56>
 8003110:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003114:	6503      	str	r3, [r0, #80]	; 0x50
 8003116:	4b12      	ldr	r3, [pc, #72]	; (8003160 <__sinit+0x58>)
 8003118:	4a12      	ldr	r2, [pc, #72]	; (8003164 <__sinit+0x5c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6282      	str	r2, [r0, #40]	; 0x28
 800311e:	4298      	cmp	r0, r3
 8003120:	bf04      	itt	eq
 8003122:	2301      	moveq	r3, #1
 8003124:	6183      	streq	r3, [r0, #24]
 8003126:	f000 f81f 	bl	8003168 <__sfp>
 800312a:	6060      	str	r0, [r4, #4]
 800312c:	4620      	mov	r0, r4
 800312e:	f000 f81b 	bl	8003168 <__sfp>
 8003132:	60a0      	str	r0, [r4, #8]
 8003134:	4620      	mov	r0, r4
 8003136:	f000 f817 	bl	8003168 <__sfp>
 800313a:	2200      	movs	r2, #0
 800313c:	60e0      	str	r0, [r4, #12]
 800313e:	2104      	movs	r1, #4
 8003140:	6860      	ldr	r0, [r4, #4]
 8003142:	f7ff ffa1 	bl	8003088 <std>
 8003146:	2201      	movs	r2, #1
 8003148:	2109      	movs	r1, #9
 800314a:	68a0      	ldr	r0, [r4, #8]
 800314c:	f7ff ff9c 	bl	8003088 <std>
 8003150:	2202      	movs	r2, #2
 8003152:	2112      	movs	r1, #18
 8003154:	68e0      	ldr	r0, [r4, #12]
 8003156:	f7ff ff97 	bl	8003088 <std>
 800315a:	2301      	movs	r3, #1
 800315c:	61a3      	str	r3, [r4, #24]
 800315e:	bd10      	pop	{r4, pc}
 8003160:	08003c68 	.word	0x08003c68
 8003164:	080030d1 	.word	0x080030d1

08003168 <__sfp>:
 8003168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316a:	4b1b      	ldr	r3, [pc, #108]	; (80031d8 <__sfp+0x70>)
 800316c:	4607      	mov	r7, r0
 800316e:	681e      	ldr	r6, [r3, #0]
 8003170:	69b3      	ldr	r3, [r6, #24]
 8003172:	b913      	cbnz	r3, 800317a <__sfp+0x12>
 8003174:	4630      	mov	r0, r6
 8003176:	f7ff ffc7 	bl	8003108 <__sinit>
 800317a:	3648      	adds	r6, #72	; 0x48
 800317c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003180:	3b01      	subs	r3, #1
 8003182:	d503      	bpl.n	800318c <__sfp+0x24>
 8003184:	6833      	ldr	r3, [r6, #0]
 8003186:	b133      	cbz	r3, 8003196 <__sfp+0x2e>
 8003188:	6836      	ldr	r6, [r6, #0]
 800318a:	e7f7      	b.n	800317c <__sfp+0x14>
 800318c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003190:	b16d      	cbz	r5, 80031ae <__sfp+0x46>
 8003192:	3468      	adds	r4, #104	; 0x68
 8003194:	e7f4      	b.n	8003180 <__sfp+0x18>
 8003196:	2104      	movs	r1, #4
 8003198:	4638      	mov	r0, r7
 800319a:	f7ff ff9f 	bl	80030dc <__sfmoreglue>
 800319e:	6030      	str	r0, [r6, #0]
 80031a0:	2800      	cmp	r0, #0
 80031a2:	d1f1      	bne.n	8003188 <__sfp+0x20>
 80031a4:	230c      	movs	r3, #12
 80031a6:	4604      	mov	r4, r0
 80031a8:	603b      	str	r3, [r7, #0]
 80031aa:	4620      	mov	r0, r4
 80031ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031ae:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <__sfp+0x74>)
 80031b0:	6665      	str	r5, [r4, #100]	; 0x64
 80031b2:	e9c4 5500 	strd	r5, r5, [r4]
 80031b6:	60a5      	str	r5, [r4, #8]
 80031b8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80031bc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80031c0:	2208      	movs	r2, #8
 80031c2:	4629      	mov	r1, r5
 80031c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80031c8:	f7ff fd6a 	bl	8002ca0 <memset>
 80031cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80031d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80031d4:	e7e9      	b.n	80031aa <__sfp+0x42>
 80031d6:	bf00      	nop
 80031d8:	08003c68 	.word	0x08003c68
 80031dc:	ffff0001 	.word	0xffff0001

080031e0 <_fwalk_reent>:
 80031e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031e4:	4680      	mov	r8, r0
 80031e6:	4689      	mov	r9, r1
 80031e8:	2600      	movs	r6, #0
 80031ea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80031ee:	b914      	cbnz	r4, 80031f6 <_fwalk_reent+0x16>
 80031f0:	4630      	mov	r0, r6
 80031f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031f6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80031fa:	3f01      	subs	r7, #1
 80031fc:	d501      	bpl.n	8003202 <_fwalk_reent+0x22>
 80031fe:	6824      	ldr	r4, [r4, #0]
 8003200:	e7f5      	b.n	80031ee <_fwalk_reent+0xe>
 8003202:	89ab      	ldrh	r3, [r5, #12]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d907      	bls.n	8003218 <_fwalk_reent+0x38>
 8003208:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800320c:	3301      	adds	r3, #1
 800320e:	d003      	beq.n	8003218 <_fwalk_reent+0x38>
 8003210:	4629      	mov	r1, r5
 8003212:	4640      	mov	r0, r8
 8003214:	47c8      	blx	r9
 8003216:	4306      	orrs	r6, r0
 8003218:	3568      	adds	r5, #104	; 0x68
 800321a:	e7ee      	b.n	80031fa <_fwalk_reent+0x1a>

0800321c <__swhatbuf_r>:
 800321c:	b570      	push	{r4, r5, r6, lr}
 800321e:	460e      	mov	r6, r1
 8003220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003224:	b096      	sub	sp, #88	; 0x58
 8003226:	2900      	cmp	r1, #0
 8003228:	4614      	mov	r4, r2
 800322a:	461d      	mov	r5, r3
 800322c:	da07      	bge.n	800323e <__swhatbuf_r+0x22>
 800322e:	2300      	movs	r3, #0
 8003230:	602b      	str	r3, [r5, #0]
 8003232:	89b3      	ldrh	r3, [r6, #12]
 8003234:	061a      	lsls	r2, r3, #24
 8003236:	d410      	bmi.n	800325a <__swhatbuf_r+0x3e>
 8003238:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800323c:	e00e      	b.n	800325c <__swhatbuf_r+0x40>
 800323e:	466a      	mov	r2, sp
 8003240:	f000 fc32 	bl	8003aa8 <_fstat_r>
 8003244:	2800      	cmp	r0, #0
 8003246:	dbf2      	blt.n	800322e <__swhatbuf_r+0x12>
 8003248:	9a01      	ldr	r2, [sp, #4]
 800324a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800324e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003252:	425a      	negs	r2, r3
 8003254:	415a      	adcs	r2, r3
 8003256:	602a      	str	r2, [r5, #0]
 8003258:	e7ee      	b.n	8003238 <__swhatbuf_r+0x1c>
 800325a:	2340      	movs	r3, #64	; 0x40
 800325c:	2000      	movs	r0, #0
 800325e:	6023      	str	r3, [r4, #0]
 8003260:	b016      	add	sp, #88	; 0x58
 8003262:	bd70      	pop	{r4, r5, r6, pc}

08003264 <__smakebuf_r>:
 8003264:	898b      	ldrh	r3, [r1, #12]
 8003266:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003268:	079d      	lsls	r5, r3, #30
 800326a:	4606      	mov	r6, r0
 800326c:	460c      	mov	r4, r1
 800326e:	d507      	bpl.n	8003280 <__smakebuf_r+0x1c>
 8003270:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003274:	6023      	str	r3, [r4, #0]
 8003276:	6123      	str	r3, [r4, #16]
 8003278:	2301      	movs	r3, #1
 800327a:	6163      	str	r3, [r4, #20]
 800327c:	b002      	add	sp, #8
 800327e:	bd70      	pop	{r4, r5, r6, pc}
 8003280:	ab01      	add	r3, sp, #4
 8003282:	466a      	mov	r2, sp
 8003284:	f7ff ffca 	bl	800321c <__swhatbuf_r>
 8003288:	9900      	ldr	r1, [sp, #0]
 800328a:	4605      	mov	r5, r0
 800328c:	4630      	mov	r0, r6
 800328e:	f000 f875 	bl	800337c <_malloc_r>
 8003292:	b948      	cbnz	r0, 80032a8 <__smakebuf_r+0x44>
 8003294:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003298:	059a      	lsls	r2, r3, #22
 800329a:	d4ef      	bmi.n	800327c <__smakebuf_r+0x18>
 800329c:	f023 0303 	bic.w	r3, r3, #3
 80032a0:	f043 0302 	orr.w	r3, r3, #2
 80032a4:	81a3      	strh	r3, [r4, #12]
 80032a6:	e7e3      	b.n	8003270 <__smakebuf_r+0xc>
 80032a8:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <__smakebuf_r+0x7c>)
 80032aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80032ac:	89a3      	ldrh	r3, [r4, #12]
 80032ae:	6020      	str	r0, [r4, #0]
 80032b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032b4:	81a3      	strh	r3, [r4, #12]
 80032b6:	9b00      	ldr	r3, [sp, #0]
 80032b8:	6120      	str	r0, [r4, #16]
 80032ba:	6163      	str	r3, [r4, #20]
 80032bc:	9b01      	ldr	r3, [sp, #4]
 80032be:	b15b      	cbz	r3, 80032d8 <__smakebuf_r+0x74>
 80032c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032c4:	4630      	mov	r0, r6
 80032c6:	f000 fc01 	bl	8003acc <_isatty_r>
 80032ca:	b128      	cbz	r0, 80032d8 <__smakebuf_r+0x74>
 80032cc:	89a3      	ldrh	r3, [r4, #12]
 80032ce:	f023 0303 	bic.w	r3, r3, #3
 80032d2:	f043 0301 	orr.w	r3, r3, #1
 80032d6:	81a3      	strh	r3, [r4, #12]
 80032d8:	89a3      	ldrh	r3, [r4, #12]
 80032da:	431d      	orrs	r5, r3
 80032dc:	81a5      	strh	r5, [r4, #12]
 80032de:	e7cd      	b.n	800327c <__smakebuf_r+0x18>
 80032e0:	080030d1 	.word	0x080030d1

080032e4 <_free_r>:
 80032e4:	b538      	push	{r3, r4, r5, lr}
 80032e6:	4605      	mov	r5, r0
 80032e8:	2900      	cmp	r1, #0
 80032ea:	d043      	beq.n	8003374 <_free_r+0x90>
 80032ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032f0:	1f0c      	subs	r4, r1, #4
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	bfb8      	it	lt
 80032f6:	18e4      	addlt	r4, r4, r3
 80032f8:	f000 fc18 	bl	8003b2c <__malloc_lock>
 80032fc:	4a1e      	ldr	r2, [pc, #120]	; (8003378 <_free_r+0x94>)
 80032fe:	6813      	ldr	r3, [r2, #0]
 8003300:	4610      	mov	r0, r2
 8003302:	b933      	cbnz	r3, 8003312 <_free_r+0x2e>
 8003304:	6063      	str	r3, [r4, #4]
 8003306:	6014      	str	r4, [r2, #0]
 8003308:	4628      	mov	r0, r5
 800330a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800330e:	f000 bc0e 	b.w	8003b2e <__malloc_unlock>
 8003312:	42a3      	cmp	r3, r4
 8003314:	d90b      	bls.n	800332e <_free_r+0x4a>
 8003316:	6821      	ldr	r1, [r4, #0]
 8003318:	1862      	adds	r2, r4, r1
 800331a:	4293      	cmp	r3, r2
 800331c:	bf01      	itttt	eq
 800331e:	681a      	ldreq	r2, [r3, #0]
 8003320:	685b      	ldreq	r3, [r3, #4]
 8003322:	1852      	addeq	r2, r2, r1
 8003324:	6022      	streq	r2, [r4, #0]
 8003326:	6063      	str	r3, [r4, #4]
 8003328:	6004      	str	r4, [r0, #0]
 800332a:	e7ed      	b.n	8003308 <_free_r+0x24>
 800332c:	4613      	mov	r3, r2
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	b10a      	cbz	r2, 8003336 <_free_r+0x52>
 8003332:	42a2      	cmp	r2, r4
 8003334:	d9fa      	bls.n	800332c <_free_r+0x48>
 8003336:	6819      	ldr	r1, [r3, #0]
 8003338:	1858      	adds	r0, r3, r1
 800333a:	42a0      	cmp	r0, r4
 800333c:	d10b      	bne.n	8003356 <_free_r+0x72>
 800333e:	6820      	ldr	r0, [r4, #0]
 8003340:	4401      	add	r1, r0
 8003342:	1858      	adds	r0, r3, r1
 8003344:	4282      	cmp	r2, r0
 8003346:	6019      	str	r1, [r3, #0]
 8003348:	d1de      	bne.n	8003308 <_free_r+0x24>
 800334a:	6810      	ldr	r0, [r2, #0]
 800334c:	6852      	ldr	r2, [r2, #4]
 800334e:	4401      	add	r1, r0
 8003350:	6019      	str	r1, [r3, #0]
 8003352:	605a      	str	r2, [r3, #4]
 8003354:	e7d8      	b.n	8003308 <_free_r+0x24>
 8003356:	d902      	bls.n	800335e <_free_r+0x7a>
 8003358:	230c      	movs	r3, #12
 800335a:	602b      	str	r3, [r5, #0]
 800335c:	e7d4      	b.n	8003308 <_free_r+0x24>
 800335e:	6820      	ldr	r0, [r4, #0]
 8003360:	1821      	adds	r1, r4, r0
 8003362:	428a      	cmp	r2, r1
 8003364:	bf01      	itttt	eq
 8003366:	6811      	ldreq	r1, [r2, #0]
 8003368:	6852      	ldreq	r2, [r2, #4]
 800336a:	1809      	addeq	r1, r1, r0
 800336c:	6021      	streq	r1, [r4, #0]
 800336e:	6062      	str	r2, [r4, #4]
 8003370:	605c      	str	r4, [r3, #4]
 8003372:	e7c9      	b.n	8003308 <_free_r+0x24>
 8003374:	bd38      	pop	{r3, r4, r5, pc}
 8003376:	bf00      	nop
 8003378:	20000090 	.word	0x20000090

0800337c <_malloc_r>:
 800337c:	b570      	push	{r4, r5, r6, lr}
 800337e:	1ccd      	adds	r5, r1, #3
 8003380:	f025 0503 	bic.w	r5, r5, #3
 8003384:	3508      	adds	r5, #8
 8003386:	2d0c      	cmp	r5, #12
 8003388:	bf38      	it	cc
 800338a:	250c      	movcc	r5, #12
 800338c:	2d00      	cmp	r5, #0
 800338e:	4606      	mov	r6, r0
 8003390:	db01      	blt.n	8003396 <_malloc_r+0x1a>
 8003392:	42a9      	cmp	r1, r5
 8003394:	d903      	bls.n	800339e <_malloc_r+0x22>
 8003396:	230c      	movs	r3, #12
 8003398:	6033      	str	r3, [r6, #0]
 800339a:	2000      	movs	r0, #0
 800339c:	bd70      	pop	{r4, r5, r6, pc}
 800339e:	f000 fbc5 	bl	8003b2c <__malloc_lock>
 80033a2:	4a21      	ldr	r2, [pc, #132]	; (8003428 <_malloc_r+0xac>)
 80033a4:	6814      	ldr	r4, [r2, #0]
 80033a6:	4621      	mov	r1, r4
 80033a8:	b991      	cbnz	r1, 80033d0 <_malloc_r+0x54>
 80033aa:	4c20      	ldr	r4, [pc, #128]	; (800342c <_malloc_r+0xb0>)
 80033ac:	6823      	ldr	r3, [r4, #0]
 80033ae:	b91b      	cbnz	r3, 80033b8 <_malloc_r+0x3c>
 80033b0:	4630      	mov	r0, r6
 80033b2:	f000 fb03 	bl	80039bc <_sbrk_r>
 80033b6:	6020      	str	r0, [r4, #0]
 80033b8:	4629      	mov	r1, r5
 80033ba:	4630      	mov	r0, r6
 80033bc:	f000 fafe 	bl	80039bc <_sbrk_r>
 80033c0:	1c43      	adds	r3, r0, #1
 80033c2:	d124      	bne.n	800340e <_malloc_r+0x92>
 80033c4:	230c      	movs	r3, #12
 80033c6:	4630      	mov	r0, r6
 80033c8:	6033      	str	r3, [r6, #0]
 80033ca:	f000 fbb0 	bl	8003b2e <__malloc_unlock>
 80033ce:	e7e4      	b.n	800339a <_malloc_r+0x1e>
 80033d0:	680b      	ldr	r3, [r1, #0]
 80033d2:	1b5b      	subs	r3, r3, r5
 80033d4:	d418      	bmi.n	8003408 <_malloc_r+0x8c>
 80033d6:	2b0b      	cmp	r3, #11
 80033d8:	d90f      	bls.n	80033fa <_malloc_r+0x7e>
 80033da:	600b      	str	r3, [r1, #0]
 80033dc:	18cc      	adds	r4, r1, r3
 80033de:	50cd      	str	r5, [r1, r3]
 80033e0:	4630      	mov	r0, r6
 80033e2:	f000 fba4 	bl	8003b2e <__malloc_unlock>
 80033e6:	f104 000b 	add.w	r0, r4, #11
 80033ea:	1d23      	adds	r3, r4, #4
 80033ec:	f020 0007 	bic.w	r0, r0, #7
 80033f0:	1ac3      	subs	r3, r0, r3
 80033f2:	d0d3      	beq.n	800339c <_malloc_r+0x20>
 80033f4:	425a      	negs	r2, r3
 80033f6:	50e2      	str	r2, [r4, r3]
 80033f8:	e7d0      	b.n	800339c <_malloc_r+0x20>
 80033fa:	684b      	ldr	r3, [r1, #4]
 80033fc:	428c      	cmp	r4, r1
 80033fe:	bf16      	itet	ne
 8003400:	6063      	strne	r3, [r4, #4]
 8003402:	6013      	streq	r3, [r2, #0]
 8003404:	460c      	movne	r4, r1
 8003406:	e7eb      	b.n	80033e0 <_malloc_r+0x64>
 8003408:	460c      	mov	r4, r1
 800340a:	6849      	ldr	r1, [r1, #4]
 800340c:	e7cc      	b.n	80033a8 <_malloc_r+0x2c>
 800340e:	1cc4      	adds	r4, r0, #3
 8003410:	f024 0403 	bic.w	r4, r4, #3
 8003414:	42a0      	cmp	r0, r4
 8003416:	d005      	beq.n	8003424 <_malloc_r+0xa8>
 8003418:	1a21      	subs	r1, r4, r0
 800341a:	4630      	mov	r0, r6
 800341c:	f000 face 	bl	80039bc <_sbrk_r>
 8003420:	3001      	adds	r0, #1
 8003422:	d0cf      	beq.n	80033c4 <_malloc_r+0x48>
 8003424:	6025      	str	r5, [r4, #0]
 8003426:	e7db      	b.n	80033e0 <_malloc_r+0x64>
 8003428:	20000090 	.word	0x20000090
 800342c:	20000094 	.word	0x20000094

08003430 <__sfputc_r>:
 8003430:	6893      	ldr	r3, [r2, #8]
 8003432:	b410      	push	{r4}
 8003434:	3b01      	subs	r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	6093      	str	r3, [r2, #8]
 800343a:	da07      	bge.n	800344c <__sfputc_r+0x1c>
 800343c:	6994      	ldr	r4, [r2, #24]
 800343e:	42a3      	cmp	r3, r4
 8003440:	db01      	blt.n	8003446 <__sfputc_r+0x16>
 8003442:	290a      	cmp	r1, #10
 8003444:	d102      	bne.n	800344c <__sfputc_r+0x1c>
 8003446:	bc10      	pop	{r4}
 8003448:	f7ff bcae 	b.w	8002da8 <__swbuf_r>
 800344c:	6813      	ldr	r3, [r2, #0]
 800344e:	1c58      	adds	r0, r3, #1
 8003450:	6010      	str	r0, [r2, #0]
 8003452:	7019      	strb	r1, [r3, #0]
 8003454:	4608      	mov	r0, r1
 8003456:	bc10      	pop	{r4}
 8003458:	4770      	bx	lr

0800345a <__sfputs_r>:
 800345a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800345c:	4606      	mov	r6, r0
 800345e:	460f      	mov	r7, r1
 8003460:	4614      	mov	r4, r2
 8003462:	18d5      	adds	r5, r2, r3
 8003464:	42ac      	cmp	r4, r5
 8003466:	d101      	bne.n	800346c <__sfputs_r+0x12>
 8003468:	2000      	movs	r0, #0
 800346a:	e007      	b.n	800347c <__sfputs_r+0x22>
 800346c:	463a      	mov	r2, r7
 800346e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003472:	4630      	mov	r0, r6
 8003474:	f7ff ffdc 	bl	8003430 <__sfputc_r>
 8003478:	1c43      	adds	r3, r0, #1
 800347a:	d1f3      	bne.n	8003464 <__sfputs_r+0xa>
 800347c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003480 <_vfiprintf_r>:
 8003480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003484:	460c      	mov	r4, r1
 8003486:	b09d      	sub	sp, #116	; 0x74
 8003488:	4617      	mov	r7, r2
 800348a:	461d      	mov	r5, r3
 800348c:	4606      	mov	r6, r0
 800348e:	b118      	cbz	r0, 8003498 <_vfiprintf_r+0x18>
 8003490:	6983      	ldr	r3, [r0, #24]
 8003492:	b90b      	cbnz	r3, 8003498 <_vfiprintf_r+0x18>
 8003494:	f7ff fe38 	bl	8003108 <__sinit>
 8003498:	4b7c      	ldr	r3, [pc, #496]	; (800368c <_vfiprintf_r+0x20c>)
 800349a:	429c      	cmp	r4, r3
 800349c:	d158      	bne.n	8003550 <_vfiprintf_r+0xd0>
 800349e:	6874      	ldr	r4, [r6, #4]
 80034a0:	89a3      	ldrh	r3, [r4, #12]
 80034a2:	0718      	lsls	r0, r3, #28
 80034a4:	d55e      	bpl.n	8003564 <_vfiprintf_r+0xe4>
 80034a6:	6923      	ldr	r3, [r4, #16]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d05b      	beq.n	8003564 <_vfiprintf_r+0xe4>
 80034ac:	2300      	movs	r3, #0
 80034ae:	9309      	str	r3, [sp, #36]	; 0x24
 80034b0:	2320      	movs	r3, #32
 80034b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034b6:	2330      	movs	r3, #48	; 0x30
 80034b8:	f04f 0b01 	mov.w	fp, #1
 80034bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034c0:	9503      	str	r5, [sp, #12]
 80034c2:	46b8      	mov	r8, r7
 80034c4:	4645      	mov	r5, r8
 80034c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80034ca:	b10b      	cbz	r3, 80034d0 <_vfiprintf_r+0x50>
 80034cc:	2b25      	cmp	r3, #37	; 0x25
 80034ce:	d154      	bne.n	800357a <_vfiprintf_r+0xfa>
 80034d0:	ebb8 0a07 	subs.w	sl, r8, r7
 80034d4:	d00b      	beq.n	80034ee <_vfiprintf_r+0x6e>
 80034d6:	4653      	mov	r3, sl
 80034d8:	463a      	mov	r2, r7
 80034da:	4621      	mov	r1, r4
 80034dc:	4630      	mov	r0, r6
 80034de:	f7ff ffbc 	bl	800345a <__sfputs_r>
 80034e2:	3001      	adds	r0, #1
 80034e4:	f000 80c2 	beq.w	800366c <_vfiprintf_r+0x1ec>
 80034e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034ea:	4453      	add	r3, sl
 80034ec:	9309      	str	r3, [sp, #36]	; 0x24
 80034ee:	f898 3000 	ldrb.w	r3, [r8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 80ba 	beq.w	800366c <_vfiprintf_r+0x1ec>
 80034f8:	2300      	movs	r3, #0
 80034fa:	f04f 32ff 	mov.w	r2, #4294967295
 80034fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003502:	9304      	str	r3, [sp, #16]
 8003504:	9307      	str	r3, [sp, #28]
 8003506:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800350a:	931a      	str	r3, [sp, #104]	; 0x68
 800350c:	46a8      	mov	r8, r5
 800350e:	2205      	movs	r2, #5
 8003510:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003514:	485e      	ldr	r0, [pc, #376]	; (8003690 <_vfiprintf_r+0x210>)
 8003516:	f000 fafb 	bl	8003b10 <memchr>
 800351a:	9b04      	ldr	r3, [sp, #16]
 800351c:	bb78      	cbnz	r0, 800357e <_vfiprintf_r+0xfe>
 800351e:	06d9      	lsls	r1, r3, #27
 8003520:	bf44      	itt	mi
 8003522:	2220      	movmi	r2, #32
 8003524:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003528:	071a      	lsls	r2, r3, #28
 800352a:	bf44      	itt	mi
 800352c:	222b      	movmi	r2, #43	; 0x2b
 800352e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003532:	782a      	ldrb	r2, [r5, #0]
 8003534:	2a2a      	cmp	r2, #42	; 0x2a
 8003536:	d02a      	beq.n	800358e <_vfiprintf_r+0x10e>
 8003538:	46a8      	mov	r8, r5
 800353a:	2000      	movs	r0, #0
 800353c:	250a      	movs	r5, #10
 800353e:	9a07      	ldr	r2, [sp, #28]
 8003540:	4641      	mov	r1, r8
 8003542:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003546:	3b30      	subs	r3, #48	; 0x30
 8003548:	2b09      	cmp	r3, #9
 800354a:	d969      	bls.n	8003620 <_vfiprintf_r+0x1a0>
 800354c:	b360      	cbz	r0, 80035a8 <_vfiprintf_r+0x128>
 800354e:	e024      	b.n	800359a <_vfiprintf_r+0x11a>
 8003550:	4b50      	ldr	r3, [pc, #320]	; (8003694 <_vfiprintf_r+0x214>)
 8003552:	429c      	cmp	r4, r3
 8003554:	d101      	bne.n	800355a <_vfiprintf_r+0xda>
 8003556:	68b4      	ldr	r4, [r6, #8]
 8003558:	e7a2      	b.n	80034a0 <_vfiprintf_r+0x20>
 800355a:	4b4f      	ldr	r3, [pc, #316]	; (8003698 <_vfiprintf_r+0x218>)
 800355c:	429c      	cmp	r4, r3
 800355e:	bf08      	it	eq
 8003560:	68f4      	ldreq	r4, [r6, #12]
 8003562:	e79d      	b.n	80034a0 <_vfiprintf_r+0x20>
 8003564:	4621      	mov	r1, r4
 8003566:	4630      	mov	r0, r6
 8003568:	f7ff fc70 	bl	8002e4c <__swsetup_r>
 800356c:	2800      	cmp	r0, #0
 800356e:	d09d      	beq.n	80034ac <_vfiprintf_r+0x2c>
 8003570:	f04f 30ff 	mov.w	r0, #4294967295
 8003574:	b01d      	add	sp, #116	; 0x74
 8003576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800357a:	46a8      	mov	r8, r5
 800357c:	e7a2      	b.n	80034c4 <_vfiprintf_r+0x44>
 800357e:	4a44      	ldr	r2, [pc, #272]	; (8003690 <_vfiprintf_r+0x210>)
 8003580:	4645      	mov	r5, r8
 8003582:	1a80      	subs	r0, r0, r2
 8003584:	fa0b f000 	lsl.w	r0, fp, r0
 8003588:	4318      	orrs	r0, r3
 800358a:	9004      	str	r0, [sp, #16]
 800358c:	e7be      	b.n	800350c <_vfiprintf_r+0x8c>
 800358e:	9a03      	ldr	r2, [sp, #12]
 8003590:	1d11      	adds	r1, r2, #4
 8003592:	6812      	ldr	r2, [r2, #0]
 8003594:	9103      	str	r1, [sp, #12]
 8003596:	2a00      	cmp	r2, #0
 8003598:	db01      	blt.n	800359e <_vfiprintf_r+0x11e>
 800359a:	9207      	str	r2, [sp, #28]
 800359c:	e004      	b.n	80035a8 <_vfiprintf_r+0x128>
 800359e:	4252      	negs	r2, r2
 80035a0:	f043 0302 	orr.w	r3, r3, #2
 80035a4:	9207      	str	r2, [sp, #28]
 80035a6:	9304      	str	r3, [sp, #16]
 80035a8:	f898 3000 	ldrb.w	r3, [r8]
 80035ac:	2b2e      	cmp	r3, #46	; 0x2e
 80035ae:	d10e      	bne.n	80035ce <_vfiprintf_r+0x14e>
 80035b0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80035b4:	2b2a      	cmp	r3, #42	; 0x2a
 80035b6:	d138      	bne.n	800362a <_vfiprintf_r+0x1aa>
 80035b8:	9b03      	ldr	r3, [sp, #12]
 80035ba:	f108 0802 	add.w	r8, r8, #2
 80035be:	1d1a      	adds	r2, r3, #4
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	9203      	str	r2, [sp, #12]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	bfb8      	it	lt
 80035c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80035cc:	9305      	str	r3, [sp, #20]
 80035ce:	4d33      	ldr	r5, [pc, #204]	; (800369c <_vfiprintf_r+0x21c>)
 80035d0:	2203      	movs	r2, #3
 80035d2:	f898 1000 	ldrb.w	r1, [r8]
 80035d6:	4628      	mov	r0, r5
 80035d8:	f000 fa9a 	bl	8003b10 <memchr>
 80035dc:	b140      	cbz	r0, 80035f0 <_vfiprintf_r+0x170>
 80035de:	2340      	movs	r3, #64	; 0x40
 80035e0:	1b40      	subs	r0, r0, r5
 80035e2:	fa03 f000 	lsl.w	r0, r3, r0
 80035e6:	9b04      	ldr	r3, [sp, #16]
 80035e8:	f108 0801 	add.w	r8, r8, #1
 80035ec:	4303      	orrs	r3, r0
 80035ee:	9304      	str	r3, [sp, #16]
 80035f0:	f898 1000 	ldrb.w	r1, [r8]
 80035f4:	2206      	movs	r2, #6
 80035f6:	482a      	ldr	r0, [pc, #168]	; (80036a0 <_vfiprintf_r+0x220>)
 80035f8:	f108 0701 	add.w	r7, r8, #1
 80035fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003600:	f000 fa86 	bl	8003b10 <memchr>
 8003604:	2800      	cmp	r0, #0
 8003606:	d037      	beq.n	8003678 <_vfiprintf_r+0x1f8>
 8003608:	4b26      	ldr	r3, [pc, #152]	; (80036a4 <_vfiprintf_r+0x224>)
 800360a:	bb1b      	cbnz	r3, 8003654 <_vfiprintf_r+0x1d4>
 800360c:	9b03      	ldr	r3, [sp, #12]
 800360e:	3307      	adds	r3, #7
 8003610:	f023 0307 	bic.w	r3, r3, #7
 8003614:	3308      	adds	r3, #8
 8003616:	9303      	str	r3, [sp, #12]
 8003618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800361a:	444b      	add	r3, r9
 800361c:	9309      	str	r3, [sp, #36]	; 0x24
 800361e:	e750      	b.n	80034c2 <_vfiprintf_r+0x42>
 8003620:	fb05 3202 	mla	r2, r5, r2, r3
 8003624:	2001      	movs	r0, #1
 8003626:	4688      	mov	r8, r1
 8003628:	e78a      	b.n	8003540 <_vfiprintf_r+0xc0>
 800362a:	2300      	movs	r3, #0
 800362c:	250a      	movs	r5, #10
 800362e:	4619      	mov	r1, r3
 8003630:	f108 0801 	add.w	r8, r8, #1
 8003634:	9305      	str	r3, [sp, #20]
 8003636:	4640      	mov	r0, r8
 8003638:	f810 2b01 	ldrb.w	r2, [r0], #1
 800363c:	3a30      	subs	r2, #48	; 0x30
 800363e:	2a09      	cmp	r2, #9
 8003640:	d903      	bls.n	800364a <_vfiprintf_r+0x1ca>
 8003642:	2b00      	cmp	r3, #0
 8003644:	d0c3      	beq.n	80035ce <_vfiprintf_r+0x14e>
 8003646:	9105      	str	r1, [sp, #20]
 8003648:	e7c1      	b.n	80035ce <_vfiprintf_r+0x14e>
 800364a:	fb05 2101 	mla	r1, r5, r1, r2
 800364e:	2301      	movs	r3, #1
 8003650:	4680      	mov	r8, r0
 8003652:	e7f0      	b.n	8003636 <_vfiprintf_r+0x1b6>
 8003654:	ab03      	add	r3, sp, #12
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	4622      	mov	r2, r4
 800365a:	4b13      	ldr	r3, [pc, #76]	; (80036a8 <_vfiprintf_r+0x228>)
 800365c:	a904      	add	r1, sp, #16
 800365e:	4630      	mov	r0, r6
 8003660:	f3af 8000 	nop.w
 8003664:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003668:	4681      	mov	r9, r0
 800366a:	d1d5      	bne.n	8003618 <_vfiprintf_r+0x198>
 800366c:	89a3      	ldrh	r3, [r4, #12]
 800366e:	065b      	lsls	r3, r3, #25
 8003670:	f53f af7e 	bmi.w	8003570 <_vfiprintf_r+0xf0>
 8003674:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003676:	e77d      	b.n	8003574 <_vfiprintf_r+0xf4>
 8003678:	ab03      	add	r3, sp, #12
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	4622      	mov	r2, r4
 800367e:	4b0a      	ldr	r3, [pc, #40]	; (80036a8 <_vfiprintf_r+0x228>)
 8003680:	a904      	add	r1, sp, #16
 8003682:	4630      	mov	r0, r6
 8003684:	f000 f888 	bl	8003798 <_printf_i>
 8003688:	e7ec      	b.n	8003664 <_vfiprintf_r+0x1e4>
 800368a:	bf00      	nop
 800368c:	08003c8c 	.word	0x08003c8c
 8003690:	08003ccc 	.word	0x08003ccc
 8003694:	08003cac 	.word	0x08003cac
 8003698:	08003c6c 	.word	0x08003c6c
 800369c:	08003cd2 	.word	0x08003cd2
 80036a0:	08003cd6 	.word	0x08003cd6
 80036a4:	00000000 	.word	0x00000000
 80036a8:	0800345b 	.word	0x0800345b

080036ac <_printf_common>:
 80036ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036b0:	4691      	mov	r9, r2
 80036b2:	461f      	mov	r7, r3
 80036b4:	688a      	ldr	r2, [r1, #8]
 80036b6:	690b      	ldr	r3, [r1, #16]
 80036b8:	4606      	mov	r6, r0
 80036ba:	4293      	cmp	r3, r2
 80036bc:	bfb8      	it	lt
 80036be:	4613      	movlt	r3, r2
 80036c0:	f8c9 3000 	str.w	r3, [r9]
 80036c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036c8:	460c      	mov	r4, r1
 80036ca:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036ce:	b112      	cbz	r2, 80036d6 <_printf_common+0x2a>
 80036d0:	3301      	adds	r3, #1
 80036d2:	f8c9 3000 	str.w	r3, [r9]
 80036d6:	6823      	ldr	r3, [r4, #0]
 80036d8:	0699      	lsls	r1, r3, #26
 80036da:	bf42      	ittt	mi
 80036dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80036e0:	3302      	addmi	r3, #2
 80036e2:	f8c9 3000 	strmi.w	r3, [r9]
 80036e6:	6825      	ldr	r5, [r4, #0]
 80036e8:	f015 0506 	ands.w	r5, r5, #6
 80036ec:	d107      	bne.n	80036fe <_printf_common+0x52>
 80036ee:	f104 0a19 	add.w	sl, r4, #25
 80036f2:	68e3      	ldr	r3, [r4, #12]
 80036f4:	f8d9 2000 	ldr.w	r2, [r9]
 80036f8:	1a9b      	subs	r3, r3, r2
 80036fa:	42ab      	cmp	r3, r5
 80036fc:	dc29      	bgt.n	8003752 <_printf_common+0xa6>
 80036fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003702:	6822      	ldr	r2, [r4, #0]
 8003704:	3300      	adds	r3, #0
 8003706:	bf18      	it	ne
 8003708:	2301      	movne	r3, #1
 800370a:	0692      	lsls	r2, r2, #26
 800370c:	d42e      	bmi.n	800376c <_printf_common+0xc0>
 800370e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003712:	4639      	mov	r1, r7
 8003714:	4630      	mov	r0, r6
 8003716:	47c0      	blx	r8
 8003718:	3001      	adds	r0, #1
 800371a:	d021      	beq.n	8003760 <_printf_common+0xb4>
 800371c:	6823      	ldr	r3, [r4, #0]
 800371e:	68e5      	ldr	r5, [r4, #12]
 8003720:	f003 0306 	and.w	r3, r3, #6
 8003724:	2b04      	cmp	r3, #4
 8003726:	bf18      	it	ne
 8003728:	2500      	movne	r5, #0
 800372a:	f8d9 2000 	ldr.w	r2, [r9]
 800372e:	f04f 0900 	mov.w	r9, #0
 8003732:	bf08      	it	eq
 8003734:	1aad      	subeq	r5, r5, r2
 8003736:	68a3      	ldr	r3, [r4, #8]
 8003738:	6922      	ldr	r2, [r4, #16]
 800373a:	bf08      	it	eq
 800373c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003740:	4293      	cmp	r3, r2
 8003742:	bfc4      	itt	gt
 8003744:	1a9b      	subgt	r3, r3, r2
 8003746:	18ed      	addgt	r5, r5, r3
 8003748:	341a      	adds	r4, #26
 800374a:	454d      	cmp	r5, r9
 800374c:	d11a      	bne.n	8003784 <_printf_common+0xd8>
 800374e:	2000      	movs	r0, #0
 8003750:	e008      	b.n	8003764 <_printf_common+0xb8>
 8003752:	2301      	movs	r3, #1
 8003754:	4652      	mov	r2, sl
 8003756:	4639      	mov	r1, r7
 8003758:	4630      	mov	r0, r6
 800375a:	47c0      	blx	r8
 800375c:	3001      	adds	r0, #1
 800375e:	d103      	bne.n	8003768 <_printf_common+0xbc>
 8003760:	f04f 30ff 	mov.w	r0, #4294967295
 8003764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003768:	3501      	adds	r5, #1
 800376a:	e7c2      	b.n	80036f2 <_printf_common+0x46>
 800376c:	2030      	movs	r0, #48	; 0x30
 800376e:	18e1      	adds	r1, r4, r3
 8003770:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003774:	1c5a      	adds	r2, r3, #1
 8003776:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800377a:	4422      	add	r2, r4
 800377c:	3302      	adds	r3, #2
 800377e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003782:	e7c4      	b.n	800370e <_printf_common+0x62>
 8003784:	2301      	movs	r3, #1
 8003786:	4622      	mov	r2, r4
 8003788:	4639      	mov	r1, r7
 800378a:	4630      	mov	r0, r6
 800378c:	47c0      	blx	r8
 800378e:	3001      	adds	r0, #1
 8003790:	d0e6      	beq.n	8003760 <_printf_common+0xb4>
 8003792:	f109 0901 	add.w	r9, r9, #1
 8003796:	e7d8      	b.n	800374a <_printf_common+0x9e>

08003798 <_printf_i>:
 8003798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800379c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80037a0:	460c      	mov	r4, r1
 80037a2:	7e09      	ldrb	r1, [r1, #24]
 80037a4:	b085      	sub	sp, #20
 80037a6:	296e      	cmp	r1, #110	; 0x6e
 80037a8:	4617      	mov	r7, r2
 80037aa:	4606      	mov	r6, r0
 80037ac:	4698      	mov	r8, r3
 80037ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80037b0:	f000 80b3 	beq.w	800391a <_printf_i+0x182>
 80037b4:	d822      	bhi.n	80037fc <_printf_i+0x64>
 80037b6:	2963      	cmp	r1, #99	; 0x63
 80037b8:	d036      	beq.n	8003828 <_printf_i+0x90>
 80037ba:	d80a      	bhi.n	80037d2 <_printf_i+0x3a>
 80037bc:	2900      	cmp	r1, #0
 80037be:	f000 80b9 	beq.w	8003934 <_printf_i+0x19c>
 80037c2:	2958      	cmp	r1, #88	; 0x58
 80037c4:	f000 8083 	beq.w	80038ce <_printf_i+0x136>
 80037c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037cc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80037d0:	e032      	b.n	8003838 <_printf_i+0xa0>
 80037d2:	2964      	cmp	r1, #100	; 0x64
 80037d4:	d001      	beq.n	80037da <_printf_i+0x42>
 80037d6:	2969      	cmp	r1, #105	; 0x69
 80037d8:	d1f6      	bne.n	80037c8 <_printf_i+0x30>
 80037da:	6820      	ldr	r0, [r4, #0]
 80037dc:	6813      	ldr	r3, [r2, #0]
 80037de:	0605      	lsls	r5, r0, #24
 80037e0:	f103 0104 	add.w	r1, r3, #4
 80037e4:	d52a      	bpl.n	800383c <_printf_i+0xa4>
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6011      	str	r1, [r2, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	da03      	bge.n	80037f6 <_printf_i+0x5e>
 80037ee:	222d      	movs	r2, #45	; 0x2d
 80037f0:	425b      	negs	r3, r3
 80037f2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80037f6:	486f      	ldr	r0, [pc, #444]	; (80039b4 <_printf_i+0x21c>)
 80037f8:	220a      	movs	r2, #10
 80037fa:	e039      	b.n	8003870 <_printf_i+0xd8>
 80037fc:	2973      	cmp	r1, #115	; 0x73
 80037fe:	f000 809d 	beq.w	800393c <_printf_i+0x1a4>
 8003802:	d808      	bhi.n	8003816 <_printf_i+0x7e>
 8003804:	296f      	cmp	r1, #111	; 0x6f
 8003806:	d020      	beq.n	800384a <_printf_i+0xb2>
 8003808:	2970      	cmp	r1, #112	; 0x70
 800380a:	d1dd      	bne.n	80037c8 <_printf_i+0x30>
 800380c:	6823      	ldr	r3, [r4, #0]
 800380e:	f043 0320 	orr.w	r3, r3, #32
 8003812:	6023      	str	r3, [r4, #0]
 8003814:	e003      	b.n	800381e <_printf_i+0x86>
 8003816:	2975      	cmp	r1, #117	; 0x75
 8003818:	d017      	beq.n	800384a <_printf_i+0xb2>
 800381a:	2978      	cmp	r1, #120	; 0x78
 800381c:	d1d4      	bne.n	80037c8 <_printf_i+0x30>
 800381e:	2378      	movs	r3, #120	; 0x78
 8003820:	4865      	ldr	r0, [pc, #404]	; (80039b8 <_printf_i+0x220>)
 8003822:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003826:	e055      	b.n	80038d4 <_printf_i+0x13c>
 8003828:	6813      	ldr	r3, [r2, #0]
 800382a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800382e:	1d19      	adds	r1, r3, #4
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6011      	str	r1, [r2, #0]
 8003834:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003838:	2301      	movs	r3, #1
 800383a:	e08c      	b.n	8003956 <_printf_i+0x1be>
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003842:	6011      	str	r1, [r2, #0]
 8003844:	bf18      	it	ne
 8003846:	b21b      	sxthne	r3, r3
 8003848:	e7cf      	b.n	80037ea <_printf_i+0x52>
 800384a:	6813      	ldr	r3, [r2, #0]
 800384c:	6825      	ldr	r5, [r4, #0]
 800384e:	1d18      	adds	r0, r3, #4
 8003850:	6010      	str	r0, [r2, #0]
 8003852:	0628      	lsls	r0, r5, #24
 8003854:	d501      	bpl.n	800385a <_printf_i+0xc2>
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	e002      	b.n	8003860 <_printf_i+0xc8>
 800385a:	0668      	lsls	r0, r5, #25
 800385c:	d5fb      	bpl.n	8003856 <_printf_i+0xbe>
 800385e:	881b      	ldrh	r3, [r3, #0]
 8003860:	296f      	cmp	r1, #111	; 0x6f
 8003862:	bf14      	ite	ne
 8003864:	220a      	movne	r2, #10
 8003866:	2208      	moveq	r2, #8
 8003868:	4852      	ldr	r0, [pc, #328]	; (80039b4 <_printf_i+0x21c>)
 800386a:	2100      	movs	r1, #0
 800386c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003870:	6865      	ldr	r5, [r4, #4]
 8003872:	2d00      	cmp	r5, #0
 8003874:	60a5      	str	r5, [r4, #8]
 8003876:	f2c0 8095 	blt.w	80039a4 <_printf_i+0x20c>
 800387a:	6821      	ldr	r1, [r4, #0]
 800387c:	f021 0104 	bic.w	r1, r1, #4
 8003880:	6021      	str	r1, [r4, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d13d      	bne.n	8003902 <_printf_i+0x16a>
 8003886:	2d00      	cmp	r5, #0
 8003888:	f040 808e 	bne.w	80039a8 <_printf_i+0x210>
 800388c:	4665      	mov	r5, ip
 800388e:	2a08      	cmp	r2, #8
 8003890:	d10b      	bne.n	80038aa <_printf_i+0x112>
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	07db      	lsls	r3, r3, #31
 8003896:	d508      	bpl.n	80038aa <_printf_i+0x112>
 8003898:	6923      	ldr	r3, [r4, #16]
 800389a:	6862      	ldr	r2, [r4, #4]
 800389c:	429a      	cmp	r2, r3
 800389e:	bfde      	ittt	le
 80038a0:	2330      	movle	r3, #48	; 0x30
 80038a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80038aa:	ebac 0305 	sub.w	r3, ip, r5
 80038ae:	6123      	str	r3, [r4, #16]
 80038b0:	f8cd 8000 	str.w	r8, [sp]
 80038b4:	463b      	mov	r3, r7
 80038b6:	aa03      	add	r2, sp, #12
 80038b8:	4621      	mov	r1, r4
 80038ba:	4630      	mov	r0, r6
 80038bc:	f7ff fef6 	bl	80036ac <_printf_common>
 80038c0:	3001      	adds	r0, #1
 80038c2:	d14d      	bne.n	8003960 <_printf_i+0x1c8>
 80038c4:	f04f 30ff 	mov.w	r0, #4294967295
 80038c8:	b005      	add	sp, #20
 80038ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80038ce:	4839      	ldr	r0, [pc, #228]	; (80039b4 <_printf_i+0x21c>)
 80038d0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80038d4:	6813      	ldr	r3, [r2, #0]
 80038d6:	6821      	ldr	r1, [r4, #0]
 80038d8:	1d1d      	adds	r5, r3, #4
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6015      	str	r5, [r2, #0]
 80038de:	060a      	lsls	r2, r1, #24
 80038e0:	d50b      	bpl.n	80038fa <_printf_i+0x162>
 80038e2:	07ca      	lsls	r2, r1, #31
 80038e4:	bf44      	itt	mi
 80038e6:	f041 0120 	orrmi.w	r1, r1, #32
 80038ea:	6021      	strmi	r1, [r4, #0]
 80038ec:	b91b      	cbnz	r3, 80038f6 <_printf_i+0x15e>
 80038ee:	6822      	ldr	r2, [r4, #0]
 80038f0:	f022 0220 	bic.w	r2, r2, #32
 80038f4:	6022      	str	r2, [r4, #0]
 80038f6:	2210      	movs	r2, #16
 80038f8:	e7b7      	b.n	800386a <_printf_i+0xd2>
 80038fa:	064d      	lsls	r5, r1, #25
 80038fc:	bf48      	it	mi
 80038fe:	b29b      	uxthmi	r3, r3
 8003900:	e7ef      	b.n	80038e2 <_printf_i+0x14a>
 8003902:	4665      	mov	r5, ip
 8003904:	fbb3 f1f2 	udiv	r1, r3, r2
 8003908:	fb02 3311 	mls	r3, r2, r1, r3
 800390c:	5cc3      	ldrb	r3, [r0, r3]
 800390e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003912:	460b      	mov	r3, r1
 8003914:	2900      	cmp	r1, #0
 8003916:	d1f5      	bne.n	8003904 <_printf_i+0x16c>
 8003918:	e7b9      	b.n	800388e <_printf_i+0xf6>
 800391a:	6813      	ldr	r3, [r2, #0]
 800391c:	6825      	ldr	r5, [r4, #0]
 800391e:	1d18      	adds	r0, r3, #4
 8003920:	6961      	ldr	r1, [r4, #20]
 8003922:	6010      	str	r0, [r2, #0]
 8003924:	0628      	lsls	r0, r5, #24
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	d501      	bpl.n	800392e <_printf_i+0x196>
 800392a:	6019      	str	r1, [r3, #0]
 800392c:	e002      	b.n	8003934 <_printf_i+0x19c>
 800392e:	066a      	lsls	r2, r5, #25
 8003930:	d5fb      	bpl.n	800392a <_printf_i+0x192>
 8003932:	8019      	strh	r1, [r3, #0]
 8003934:	2300      	movs	r3, #0
 8003936:	4665      	mov	r5, ip
 8003938:	6123      	str	r3, [r4, #16]
 800393a:	e7b9      	b.n	80038b0 <_printf_i+0x118>
 800393c:	6813      	ldr	r3, [r2, #0]
 800393e:	1d19      	adds	r1, r3, #4
 8003940:	6011      	str	r1, [r2, #0]
 8003942:	681d      	ldr	r5, [r3, #0]
 8003944:	6862      	ldr	r2, [r4, #4]
 8003946:	2100      	movs	r1, #0
 8003948:	4628      	mov	r0, r5
 800394a:	f000 f8e1 	bl	8003b10 <memchr>
 800394e:	b108      	cbz	r0, 8003954 <_printf_i+0x1bc>
 8003950:	1b40      	subs	r0, r0, r5
 8003952:	6060      	str	r0, [r4, #4]
 8003954:	6863      	ldr	r3, [r4, #4]
 8003956:	6123      	str	r3, [r4, #16]
 8003958:	2300      	movs	r3, #0
 800395a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800395e:	e7a7      	b.n	80038b0 <_printf_i+0x118>
 8003960:	6923      	ldr	r3, [r4, #16]
 8003962:	462a      	mov	r2, r5
 8003964:	4639      	mov	r1, r7
 8003966:	4630      	mov	r0, r6
 8003968:	47c0      	blx	r8
 800396a:	3001      	adds	r0, #1
 800396c:	d0aa      	beq.n	80038c4 <_printf_i+0x12c>
 800396e:	6823      	ldr	r3, [r4, #0]
 8003970:	079b      	lsls	r3, r3, #30
 8003972:	d413      	bmi.n	800399c <_printf_i+0x204>
 8003974:	68e0      	ldr	r0, [r4, #12]
 8003976:	9b03      	ldr	r3, [sp, #12]
 8003978:	4298      	cmp	r0, r3
 800397a:	bfb8      	it	lt
 800397c:	4618      	movlt	r0, r3
 800397e:	e7a3      	b.n	80038c8 <_printf_i+0x130>
 8003980:	2301      	movs	r3, #1
 8003982:	464a      	mov	r2, r9
 8003984:	4639      	mov	r1, r7
 8003986:	4630      	mov	r0, r6
 8003988:	47c0      	blx	r8
 800398a:	3001      	adds	r0, #1
 800398c:	d09a      	beq.n	80038c4 <_printf_i+0x12c>
 800398e:	3501      	adds	r5, #1
 8003990:	68e3      	ldr	r3, [r4, #12]
 8003992:	9a03      	ldr	r2, [sp, #12]
 8003994:	1a9b      	subs	r3, r3, r2
 8003996:	42ab      	cmp	r3, r5
 8003998:	dcf2      	bgt.n	8003980 <_printf_i+0x1e8>
 800399a:	e7eb      	b.n	8003974 <_printf_i+0x1dc>
 800399c:	2500      	movs	r5, #0
 800399e:	f104 0919 	add.w	r9, r4, #25
 80039a2:	e7f5      	b.n	8003990 <_printf_i+0x1f8>
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1ac      	bne.n	8003902 <_printf_i+0x16a>
 80039a8:	7803      	ldrb	r3, [r0, #0]
 80039aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039b2:	e76c      	b.n	800388e <_printf_i+0xf6>
 80039b4:	08003cdd 	.word	0x08003cdd
 80039b8:	08003cee 	.word	0x08003cee

080039bc <_sbrk_r>:
 80039bc:	b538      	push	{r3, r4, r5, lr}
 80039be:	2300      	movs	r3, #0
 80039c0:	4c05      	ldr	r4, [pc, #20]	; (80039d8 <_sbrk_r+0x1c>)
 80039c2:	4605      	mov	r5, r0
 80039c4:	4608      	mov	r0, r1
 80039c6:	6023      	str	r3, [r4, #0]
 80039c8:	f7fd fbd0 	bl	800116c <_sbrk>
 80039cc:	1c43      	adds	r3, r0, #1
 80039ce:	d102      	bne.n	80039d6 <_sbrk_r+0x1a>
 80039d0:	6823      	ldr	r3, [r4, #0]
 80039d2:	b103      	cbz	r3, 80039d6 <_sbrk_r+0x1a>
 80039d4:	602b      	str	r3, [r5, #0]
 80039d6:	bd38      	pop	{r3, r4, r5, pc}
 80039d8:	20000260 	.word	0x20000260

080039dc <__sread>:
 80039dc:	b510      	push	{r4, lr}
 80039de:	460c      	mov	r4, r1
 80039e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039e4:	f000 f8a4 	bl	8003b30 <_read_r>
 80039e8:	2800      	cmp	r0, #0
 80039ea:	bfab      	itete	ge
 80039ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80039ee:	89a3      	ldrhlt	r3, [r4, #12]
 80039f0:	181b      	addge	r3, r3, r0
 80039f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80039f6:	bfac      	ite	ge
 80039f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80039fa:	81a3      	strhlt	r3, [r4, #12]
 80039fc:	bd10      	pop	{r4, pc}

080039fe <__swrite>:
 80039fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a02:	461f      	mov	r7, r3
 8003a04:	898b      	ldrh	r3, [r1, #12]
 8003a06:	4605      	mov	r5, r0
 8003a08:	05db      	lsls	r3, r3, #23
 8003a0a:	460c      	mov	r4, r1
 8003a0c:	4616      	mov	r6, r2
 8003a0e:	d505      	bpl.n	8003a1c <__swrite+0x1e>
 8003a10:	2302      	movs	r3, #2
 8003a12:	2200      	movs	r2, #0
 8003a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a18:	f000 f868 	bl	8003aec <_lseek_r>
 8003a1c:	89a3      	ldrh	r3, [r4, #12]
 8003a1e:	4632      	mov	r2, r6
 8003a20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a24:	81a3      	strh	r3, [r4, #12]
 8003a26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a2a:	463b      	mov	r3, r7
 8003a2c:	4628      	mov	r0, r5
 8003a2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a32:	f000 b817 	b.w	8003a64 <_write_r>

08003a36 <__sseek>:
 8003a36:	b510      	push	{r4, lr}
 8003a38:	460c      	mov	r4, r1
 8003a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a3e:	f000 f855 	bl	8003aec <_lseek_r>
 8003a42:	1c43      	adds	r3, r0, #1
 8003a44:	89a3      	ldrh	r3, [r4, #12]
 8003a46:	bf15      	itete	ne
 8003a48:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a52:	81a3      	strheq	r3, [r4, #12]
 8003a54:	bf18      	it	ne
 8003a56:	81a3      	strhne	r3, [r4, #12]
 8003a58:	bd10      	pop	{r4, pc}

08003a5a <__sclose>:
 8003a5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a5e:	f000 b813 	b.w	8003a88 <_close_r>
	...

08003a64 <_write_r>:
 8003a64:	b538      	push	{r3, r4, r5, lr}
 8003a66:	4605      	mov	r5, r0
 8003a68:	4608      	mov	r0, r1
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	4c05      	ldr	r4, [pc, #20]	; (8003a84 <_write_r+0x20>)
 8003a70:	6022      	str	r2, [r4, #0]
 8003a72:	461a      	mov	r2, r3
 8003a74:	f7fd fb2d 	bl	80010d2 <_write>
 8003a78:	1c43      	adds	r3, r0, #1
 8003a7a:	d102      	bne.n	8003a82 <_write_r+0x1e>
 8003a7c:	6823      	ldr	r3, [r4, #0]
 8003a7e:	b103      	cbz	r3, 8003a82 <_write_r+0x1e>
 8003a80:	602b      	str	r3, [r5, #0]
 8003a82:	bd38      	pop	{r3, r4, r5, pc}
 8003a84:	20000260 	.word	0x20000260

08003a88 <_close_r>:
 8003a88:	b538      	push	{r3, r4, r5, lr}
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	4c05      	ldr	r4, [pc, #20]	; (8003aa4 <_close_r+0x1c>)
 8003a8e:	4605      	mov	r5, r0
 8003a90:	4608      	mov	r0, r1
 8003a92:	6023      	str	r3, [r4, #0]
 8003a94:	f7fd fb39 	bl	800110a <_close>
 8003a98:	1c43      	adds	r3, r0, #1
 8003a9a:	d102      	bne.n	8003aa2 <_close_r+0x1a>
 8003a9c:	6823      	ldr	r3, [r4, #0]
 8003a9e:	b103      	cbz	r3, 8003aa2 <_close_r+0x1a>
 8003aa0:	602b      	str	r3, [r5, #0]
 8003aa2:	bd38      	pop	{r3, r4, r5, pc}
 8003aa4:	20000260 	.word	0x20000260

08003aa8 <_fstat_r>:
 8003aa8:	b538      	push	{r3, r4, r5, lr}
 8003aaa:	2300      	movs	r3, #0
 8003aac:	4c06      	ldr	r4, [pc, #24]	; (8003ac8 <_fstat_r+0x20>)
 8003aae:	4605      	mov	r5, r0
 8003ab0:	4608      	mov	r0, r1
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	6023      	str	r3, [r4, #0]
 8003ab6:	f7fd fb33 	bl	8001120 <_fstat>
 8003aba:	1c43      	adds	r3, r0, #1
 8003abc:	d102      	bne.n	8003ac4 <_fstat_r+0x1c>
 8003abe:	6823      	ldr	r3, [r4, #0]
 8003ac0:	b103      	cbz	r3, 8003ac4 <_fstat_r+0x1c>
 8003ac2:	602b      	str	r3, [r5, #0]
 8003ac4:	bd38      	pop	{r3, r4, r5, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20000260 	.word	0x20000260

08003acc <_isatty_r>:
 8003acc:	b538      	push	{r3, r4, r5, lr}
 8003ace:	2300      	movs	r3, #0
 8003ad0:	4c05      	ldr	r4, [pc, #20]	; (8003ae8 <_isatty_r+0x1c>)
 8003ad2:	4605      	mov	r5, r0
 8003ad4:	4608      	mov	r0, r1
 8003ad6:	6023      	str	r3, [r4, #0]
 8003ad8:	f7fd fb31 	bl	800113e <_isatty>
 8003adc:	1c43      	adds	r3, r0, #1
 8003ade:	d102      	bne.n	8003ae6 <_isatty_r+0x1a>
 8003ae0:	6823      	ldr	r3, [r4, #0]
 8003ae2:	b103      	cbz	r3, 8003ae6 <_isatty_r+0x1a>
 8003ae4:	602b      	str	r3, [r5, #0]
 8003ae6:	bd38      	pop	{r3, r4, r5, pc}
 8003ae8:	20000260 	.word	0x20000260

08003aec <_lseek_r>:
 8003aec:	b538      	push	{r3, r4, r5, lr}
 8003aee:	4605      	mov	r5, r0
 8003af0:	4608      	mov	r0, r1
 8003af2:	4611      	mov	r1, r2
 8003af4:	2200      	movs	r2, #0
 8003af6:	4c05      	ldr	r4, [pc, #20]	; (8003b0c <_lseek_r+0x20>)
 8003af8:	6022      	str	r2, [r4, #0]
 8003afa:	461a      	mov	r2, r3
 8003afc:	f7fd fb29 	bl	8001152 <_lseek>
 8003b00:	1c43      	adds	r3, r0, #1
 8003b02:	d102      	bne.n	8003b0a <_lseek_r+0x1e>
 8003b04:	6823      	ldr	r3, [r4, #0]
 8003b06:	b103      	cbz	r3, 8003b0a <_lseek_r+0x1e>
 8003b08:	602b      	str	r3, [r5, #0]
 8003b0a:	bd38      	pop	{r3, r4, r5, pc}
 8003b0c:	20000260 	.word	0x20000260

08003b10 <memchr>:
 8003b10:	b510      	push	{r4, lr}
 8003b12:	b2c9      	uxtb	r1, r1
 8003b14:	4402      	add	r2, r0
 8003b16:	4290      	cmp	r0, r2
 8003b18:	4603      	mov	r3, r0
 8003b1a:	d101      	bne.n	8003b20 <memchr+0x10>
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	e003      	b.n	8003b28 <memchr+0x18>
 8003b20:	781c      	ldrb	r4, [r3, #0]
 8003b22:	3001      	adds	r0, #1
 8003b24:	428c      	cmp	r4, r1
 8003b26:	d1f6      	bne.n	8003b16 <memchr+0x6>
 8003b28:	4618      	mov	r0, r3
 8003b2a:	bd10      	pop	{r4, pc}

08003b2c <__malloc_lock>:
 8003b2c:	4770      	bx	lr

08003b2e <__malloc_unlock>:
 8003b2e:	4770      	bx	lr

08003b30 <_read_r>:
 8003b30:	b538      	push	{r3, r4, r5, lr}
 8003b32:	4605      	mov	r5, r0
 8003b34:	4608      	mov	r0, r1
 8003b36:	4611      	mov	r1, r2
 8003b38:	2200      	movs	r2, #0
 8003b3a:	4c05      	ldr	r4, [pc, #20]	; (8003b50 <_read_r+0x20>)
 8003b3c:	6022      	str	r2, [r4, #0]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	f7fd faaa 	bl	8001098 <_read>
 8003b44:	1c43      	adds	r3, r0, #1
 8003b46:	d102      	bne.n	8003b4e <_read_r+0x1e>
 8003b48:	6823      	ldr	r3, [r4, #0]
 8003b4a:	b103      	cbz	r3, 8003b4e <_read_r+0x1e>
 8003b4c:	602b      	str	r3, [r5, #0]
 8003b4e:	bd38      	pop	{r3, r4, r5, pc}
 8003b50:	20000260 	.word	0x20000260

08003b54 <_init>:
 8003b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b56:	bf00      	nop
 8003b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b5a:	bc08      	pop	{r3}
 8003b5c:	469e      	mov	lr, r3
 8003b5e:	4770      	bx	lr

08003b60 <_fini>:
 8003b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b62:	bf00      	nop
 8003b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b66:	bc08      	pop	{r3}
 8003b68:	469e      	mov	lr, r3
 8003b6a:	4770      	bx	lr
