
a14-dht11-gpio-counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000321c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08003328  08003328  00013328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034b8  080034b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080034b8  080034b8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034b8  080034b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034b8  080034b8  000134b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034bc  080034bc  000134bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080034c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000070  08003530  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08003530  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b8f7  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a99  00000000  00000000  0002b990  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c48  00000000  00000000  0002d430  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ba0  00000000  00000000  0002e078  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000186f3  00000000  00000000  0002ec18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009023  00000000  00000000  0004730b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b65f  00000000  00000000  0005032e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000db98d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a70  00000000  00000000  000dba08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003310 	.word	0x08003310

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003310 	.word	0x08003310

0800014c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART2 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800015a:	2201      	movs	r2, #1
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <__io_putchar+0x20>)
 800015e:	f001 ffe8 	bl	8002132 <HAL_UART_Transmit>
	return ch;
 8000162:	687b      	ldr	r3, [r7, #4]
}
 8000164:	4618      	mov	r0, r3
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	20000140 	.word	0x20000140

08000170 <DHT11_GPIO_MODE_OUTPUT>:

void DHT11_GPIO_MODE_OUTPUT(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000176:	463b      	mov	r3, r7
 8000178:	2200      	movs	r2, #0
 800017a:	601a      	str	r2, [r3, #0]
 800017c:	605a      	str	r2, [r3, #4]
 800017e:	609a      	str	r2, [r3, #8]
 8000180:	60da      	str	r2, [r3, #12]

	/*Configure GPIO pin : PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000182:	2320      	movs	r3, #32
 8000184:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000186:	2301      	movs	r3, #1
 8000188:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800018a:	2300      	movs	r3, #0
 800018c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800018e:	2302      	movs	r3, #2
 8000190:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000192:	463b      	mov	r3, r7
 8000194:	4619      	mov	r1, r3
 8000196:	4803      	ldr	r0, [pc, #12]	; (80001a4 <DHT11_GPIO_MODE_OUTPUT+0x34>)
 8000198:	f000 fdba 	bl	8000d10 <HAL_GPIO_Init>
}
 800019c:	bf00      	nop
 800019e:	3710      	adds	r7, #16
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bd80      	pop	{r7, pc}
 80001a4:	40010c00 	.word	0x40010c00

080001a8 <DHT11_GPIO_MODE_INPUT>:

void DHT11_GPIO_MODE_INPUT(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b084      	sub	sp, #16
 80001ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ae:	463b      	mov	r3, r7
 80001b0:	2200      	movs	r2, #0
 80001b2:	601a      	str	r2, [r3, #0]
 80001b4:	605a      	str	r2, [r3, #4]
 80001b6:	609a      	str	r2, [r3, #8]
 80001b8:	60da      	str	r2, [r3, #12]

	/*Configure GPIO pin : PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 80001ba:	2320      	movs	r3, #32
 80001bc:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80001be:	4b0a      	ldr	r3, [pc, #40]	; (80001e8 <DHT11_GPIO_MODE_INPUT+0x40>)
 80001c0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001c2:	2300      	movs	r3, #0
 80001c4:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001c6:	463b      	mov	r3, r7
 80001c8:	4619      	mov	r1, r3
 80001ca:	4808      	ldr	r0, [pc, #32]	; (80001ec <DHT11_GPIO_MODE_INPUT+0x44>)
 80001cc:	f000 fda0 	bl	8000d10 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80001d0:	2200      	movs	r2, #0
 80001d2:	2100      	movs	r1, #0
 80001d4:	2017      	movs	r0, #23
 80001d6:	f000 fd64 	bl	8000ca2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80001da:	2017      	movs	r0, #23
 80001dc:	f000 fd7d 	bl	8000cda <HAL_NVIC_EnableIRQ>
}
 80001e0:	bf00      	nop
 80001e2:	3710      	adds	r7, #16
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	10210000 	.word	0x10210000
 80001ec:	40010c00 	.word	0x40010c00

080001f0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b082      	sub	sp, #8
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim3.Instance){
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	681a      	ldr	r2, [r3, #0]
 80001fc:	4b08      	ldr	r3, [pc, #32]	; (8000220 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	429a      	cmp	r2, r3
 8000202:	d108      	bne.n	8000216 <HAL_TIM_PeriodElapsedCallback+0x26>
		tim3Cnt += 1;
 8000204:	4b07      	ldr	r3, [pc, #28]	; (8000224 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	3301      	adds	r3, #1
 800020a:	4a06      	ldr	r2, [pc, #24]	; (8000224 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800020c:	6013      	str	r3, [r2, #0]
		// test pin
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 800020e:	2101      	movs	r1, #1
 8000210:	4805      	ldr	r0, [pc, #20]	; (8000228 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000212:	f000 ff06 	bl	8001022 <HAL_GPIO_TogglePin>
	}
}
 8000216:	bf00      	nop
 8000218:	3708      	adds	r7, #8
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
 800021e:	bf00      	nop
 8000220:	200000a4 	.word	0x200000a4
 8000224:	2000012c 	.word	0x2000012c
 8000228:	40010800 	.word	0x40010800

0800022c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_5){
 8000236:	88fb      	ldrh	r3, [r7, #6]
 8000238:	2b20      	cmp	r3, #32
 800023a:	d110      	bne.n	800025e <HAL_GPIO_EXTI_Callback+0x32>
		DHT11BitData[BitDataIndex++] = tim3Cnt;
 800023c:	4b0a      	ldr	r3, [pc, #40]	; (8000268 <HAL_GPIO_EXTI_Callback+0x3c>)
 800023e:	6818      	ldr	r0, [r3, #0]
 8000240:	4b0a      	ldr	r3, [pc, #40]	; (800026c <HAL_GPIO_EXTI_Callback+0x40>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	1c5a      	adds	r2, r3, #1
 8000246:	4909      	ldr	r1, [pc, #36]	; (800026c <HAL_GPIO_EXTI_Callback+0x40>)
 8000248:	600a      	str	r2, [r1, #0]
 800024a:	b2c1      	uxtb	r1, r0
 800024c:	4a08      	ldr	r2, [pc, #32]	; (8000270 <HAL_GPIO_EXTI_Callback+0x44>)
 800024e:	54d1      	strb	r1, [r2, r3]
		tim3Cnt = 0;
 8000250:	4b05      	ldr	r3, [pc, #20]	; (8000268 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
		// test pin
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 8000256:	2101      	movs	r1, #1
 8000258:	4806      	ldr	r0, [pc, #24]	; (8000274 <HAL_GPIO_EXTI_Callback+0x48>)
 800025a:	f000 fee2 	bl	8001022 <HAL_GPIO_TogglePin>
	}
}
 800025e:	bf00      	nop
 8000260:	3708      	adds	r7, #8
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	2000012c 	.word	0x2000012c
 800026c:	200000a0 	.word	0x200000a0
 8000270:	200000ec 	.word	0x200000ec
 8000274:	40011000 	.word	0x40011000

08000278 <DHT11_Data_Read>:

int DHT11_Data_Read(int sel)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b084      	sub	sp, #16
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
	int i,j,k;
	uint8_t checksum;

	DHT11_GPIO_MODE_OUTPUT();
 8000280:	f7ff ff76 	bl	8000170 <DHT11_GPIO_MODE_OUTPUT>
	HAL_Delay(1);
 8000284:	2001      	movs	r0, #1
 8000286:	f000 fc13 	bl	8000ab0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800028a:	2200      	movs	r2, #0
 800028c:	2120      	movs	r1, #32
 800028e:	482a      	ldr	r0, [pc, #168]	; (8000338 <DHT11_Data_Read+0xc0>)
 8000290:	f000 feaf 	bl	8000ff2 <HAL_GPIO_WritePin>
	HAL_Delay(18);
 8000294:	2012      	movs	r0, #18
 8000296:	f000 fc0b 	bl	8000ab0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800029a:	2201      	movs	r2, #1
 800029c:	2120      	movs	r1, #32
 800029e:	4826      	ldr	r0, [pc, #152]	; (8000338 <DHT11_Data_Read+0xc0>)
 80002a0:	f000 fea7 	bl	8000ff2 <HAL_GPIO_WritePin>

	tim3Cnt = 0;
 80002a4:	4b25      	ldr	r3, [pc, #148]	; (800033c <DHT11_Data_Read+0xc4>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
	BitDataIndex = 0;
 80002aa:	4b25      	ldr	r3, [pc, #148]	; (8000340 <DHT11_Data_Read+0xc8>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	601a      	str	r2, [r3, #0]
	for(i = 0; i < 64; i++){
 80002b0:	2300      	movs	r3, #0
 80002b2:	60fb      	str	r3, [r7, #12]
 80002b4:	e007      	b.n	80002c6 <DHT11_Data_Read+0x4e>
		DHT11BitData[i] = 0;
 80002b6:	4a23      	ldr	r2, [pc, #140]	; (8000344 <DHT11_Data_Read+0xcc>)
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	4413      	add	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 64; i++){
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	3301      	adds	r3, #1
 80002c4:	60fb      	str	r3, [r7, #12]
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	2b3f      	cmp	r3, #63	; 0x3f
 80002ca:	ddf4      	ble.n	80002b6 <DHT11_Data_Read+0x3e>
	}
	for(i = 0; i < 8; i++){
 80002cc:	2300      	movs	r3, #0
 80002ce:	60fb      	str	r3, [r7, #12]
 80002d0:	e007      	b.n	80002e2 <DHT11_Data_Read+0x6a>
		DHT11value[i] = 0;
 80002d2:	4a1d      	ldr	r2, [pc, #116]	; (8000348 <DHT11_Data_Read+0xd0>)
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	4413      	add	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 8; i++){
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	3301      	adds	r3, #1
 80002e0:	60fb      	str	r3, [r7, #12]
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	2b07      	cmp	r3, #7
 80002e6:	ddf4      	ble.n	80002d2 <DHT11_Data_Read+0x5a>
	}

	DHT11_GPIO_MODE_INPUT();
 80002e8:	f7ff ff5e 	bl	80001a8 <DHT11_GPIO_MODE_INPUT>

	HAL_Delay(500); // DHT11 received time
 80002ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002f0:	f000 fbde 	bl	8000ab0 <HAL_Delay>


	//----- 여기에 코드 추가(비트 데이터를 분석하여 바이트 데이터로 변경) -----

	printf("---------BitDataIndex=%d--------\r\n",BitDataIndex);
 80002f4:	4b12      	ldr	r3, [pc, #72]	; (8000340 <DHT11_Data_Read+0xc8>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4619      	mov	r1, r3
 80002fa:	4814      	ldr	r0, [pc, #80]	; (800034c <DHT11_Data_Read+0xd4>)
 80002fc:	f002 f8b6 	bl	800246c <iprintf>
	for(i = 0; i < BitDataIndex; i++){
 8000300:	2300      	movs	r3, #0
 8000302:	60fb      	str	r3, [r7, #12]
 8000304:	e00a      	b.n	800031c <DHT11_Data_Read+0xa4>
		printf("%d,",DHT11BitData[i]);
 8000306:	4a0f      	ldr	r2, [pc, #60]	; (8000344 <DHT11_Data_Read+0xcc>)
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	4413      	add	r3, r2
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	4619      	mov	r1, r3
 8000310:	480f      	ldr	r0, [pc, #60]	; (8000350 <DHT11_Data_Read+0xd8>)
 8000312:	f002 f8ab 	bl	800246c <iprintf>
	for(i = 0; i < BitDataIndex; i++){
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	3301      	adds	r3, #1
 800031a:	60fb      	str	r3, [r7, #12]
 800031c:	4b08      	ldr	r3, [pc, #32]	; (8000340 <DHT11_Data_Read+0xc8>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	68fa      	ldr	r2, [r7, #12]
 8000322:	429a      	cmp	r2, r3
 8000324:	dbef      	blt.n	8000306 <DHT11_Data_Read+0x8e>
	}
	printf("\r\n");
 8000326:	480b      	ldr	r0, [pc, #44]	; (8000354 <DHT11_Data_Read+0xdc>)
 8000328:	f002 f914 	bl	8002554 <puts>

	//----- 여기에 코드 추가(체크섬 구하고 데이터와 확인하기) -----

	return(0);
 800032c:	2300      	movs	r3, #0
}
 800032e:	4618      	mov	r0, r3
 8000330:	3710      	adds	r7, #16
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	40010c00 	.word	0x40010c00
 800033c:	2000012c 	.word	0x2000012c
 8000340:	200000a0 	.word	0x200000a0
 8000344:	200000ec 	.word	0x200000ec
 8000348:	20000098 	.word	0x20000098
 800034c:	08003328 	.word	0x08003328
 8000350:	0800334c 	.word	0x0800334c
 8000354:	08003350 	.word	0x08003350

08000358 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800035e:	f000 fb45 	bl	80009ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000362:	f000 f863 	bl	800042c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000366:	f000 f919 	bl	800059c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800036a:	f000 f8ed 	bl	8000548 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800036e:	f000 f89f 	bl	80004b0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	printf("---stmf103 dht11 TEST---\r\n");
 8000372:	4824      	ldr	r0, [pc, #144]	; (8000404 <main+0xac>)
 8000374:	f002 f8ee 	bl	8002554 <puts>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000378:	2201      	movs	r2, #1
 800037a:	2120      	movs	r1, #32
 800037c:	4822      	ldr	r0, [pc, #136]	; (8000408 <main+0xb0>)
 800037e:	f000 fe38 	bl	8000ff2 <HAL_GPIO_WritePin>

	tim3it = HAL_TIM_Base_Start_IT(&htim3);
 8000382:	4822      	ldr	r0, [pc, #136]	; (800040c <main+0xb4>)
 8000384:	f001 faea 	bl	800195c <HAL_TIM_Base_Start_IT>
 8000388:	4603      	mov	r3, r0
 800038a:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == tim3it){
 800038c:	79fb      	ldrb	r3, [r7, #7]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d105      	bne.n	800039e <main+0x46>
		printf("HAL_TIM_Base_Start_IT=%d OK\r\n",tim3it);
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	4619      	mov	r1, r3
 8000396:	481e      	ldr	r0, [pc, #120]	; (8000410 <main+0xb8>)
 8000398:	f002 f868 	bl	800246c <iprintf>
 800039c:	e004      	b.n	80003a8 <main+0x50>
	}else{
		printf("HAL_TIM_Base_Start_IT=%d error\r\n",tim3it);
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	4619      	mov	r1, r3
 80003a2:	481c      	ldr	r0, [pc, #112]	; (8000414 <main+0xbc>)
 80003a4:	f002 f862 	bl	800246c <iprintf>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  pc13pin = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80003a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ac:	481a      	ldr	r0, [pc, #104]	; (8000418 <main+0xc0>)
 80003ae:	f000 fe09 	bl	8000fc4 <HAL_GPIO_ReadPin>
 80003b2:	4603      	mov	r3, r0
 80003b4:	71bb      	strb	r3, [r7, #6]
	  if(GPIO_PIN_RESET == pc13pin){
 80003b6:	79bb      	ldrb	r3, [r7, #6]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d11a      	bne.n	80003f2 <main+0x9a>
		  retvalue = DHT11_Data_Read(1);
 80003bc:	2001      	movs	r0, #1
 80003be:	f7ff ff5b 	bl	8000278 <DHT11_Data_Read>
 80003c2:	6038      	str	r0, [r7, #0]
		  if(0 == retvalue){
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d110      	bne.n	80003ec <main+0x94>
			  printf("Humirity=%d.%d / Temperature=%d.%d\r\n",DHT11value[0],DHT11value[1],DHT11value[2],DHT11value[3]);
 80003ca:	4b14      	ldr	r3, [pc, #80]	; (800041c <main+0xc4>)
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	4619      	mov	r1, r3
 80003d0:	4b12      	ldr	r3, [pc, #72]	; (800041c <main+0xc4>)
 80003d2:	785b      	ldrb	r3, [r3, #1]
 80003d4:	461a      	mov	r2, r3
 80003d6:	4b11      	ldr	r3, [pc, #68]	; (800041c <main+0xc4>)
 80003d8:	789b      	ldrb	r3, [r3, #2]
 80003da:	4618      	mov	r0, r3
 80003dc:	4b0f      	ldr	r3, [pc, #60]	; (800041c <main+0xc4>)
 80003de:	78db      	ldrb	r3, [r3, #3]
 80003e0:	9300      	str	r3, [sp, #0]
 80003e2:	4603      	mov	r3, r0
 80003e4:	480e      	ldr	r0, [pc, #56]	; (8000420 <main+0xc8>)
 80003e6:	f002 f841 	bl	800246c <iprintf>
 80003ea:	e002      	b.n	80003f2 <main+0x9a>
		  }else{
			  printf("dht11 checksum error\r\n");
 80003ec:	480d      	ldr	r0, [pc, #52]	; (8000424 <main+0xcc>)
 80003ee:	f002 f8b1 	bl	8002554 <puts>
		  }
	  }

	  HAL_Delay(100);
 80003f2:	2064      	movs	r0, #100	; 0x64
 80003f4:	f000 fb5c 	bl	8000ab0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80003f8:	2120      	movs	r1, #32
 80003fa:	480b      	ldr	r0, [pc, #44]	; (8000428 <main+0xd0>)
 80003fc:	f000 fe11 	bl	8001022 <HAL_GPIO_TogglePin>
	  pc13pin = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000400:	e7d2      	b.n	80003a8 <main+0x50>
 8000402:	bf00      	nop
 8000404:	08003354 	.word	0x08003354
 8000408:	40010c00 	.word	0x40010c00
 800040c:	200000a4 	.word	0x200000a4
 8000410:	08003370 	.word	0x08003370
 8000414:	08003390 	.word	0x08003390
 8000418:	40011000 	.word	0x40011000
 800041c:	20000098 	.word	0x20000098
 8000420:	080033b4 	.word	0x080033b4
 8000424:	080033dc 	.word	0x080033dc
 8000428:	40010800 	.word	0x40010800

0800042c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b090      	sub	sp, #64	; 0x40
 8000430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000432:	f107 0318 	add.w	r3, r7, #24
 8000436:	2228      	movs	r2, #40	; 0x28
 8000438:	2100      	movs	r1, #0
 800043a:	4618      	mov	r0, r3
 800043c:	f002 f80e 	bl	800245c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
 8000446:	605a      	str	r2, [r3, #4]
 8000448:	609a      	str	r2, [r3, #8]
 800044a:	60da      	str	r2, [r3, #12]
 800044c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800044e:	2302      	movs	r3, #2
 8000450:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000452:	2301      	movs	r3, #1
 8000454:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000456:	2310      	movs	r3, #16
 8000458:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800045a:	2302      	movs	r3, #2
 800045c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800045e:	2300      	movs	r3, #0
 8000460:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000462:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000466:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000468:	f107 0318 	add.w	r3, r7, #24
 800046c:	4618      	mov	r0, r3
 800046e:	f000 fe09 	bl	8001084 <HAL_RCC_OscConfig>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000478:	f000 f916 	bl	80006a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800047c:	230f      	movs	r3, #15
 800047e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000480:	2302      	movs	r3, #2
 8000482:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000484:	2300      	movs	r3, #0
 8000486:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000488:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800048c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800048e:	2300      	movs	r3, #0
 8000490:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	2102      	movs	r1, #2
 8000496:	4618      	mov	r0, r3
 8000498:	f001 f874 	bl	8001584 <HAL_RCC_ClockConfig>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80004a2:	f000 f901 	bl	80006a8 <Error_Handler>
  }
}
 80004a6:	bf00      	nop
 80004a8:	3740      	adds	r7, #64	; 0x40
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
	...

080004b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004b6:	f107 0308 	add.w	r3, r7, #8
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
 80004be:	605a      	str	r2, [r3, #4]
 80004c0:	609a      	str	r2, [r3, #8]
 80004c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004c4:	463b      	mov	r3, r7
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
 80004ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004cc:	4b1c      	ldr	r3, [pc, #112]	; (8000540 <MX_TIM3_Init+0x90>)
 80004ce:	4a1d      	ldr	r2, [pc, #116]	; (8000544 <MX_TIM3_Init+0x94>)
 80004d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 80004d2:	4b1b      	ldr	r3, [pc, #108]	; (8000540 <MX_TIM3_Init+0x90>)
 80004d4:	223f      	movs	r2, #63	; 0x3f
 80004d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004d8:	4b19      	ldr	r3, [pc, #100]	; (8000540 <MX_TIM3_Init+0x90>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10-1;
 80004de:	4b18      	ldr	r3, [pc, #96]	; (8000540 <MX_TIM3_Init+0x90>)
 80004e0:	2209      	movs	r2, #9
 80004e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004e4:	4b16      	ldr	r3, [pc, #88]	; (8000540 <MX_TIM3_Init+0x90>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ea:	4b15      	ldr	r3, [pc, #84]	; (8000540 <MX_TIM3_Init+0x90>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80004f0:	4813      	ldr	r0, [pc, #76]	; (8000540 <MX_TIM3_Init+0x90>)
 80004f2:	f001 f9e3 	bl	80018bc <HAL_TIM_Base_Init>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80004fc:	f000 f8d4 	bl	80006a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000500:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000504:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000506:	f107 0308 	add.w	r3, r7, #8
 800050a:	4619      	mov	r1, r3
 800050c:	480c      	ldr	r0, [pc, #48]	; (8000540 <MX_TIM3_Init+0x90>)
 800050e:	f001 fb7f 	bl	8001c10 <HAL_TIM_ConfigClockSource>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8000518:	f000 f8c6 	bl	80006a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800051c:	2300      	movs	r3, #0
 800051e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000520:	2300      	movs	r3, #0
 8000522:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000524:	463b      	mov	r3, r7
 8000526:	4619      	mov	r1, r3
 8000528:	4805      	ldr	r0, [pc, #20]	; (8000540 <MX_TIM3_Init+0x90>)
 800052a:	f001 fd45 	bl	8001fb8 <HAL_TIMEx_MasterConfigSynchronization>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000534:	f000 f8b8 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000538:	bf00      	nop
 800053a:	3718      	adds	r7, #24
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	200000a4 	.word	0x200000a4
 8000544:	40000400 	.word	0x40000400

08000548 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800054c:	4b11      	ldr	r3, [pc, #68]	; (8000594 <MX_USART2_UART_Init+0x4c>)
 800054e:	4a12      	ldr	r2, [pc, #72]	; (8000598 <MX_USART2_UART_Init+0x50>)
 8000550:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000552:	4b10      	ldr	r3, [pc, #64]	; (8000594 <MX_USART2_UART_Init+0x4c>)
 8000554:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000558:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800055a:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <MX_USART2_UART_Init+0x4c>)
 800055c:	2200      	movs	r2, #0
 800055e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000560:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <MX_USART2_UART_Init+0x4c>)
 8000562:	2200      	movs	r2, #0
 8000564:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000566:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <MX_USART2_UART_Init+0x4c>)
 8000568:	2200      	movs	r2, #0
 800056a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800056c:	4b09      	ldr	r3, [pc, #36]	; (8000594 <MX_USART2_UART_Init+0x4c>)
 800056e:	220c      	movs	r2, #12
 8000570:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000572:	4b08      	ldr	r3, [pc, #32]	; (8000594 <MX_USART2_UART_Init+0x4c>)
 8000574:	2200      	movs	r2, #0
 8000576:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <MX_USART2_UART_Init+0x4c>)
 800057a:	2200      	movs	r2, #0
 800057c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800057e:	4805      	ldr	r0, [pc, #20]	; (8000594 <MX_USART2_UART_Init+0x4c>)
 8000580:	f001 fd8a 	bl	8002098 <HAL_UART_Init>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800058a:	f000 f88d 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000140 	.word	0x20000140
 8000598:	40004400 	.word	0x40004400

0800059c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a2:	f107 0310 	add.w	r3, r7, #16
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b0:	4b37      	ldr	r3, [pc, #220]	; (8000690 <MX_GPIO_Init+0xf4>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	4a36      	ldr	r2, [pc, #216]	; (8000690 <MX_GPIO_Init+0xf4>)
 80005b6:	f043 0310 	orr.w	r3, r3, #16
 80005ba:	6193      	str	r3, [r2, #24]
 80005bc:	4b34      	ldr	r3, [pc, #208]	; (8000690 <MX_GPIO_Init+0xf4>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	f003 0310 	and.w	r3, r3, #16
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005c8:	4b31      	ldr	r3, [pc, #196]	; (8000690 <MX_GPIO_Init+0xf4>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	4a30      	ldr	r2, [pc, #192]	; (8000690 <MX_GPIO_Init+0xf4>)
 80005ce:	f043 0320 	orr.w	r3, r3, #32
 80005d2:	6193      	str	r3, [r2, #24]
 80005d4:	4b2e      	ldr	r3, [pc, #184]	; (8000690 <MX_GPIO_Init+0xf4>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	f003 0320 	and.w	r3, r3, #32
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e0:	4b2b      	ldr	r3, [pc, #172]	; (8000690 <MX_GPIO_Init+0xf4>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	4a2a      	ldr	r2, [pc, #168]	; (8000690 <MX_GPIO_Init+0xf4>)
 80005e6:	f043 0304 	orr.w	r3, r3, #4
 80005ea:	6193      	str	r3, [r2, #24]
 80005ec:	4b28      	ldr	r3, [pc, #160]	; (8000690 <MX_GPIO_Init+0xf4>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	f003 0304 	and.w	r3, r3, #4
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f8:	4b25      	ldr	r3, [pc, #148]	; (8000690 <MX_GPIO_Init+0xf4>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	4a24      	ldr	r2, [pc, #144]	; (8000690 <MX_GPIO_Init+0xf4>)
 80005fe:	f043 0308 	orr.w	r3, r3, #8
 8000602:	6193      	str	r3, [r2, #24]
 8000604:	4b22      	ldr	r3, [pc, #136]	; (8000690 <MX_GPIO_Init+0xf4>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	f003 0308 	and.w	r3, r3, #8
 800060c:	603b      	str	r3, [r7, #0]
 800060e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	2120      	movs	r1, #32
 8000614:	481f      	ldr	r0, [pc, #124]	; (8000694 <MX_GPIO_Init+0xf8>)
 8000616:	f000 fcec 	bl	8000ff2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800061a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800061e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000620:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <MX_GPIO_Init+0xfc>)
 8000622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000628:	f107 0310 	add.w	r3, r7, #16
 800062c:	4619      	mov	r1, r3
 800062e:	481b      	ldr	r0, [pc, #108]	; (800069c <MX_GPIO_Init+0x100>)
 8000630:	f000 fb6e 	bl	8000d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000634:	2320      	movs	r3, #32
 8000636:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000638:	2301      	movs	r3, #1
 800063a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	2300      	movs	r3, #0
 800063e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000640:	2302      	movs	r3, #2
 8000642:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000644:	f107 0310 	add.w	r3, r7, #16
 8000648:	4619      	mov	r1, r3
 800064a:	4812      	ldr	r0, [pc, #72]	; (8000694 <MX_GPIO_Init+0xf8>)
 800064c:	f000 fb60 	bl	8000d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000650:	2320      	movs	r3, #32
 8000652:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <MX_GPIO_Init+0x104>)
 8000656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800065c:	f107 0310 	add.w	r3, r7, #16
 8000660:	4619      	mov	r1, r3
 8000662:	4810      	ldr	r0, [pc, #64]	; (80006a4 <MX_GPIO_Init+0x108>)
 8000664:	f000 fb54 	bl	8000d10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000668:	2200      	movs	r2, #0
 800066a:	2100      	movs	r1, #0
 800066c:	2017      	movs	r0, #23
 800066e:	f000 fb18 	bl	8000ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000672:	2017      	movs	r0, #23
 8000674:	f000 fb31 	bl	8000cda <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000678:	2200      	movs	r2, #0
 800067a:	2100      	movs	r1, #0
 800067c:	2028      	movs	r0, #40	; 0x28
 800067e:	f000 fb10 	bl	8000ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000682:	2028      	movs	r0, #40	; 0x28
 8000684:	f000 fb29 	bl	8000cda <HAL_NVIC_EnableIRQ>

}
 8000688:	bf00      	nop
 800068a:	3720      	adds	r7, #32
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40021000 	.word	0x40021000
 8000694:	40010800 	.word	0x40010800
 8000698:	10110000 	.word	0x10110000
 800069c:	40011000 	.word	0x40011000
 80006a0:	10210000 	.word	0x10210000
 80006a4:	40010c00 	.word	0x40010c00

080006a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr

080006b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006ba:	4b15      	ldr	r3, [pc, #84]	; (8000710 <HAL_MspInit+0x5c>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	4a14      	ldr	r2, [pc, #80]	; (8000710 <HAL_MspInit+0x5c>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6193      	str	r3, [r2, #24]
 80006c6:	4b12      	ldr	r3, [pc, #72]	; (8000710 <HAL_MspInit+0x5c>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <HAL_MspInit+0x5c>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	4a0e      	ldr	r2, [pc, #56]	; (8000710 <HAL_MspInit+0x5c>)
 80006d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006dc:	61d3      	str	r3, [r2, #28]
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <HAL_MspInit+0x5c>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006ea:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <HAL_MspInit+0x60>)
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	4a04      	ldr	r2, [pc, #16]	; (8000714 <HAL_MspInit+0x60>)
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000706:	bf00      	nop
 8000708:	3714      	adds	r7, #20
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr
 8000710:	40021000 	.word	0x40021000
 8000714:	40010000 	.word	0x40010000

08000718 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a0d      	ldr	r2, [pc, #52]	; (800075c <HAL_TIM_Base_MspInit+0x44>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d113      	bne.n	8000752 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800072a:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <HAL_TIM_Base_MspInit+0x48>)
 800072c:	69db      	ldr	r3, [r3, #28]
 800072e:	4a0c      	ldr	r2, [pc, #48]	; (8000760 <HAL_TIM_Base_MspInit+0x48>)
 8000730:	f043 0302 	orr.w	r3, r3, #2
 8000734:	61d3      	str	r3, [r2, #28]
 8000736:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <HAL_TIM_Base_MspInit+0x48>)
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	f003 0302 	and.w	r3, r3, #2
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	2100      	movs	r1, #0
 8000746:	201d      	movs	r0, #29
 8000748:	f000 faab 	bl	8000ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800074c:	201d      	movs	r0, #29
 800074e:	f000 fac4 	bl	8000cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000752:	bf00      	nop
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40000400 	.word	0x40000400
 8000760:	40021000 	.word	0x40021000

08000764 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b088      	sub	sp, #32
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076c:	f107 0310 	add.w	r3, r7, #16
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a15      	ldr	r2, [pc, #84]	; (80007d4 <HAL_UART_MspInit+0x70>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d123      	bne.n	80007cc <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <HAL_UART_MspInit+0x74>)
 8000786:	69db      	ldr	r3, [r3, #28]
 8000788:	4a13      	ldr	r2, [pc, #76]	; (80007d8 <HAL_UART_MspInit+0x74>)
 800078a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800078e:	61d3      	str	r3, [r2, #28]
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <HAL_UART_MspInit+0x74>)
 8000792:	69db      	ldr	r3, [r3, #28]
 8000794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079c:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <HAL_UART_MspInit+0x74>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	4a0d      	ldr	r2, [pc, #52]	; (80007d8 <HAL_UART_MspInit+0x74>)
 80007a2:	f043 0304 	orr.w	r3, r3, #4
 80007a6:	6193      	str	r3, [r2, #24]
 80007a8:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <HAL_UART_MspInit+0x74>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	f003 0304 	and.w	r3, r3, #4
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007b4:	230c      	movs	r3, #12
 80007b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b8:	2302      	movs	r3, #2
 80007ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2302      	movs	r3, #2
 80007be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c0:	f107 0310 	add.w	r3, r7, #16
 80007c4:	4619      	mov	r1, r3
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <HAL_UART_MspInit+0x78>)
 80007c8:	f000 faa2 	bl	8000d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007cc:	bf00      	nop
 80007ce:	3720      	adds	r7, #32
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40004400 	.word	0x40004400
 80007d8:	40021000 	.word	0x40021000
 80007dc:	40010800 	.word	0x40010800

080007e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr

080007ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <HardFault_Handler+0x4>

080007f2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f6:	e7fe      	b.n	80007f6 <MemManage_Handler+0x4>

080007f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007fc:	e7fe      	b.n	80007fc <BusFault_Handler+0x4>

080007fe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000802:	e7fe      	b.n	8000802 <UsageFault_Handler+0x4>

08000804 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr

0800081c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr

08000828 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800082c:	f000 f924 	bl	8000a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}

08000834 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000838:	2020      	movs	r0, #32
 800083a:	f000 fc0b 	bl	8001054 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000848:	4802      	ldr	r0, [pc, #8]	; (8000854 <TIM3_IRQHandler+0x10>)
 800084a:	f001 f8d9 	bl	8001a00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200000a4 	.word	0x200000a4

08000858 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800085c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000860:	f000 fbf8 	bl	8001054 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}

08000868 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	e00a      	b.n	8000890 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800087a:	f3af 8000 	nop.w
 800087e:	4601      	mov	r1, r0
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	1c5a      	adds	r2, r3, #1
 8000884:	60ba      	str	r2, [r7, #8]
 8000886:	b2ca      	uxtb	r2, r1
 8000888:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	3301      	adds	r3, #1
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	697a      	ldr	r2, [r7, #20]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	429a      	cmp	r2, r3
 8000896:	dbf0      	blt.n	800087a <_read+0x12>
	}

return len;
 8000898:	687b      	ldr	r3, [r7, #4]
}
 800089a:	4618      	mov	r0, r3
 800089c:	3718      	adds	r7, #24
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b086      	sub	sp, #24
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	60f8      	str	r0, [r7, #12]
 80008aa:	60b9      	str	r1, [r7, #8]
 80008ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
 80008b2:	e009      	b.n	80008c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	1c5a      	adds	r2, r3, #1
 80008b8:	60ba      	str	r2, [r7, #8]
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff fc45 	bl	800014c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	3301      	adds	r3, #1
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	697a      	ldr	r2, [r7, #20]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	dbf1      	blt.n	80008b4 <_write+0x12>
	}
	return len;
 80008d0:	687b      	ldr	r3, [r7, #4]
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3718      	adds	r7, #24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <_close>:

int _close(int file)
{
 80008da:	b480      	push	{r7}
 80008dc:	b083      	sub	sp, #12
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
	return -1;
 80008e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr

080008f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000900:	605a      	str	r2, [r3, #4]
	return 0;
 8000902:	2300      	movs	r3, #0
}
 8000904:	4618      	mov	r0, r3
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr

0800090e <_isatty>:

int _isatty(int file)
{
 800090e:	b480      	push	{r7}
 8000910:	b083      	sub	sp, #12
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
	return 1;
 8000916:	2301      	movs	r3, #1
}
 8000918:	4618      	mov	r0, r3
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr

08000922 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000922:	b480      	push	{r7}
 8000924:	b085      	sub	sp, #20
 8000926:	af00      	add	r7, sp, #0
 8000928:	60f8      	str	r0, [r7, #12]
 800092a:	60b9      	str	r1, [r7, #8]
 800092c:	607a      	str	r2, [r7, #4]
	return 0;
 800092e:	2300      	movs	r3, #0
}
 8000930:	4618      	mov	r0, r3
 8000932:	3714      	adds	r7, #20
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr
	...

0800093c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000944:	4b11      	ldr	r3, [pc, #68]	; (800098c <_sbrk+0x50>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d102      	bne.n	8000952 <_sbrk+0x16>
		heap_end = &end;
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <_sbrk+0x50>)
 800094e:	4a10      	ldr	r2, [pc, #64]	; (8000990 <_sbrk+0x54>)
 8000950:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <_sbrk+0x50>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <_sbrk+0x50>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4413      	add	r3, r2
 8000960:	466a      	mov	r2, sp
 8000962:	4293      	cmp	r3, r2
 8000964:	d907      	bls.n	8000976 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000966:	f001 fd4f 	bl	8002408 <__errno>
 800096a:	4602      	mov	r2, r0
 800096c:	230c      	movs	r3, #12
 800096e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000970:	f04f 33ff 	mov.w	r3, #4294967295
 8000974:	e006      	b.n	8000984 <_sbrk+0x48>
	}

	heap_end += incr;
 8000976:	4b05      	ldr	r3, [pc, #20]	; (800098c <_sbrk+0x50>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4413      	add	r3, r2
 800097e:	4a03      	ldr	r2, [pc, #12]	; (800098c <_sbrk+0x50>)
 8000980:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000982:	68fb      	ldr	r3, [r7, #12]
}
 8000984:	4618      	mov	r0, r3
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	2000008c 	.word	0x2000008c
 8000990:	200001a0 	.word	0x200001a0

08000994 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr

080009a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a0:	480c      	ldr	r0, [pc, #48]	; (80009d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009a2:	490d      	ldr	r1, [pc, #52]	; (80009d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009a4:	4a0d      	ldr	r2, [pc, #52]	; (80009dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a8:	e002      	b.n	80009b0 <LoopCopyDataInit>

080009aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ae:	3304      	adds	r3, #4

080009b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b4:	d3f9      	bcc.n	80009aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b6:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009b8:	4c0a      	ldr	r4, [pc, #40]	; (80009e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009bc:	e001      	b.n	80009c2 <LoopFillZerobss>

080009be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c0:	3204      	adds	r2, #4

080009c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c4:	d3fb      	bcc.n	80009be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009c6:	f7ff ffe5 	bl	8000994 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ca:	f001 fd23 	bl	8002414 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ce:	f7ff fcc3 	bl	8000358 <main>
  bx lr
 80009d2:	4770      	bx	lr
  ldr r0, =_sdata
 80009d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80009dc:	080034c0 	.word	0x080034c0
  ldr r2, =_sbss
 80009e0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80009e4:	2000019c 	.word	0x2000019c

080009e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009e8:	e7fe      	b.n	80009e8 <ADC1_2_IRQHandler>
	...

080009ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <HAL_Init+0x28>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a07      	ldr	r2, [pc, #28]	; (8000a14 <HAL_Init+0x28>)
 80009f6:	f043 0310 	orr.w	r3, r3, #16
 80009fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009fc:	2003      	movs	r0, #3
 80009fe:	f000 f945 	bl	8000c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a02:	2000      	movs	r0, #0
 8000a04:	f000 f808 	bl	8000a18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a08:	f7ff fe54 	bl	80006b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40022000 	.word	0x40022000

08000a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HAL_InitTick+0x54>)
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <HAL_InitTick+0x58>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	4619      	mov	r1, r3
 8000a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a36:	4618      	mov	r0, r3
 8000a38:	f000 f95d 	bl	8000cf6 <HAL_SYSTICK_Config>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	e00e      	b.n	8000a64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2b0f      	cmp	r3, #15
 8000a4a:	d80a      	bhi.n	8000a62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	6879      	ldr	r1, [r7, #4]
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	f000 f925 	bl	8000ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a58:	4a06      	ldr	r2, [pc, #24]	; (8000a74 <HAL_InitTick+0x5c>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	e000      	b.n	8000a64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000000 	.word	0x20000000
 8000a70:	20000008 	.word	0x20000008
 8000a74:	20000004 	.word	0x20000004

08000a78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a7c:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <HAL_IncTick+0x1c>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <HAL_IncTick+0x20>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4413      	add	r3, r2
 8000a88:	4a03      	ldr	r2, [pc, #12]	; (8000a98 <HAL_IncTick+0x20>)
 8000a8a:	6013      	str	r3, [r2, #0]
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	20000008 	.word	0x20000008
 8000a98:	20000194 	.word	0x20000194

08000a9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa0:	4b02      	ldr	r3, [pc, #8]	; (8000aac <HAL_GetTick+0x10>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	20000194 	.word	0x20000194

08000ab0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ab8:	f7ff fff0 	bl	8000a9c <HAL_GetTick>
 8000abc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ac8:	d005      	beq.n	8000ad6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aca:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <HAL_Delay+0x40>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ad6:	bf00      	nop
 8000ad8:	f7ff ffe0 	bl	8000a9c <HAL_GetTick>
 8000adc:	4602      	mov	r2, r0
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d8f7      	bhi.n	8000ad8 <HAL_Delay+0x28>
  {
  }
}
 8000ae8:	bf00      	nop
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000008 	.word	0x20000008

08000af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <__NVIC_SetPriorityGrouping+0x44>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b10:	4013      	ands	r3, r2
 8000b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b26:	4a04      	ldr	r2, [pc, #16]	; (8000b38 <__NVIC_SetPriorityGrouping+0x44>)
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	60d3      	str	r3, [r2, #12]
}
 8000b2c:	bf00      	nop
 8000b2e:	3714      	adds	r7, #20
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <__NVIC_GetPriorityGrouping+0x18>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	0a1b      	lsrs	r3, r3, #8
 8000b46:	f003 0307 	and.w	r3, r3, #7
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	db0b      	blt.n	8000b82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	f003 021f 	and.w	r2, r3, #31
 8000b70:	4906      	ldr	r1, [pc, #24]	; (8000b8c <__NVIC_EnableIRQ+0x34>)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	095b      	lsrs	r3, r3, #5
 8000b78:	2001      	movs	r0, #1
 8000b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr
 8000b8c:	e000e100 	.word	0xe000e100

08000b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	6039      	str	r1, [r7, #0]
 8000b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	db0a      	blt.n	8000bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	b2da      	uxtb	r2, r3
 8000ba8:	490c      	ldr	r1, [pc, #48]	; (8000bdc <__NVIC_SetPriority+0x4c>)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	0112      	lsls	r2, r2, #4
 8000bb0:	b2d2      	uxtb	r2, r2
 8000bb2:	440b      	add	r3, r1
 8000bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb8:	e00a      	b.n	8000bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	4908      	ldr	r1, [pc, #32]	; (8000be0 <__NVIC_SetPriority+0x50>)
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	f003 030f 	and.w	r3, r3, #15
 8000bc6:	3b04      	subs	r3, #4
 8000bc8:	0112      	lsls	r2, r2, #4
 8000bca:	b2d2      	uxtb	r2, r2
 8000bcc:	440b      	add	r3, r1
 8000bce:	761a      	strb	r2, [r3, #24]
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000e100 	.word	0xe000e100
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b089      	sub	sp, #36	; 0x24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	f1c3 0307 	rsb	r3, r3, #7
 8000bfe:	2b04      	cmp	r3, #4
 8000c00:	bf28      	it	cs
 8000c02:	2304      	movcs	r3, #4
 8000c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	3304      	adds	r3, #4
 8000c0a:	2b06      	cmp	r3, #6
 8000c0c:	d902      	bls.n	8000c14 <NVIC_EncodePriority+0x30>
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3b03      	subs	r3, #3
 8000c12:	e000      	b.n	8000c16 <NVIC_EncodePriority+0x32>
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c18:	f04f 32ff 	mov.w	r2, #4294967295
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	43da      	mvns	r2, r3
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	401a      	ands	r2, r3
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	fa01 f303 	lsl.w	r3, r1, r3
 8000c36:	43d9      	mvns	r1, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c3c:	4313      	orrs	r3, r2
         );
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3724      	adds	r7, #36	; 0x24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr

08000c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c58:	d301      	bcc.n	8000c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e00f      	b.n	8000c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <SysTick_Config+0x40>)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c66:	210f      	movs	r1, #15
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295
 8000c6c:	f7ff ff90 	bl	8000b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <SysTick_Config+0x40>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c76:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <SysTick_Config+0x40>)
 8000c78:	2207      	movs	r2, #7
 8000c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	e000e010 	.word	0xe000e010

08000c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff ff2d 	bl	8000af4 <__NVIC_SetPriorityGrouping>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b086      	sub	sp, #24
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	4603      	mov	r3, r0
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	607a      	str	r2, [r7, #4]
 8000cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb4:	f7ff ff42 	bl	8000b3c <__NVIC_GetPriorityGrouping>
 8000cb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	68b9      	ldr	r1, [r7, #8]
 8000cbe:	6978      	ldr	r0, [r7, #20]
 8000cc0:	f7ff ff90 	bl	8000be4 <NVIC_EncodePriority>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cca:	4611      	mov	r1, r2
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ff5f 	bl	8000b90 <__NVIC_SetPriority>
}
 8000cd2:	bf00      	nop
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff35 	bl	8000b58 <__NVIC_EnableIRQ>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f7ff ffa2 	bl	8000c48 <SysTick_Config>
 8000d04:	4603      	mov	r3, r0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b08b      	sub	sp, #44	; 0x2c
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d22:	e127      	b.n	8000f74 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d24:	2201      	movs	r2, #1
 8000d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	69fa      	ldr	r2, [r7, #28]
 8000d34:	4013      	ands	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	f040 8116 	bne.w	8000f6e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	2b12      	cmp	r3, #18
 8000d48:	d034      	beq.n	8000db4 <HAL_GPIO_Init+0xa4>
 8000d4a:	2b12      	cmp	r3, #18
 8000d4c:	d80d      	bhi.n	8000d6a <HAL_GPIO_Init+0x5a>
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d02b      	beq.n	8000daa <HAL_GPIO_Init+0x9a>
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d804      	bhi.n	8000d60 <HAL_GPIO_Init+0x50>
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d031      	beq.n	8000dbe <HAL_GPIO_Init+0xae>
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d01c      	beq.n	8000d98 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d5e:	e048      	b.n	8000df2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d60:	2b03      	cmp	r3, #3
 8000d62:	d043      	beq.n	8000dec <HAL_GPIO_Init+0xdc>
 8000d64:	2b11      	cmp	r3, #17
 8000d66:	d01b      	beq.n	8000da0 <HAL_GPIO_Init+0x90>
          break;
 8000d68:	e043      	b.n	8000df2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d6a:	4a89      	ldr	r2, [pc, #548]	; (8000f90 <HAL_GPIO_Init+0x280>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d026      	beq.n	8000dbe <HAL_GPIO_Init+0xae>
 8000d70:	4a87      	ldr	r2, [pc, #540]	; (8000f90 <HAL_GPIO_Init+0x280>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d806      	bhi.n	8000d84 <HAL_GPIO_Init+0x74>
 8000d76:	4a87      	ldr	r2, [pc, #540]	; (8000f94 <HAL_GPIO_Init+0x284>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d020      	beq.n	8000dbe <HAL_GPIO_Init+0xae>
 8000d7c:	4a86      	ldr	r2, [pc, #536]	; (8000f98 <HAL_GPIO_Init+0x288>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d01d      	beq.n	8000dbe <HAL_GPIO_Init+0xae>
          break;
 8000d82:	e036      	b.n	8000df2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d84:	4a85      	ldr	r2, [pc, #532]	; (8000f9c <HAL_GPIO_Init+0x28c>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d019      	beq.n	8000dbe <HAL_GPIO_Init+0xae>
 8000d8a:	4a85      	ldr	r2, [pc, #532]	; (8000fa0 <HAL_GPIO_Init+0x290>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d016      	beq.n	8000dbe <HAL_GPIO_Init+0xae>
 8000d90:	4a84      	ldr	r2, [pc, #528]	; (8000fa4 <HAL_GPIO_Init+0x294>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d013      	beq.n	8000dbe <HAL_GPIO_Init+0xae>
          break;
 8000d96:	e02c      	b.n	8000df2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	623b      	str	r3, [r7, #32]
          break;
 8000d9e:	e028      	b.n	8000df2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	3304      	adds	r3, #4
 8000da6:	623b      	str	r3, [r7, #32]
          break;
 8000da8:	e023      	b.n	8000df2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	3308      	adds	r3, #8
 8000db0:	623b      	str	r3, [r7, #32]
          break;
 8000db2:	e01e      	b.n	8000df2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	330c      	adds	r3, #12
 8000dba:	623b      	str	r3, [r7, #32]
          break;
 8000dbc:	e019      	b.n	8000df2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d102      	bne.n	8000dcc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	623b      	str	r3, [r7, #32]
          break;
 8000dca:	e012      	b.n	8000df2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d105      	bne.n	8000de0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dd4:	2308      	movs	r3, #8
 8000dd6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	69fa      	ldr	r2, [r7, #28]
 8000ddc:	611a      	str	r2, [r3, #16]
          break;
 8000dde:	e008      	b.n	8000df2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000de0:	2308      	movs	r3, #8
 8000de2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	69fa      	ldr	r2, [r7, #28]
 8000de8:	615a      	str	r2, [r3, #20]
          break;
 8000dea:	e002      	b.n	8000df2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000dec:	2300      	movs	r3, #0
 8000dee:	623b      	str	r3, [r7, #32]
          break;
 8000df0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	2bff      	cmp	r3, #255	; 0xff
 8000df6:	d801      	bhi.n	8000dfc <HAL_GPIO_Init+0xec>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	e001      	b.n	8000e00 <HAL_GPIO_Init+0xf0>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3304      	adds	r3, #4
 8000e00:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	2bff      	cmp	r3, #255	; 0xff
 8000e06:	d802      	bhi.n	8000e0e <HAL_GPIO_Init+0xfe>
 8000e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	e002      	b.n	8000e14 <HAL_GPIO_Init+0x104>
 8000e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e10:	3b08      	subs	r3, #8
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	210f      	movs	r1, #15
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	401a      	ands	r2, r3
 8000e26:	6a39      	ldr	r1, [r7, #32]
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	f000 8096 	beq.w	8000f6e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e42:	4b59      	ldr	r3, [pc, #356]	; (8000fa8 <HAL_GPIO_Init+0x298>)
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	4a58      	ldr	r2, [pc, #352]	; (8000fa8 <HAL_GPIO_Init+0x298>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6193      	str	r3, [r2, #24]
 8000e4e:	4b56      	ldr	r3, [pc, #344]	; (8000fa8 <HAL_GPIO_Init+0x298>)
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e5a:	4a54      	ldr	r2, [pc, #336]	; (8000fac <HAL_GPIO_Init+0x29c>)
 8000e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5e:	089b      	lsrs	r3, r3, #2
 8000e60:	3302      	adds	r3, #2
 8000e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e66:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6a:	f003 0303 	and.w	r3, r3, #3
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	220f      	movs	r2, #15
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	68fa      	ldr	r2, [r7, #12]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a4b      	ldr	r2, [pc, #300]	; (8000fb0 <HAL_GPIO_Init+0x2a0>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d013      	beq.n	8000eae <HAL_GPIO_Init+0x19e>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a4a      	ldr	r2, [pc, #296]	; (8000fb4 <HAL_GPIO_Init+0x2a4>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d00d      	beq.n	8000eaa <HAL_GPIO_Init+0x19a>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a49      	ldr	r2, [pc, #292]	; (8000fb8 <HAL_GPIO_Init+0x2a8>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d007      	beq.n	8000ea6 <HAL_GPIO_Init+0x196>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a48      	ldr	r2, [pc, #288]	; (8000fbc <HAL_GPIO_Init+0x2ac>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d101      	bne.n	8000ea2 <HAL_GPIO_Init+0x192>
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e006      	b.n	8000eb0 <HAL_GPIO_Init+0x1a0>
 8000ea2:	2304      	movs	r3, #4
 8000ea4:	e004      	b.n	8000eb0 <HAL_GPIO_Init+0x1a0>
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	e002      	b.n	8000eb0 <HAL_GPIO_Init+0x1a0>
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e000      	b.n	8000eb0 <HAL_GPIO_Init+0x1a0>
 8000eae:	2300      	movs	r3, #0
 8000eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eb2:	f002 0203 	and.w	r2, r2, #3
 8000eb6:	0092      	lsls	r2, r2, #2
 8000eb8:	4093      	lsls	r3, r2
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ec0:	493a      	ldr	r1, [pc, #232]	; (8000fac <HAL_GPIO_Init+0x29c>)
 8000ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec4:	089b      	lsrs	r3, r3, #2
 8000ec6:	3302      	adds	r3, #2
 8000ec8:	68fa      	ldr	r2, [r7, #12]
 8000eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d006      	beq.n	8000ee8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000eda:	4b39      	ldr	r3, [pc, #228]	; (8000fc0 <HAL_GPIO_Init+0x2b0>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	4938      	ldr	r1, [pc, #224]	; (8000fc0 <HAL_GPIO_Init+0x2b0>)
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	600b      	str	r3, [r1, #0]
 8000ee6:	e006      	b.n	8000ef6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ee8:	4b35      	ldr	r3, [pc, #212]	; (8000fc0 <HAL_GPIO_Init+0x2b0>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	4933      	ldr	r1, [pc, #204]	; (8000fc0 <HAL_GPIO_Init+0x2b0>)
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d006      	beq.n	8000f10 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f02:	4b2f      	ldr	r3, [pc, #188]	; (8000fc0 <HAL_GPIO_Init+0x2b0>)
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	492e      	ldr	r1, [pc, #184]	; (8000fc0 <HAL_GPIO_Init+0x2b0>)
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	604b      	str	r3, [r1, #4]
 8000f0e:	e006      	b.n	8000f1e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f10:	4b2b      	ldr	r3, [pc, #172]	; (8000fc0 <HAL_GPIO_Init+0x2b0>)
 8000f12:	685a      	ldr	r2, [r3, #4]
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	4929      	ldr	r1, [pc, #164]	; (8000fc0 <HAL_GPIO_Init+0x2b0>)
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d006      	beq.n	8000f38 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f2a:	4b25      	ldr	r3, [pc, #148]	; (8000fc0 <HAL_GPIO_Init+0x2b0>)
 8000f2c:	689a      	ldr	r2, [r3, #8]
 8000f2e:	4924      	ldr	r1, [pc, #144]	; (8000fc0 <HAL_GPIO_Init+0x2b0>)
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	608b      	str	r3, [r1, #8]
 8000f36:	e006      	b.n	8000f46 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f38:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <HAL_GPIO_Init+0x2b0>)
 8000f3a:	689a      	ldr	r2, [r3, #8]
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	491f      	ldr	r1, [pc, #124]	; (8000fc0 <HAL_GPIO_Init+0x2b0>)
 8000f42:	4013      	ands	r3, r2
 8000f44:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d006      	beq.n	8000f60 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f52:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <HAL_GPIO_Init+0x2b0>)
 8000f54:	68da      	ldr	r2, [r3, #12]
 8000f56:	491a      	ldr	r1, [pc, #104]	; (8000fc0 <HAL_GPIO_Init+0x2b0>)
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	60cb      	str	r3, [r1, #12]
 8000f5e:	e006      	b.n	8000f6e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f60:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <HAL_GPIO_Init+0x2b0>)
 8000f62:	68da      	ldr	r2, [r3, #12]
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	43db      	mvns	r3, r3
 8000f68:	4915      	ldr	r1, [pc, #84]	; (8000fc0 <HAL_GPIO_Init+0x2b0>)
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f70:	3301      	adds	r3, #1
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f47f aed0 	bne.w	8000d24 <HAL_GPIO_Init+0x14>
  }
}
 8000f84:	bf00      	nop
 8000f86:	372c      	adds	r7, #44	; 0x2c
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	10210000 	.word	0x10210000
 8000f94:	10110000 	.word	0x10110000
 8000f98:	10120000 	.word	0x10120000
 8000f9c:	10310000 	.word	0x10310000
 8000fa0:	10320000 	.word	0x10320000
 8000fa4:	10220000 	.word	0x10220000
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	40010000 	.word	0x40010000
 8000fb0:	40010800 	.word	0x40010800
 8000fb4:	40010c00 	.word	0x40010c00
 8000fb8:	40011000 	.word	0x40011000
 8000fbc:	40011400 	.word	0x40011400
 8000fc0:	40010400 	.word	0x40010400

08000fc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	887b      	ldrh	r3, [r7, #2]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d002      	beq.n	8000fe2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	73fb      	strb	r3, [r7, #15]
 8000fe0:	e001      	b.n	8000fe6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr

08000ff2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	807b      	strh	r3, [r7, #2]
 8000ffe:	4613      	mov	r3, r2
 8001000:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001002:	787b      	ldrb	r3, [r7, #1]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001008:	887a      	ldrh	r2, [r7, #2]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800100e:	e003      	b.n	8001018 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001010:	887b      	ldrh	r3, [r7, #2]
 8001012:	041a      	lsls	r2, r3, #16
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	611a      	str	r2, [r3, #16]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr

08001022 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001022:	b480      	push	{r7}
 8001024:	b085      	sub	sp, #20
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
 800102a:	460b      	mov	r3, r1
 800102c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001034:	887a      	ldrh	r2, [r7, #2]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	4013      	ands	r3, r2
 800103a:	041a      	lsls	r2, r3, #16
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	43d9      	mvns	r1, r3
 8001040:	887b      	ldrh	r3, [r7, #2]
 8001042:	400b      	ands	r3, r1
 8001044:	431a      	orrs	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	611a      	str	r2, [r3, #16]
}
 800104a:	bf00      	nop
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001060:	695a      	ldr	r2, [r3, #20]
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	4013      	ands	r3, r2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d006      	beq.n	8001078 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800106a:	4a05      	ldr	r2, [pc, #20]	; (8001080 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800106c:	88fb      	ldrh	r3, [r7, #6]
 800106e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff f8da 	bl	800022c <HAL_GPIO_EXTI_Callback>
  }
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40010400 	.word	0x40010400

08001084 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d101      	bne.n	8001096 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e26c      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f000 8087 	beq.w	80011b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010a4:	4b92      	ldr	r3, [pc, #584]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 030c 	and.w	r3, r3, #12
 80010ac:	2b04      	cmp	r3, #4
 80010ae:	d00c      	beq.n	80010ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010b0:	4b8f      	ldr	r3, [pc, #572]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 030c 	and.w	r3, r3, #12
 80010b8:	2b08      	cmp	r3, #8
 80010ba:	d112      	bne.n	80010e2 <HAL_RCC_OscConfig+0x5e>
 80010bc:	4b8c      	ldr	r3, [pc, #560]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c8:	d10b      	bne.n	80010e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ca:	4b89      	ldr	r3, [pc, #548]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d06c      	beq.n	80011b0 <HAL_RCC_OscConfig+0x12c>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d168      	bne.n	80011b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e246      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ea:	d106      	bne.n	80010fa <HAL_RCC_OscConfig+0x76>
 80010ec:	4b80      	ldr	r3, [pc, #512]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a7f      	ldr	r2, [pc, #508]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80010f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f6:	6013      	str	r3, [r2, #0]
 80010f8:	e02e      	b.n	8001158 <HAL_RCC_OscConfig+0xd4>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d10c      	bne.n	800111c <HAL_RCC_OscConfig+0x98>
 8001102:	4b7b      	ldr	r3, [pc, #492]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a7a      	ldr	r2, [pc, #488]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001108:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	4b78      	ldr	r3, [pc, #480]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a77      	ldr	r2, [pc, #476]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001114:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	e01d      	b.n	8001158 <HAL_RCC_OscConfig+0xd4>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001124:	d10c      	bne.n	8001140 <HAL_RCC_OscConfig+0xbc>
 8001126:	4b72      	ldr	r3, [pc, #456]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a71      	ldr	r2, [pc, #452]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 800112c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	4b6f      	ldr	r3, [pc, #444]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a6e      	ldr	r2, [pc, #440]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	e00b      	b.n	8001158 <HAL_RCC_OscConfig+0xd4>
 8001140:	4b6b      	ldr	r3, [pc, #428]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a6a      	ldr	r2, [pc, #424]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	4b68      	ldr	r3, [pc, #416]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a67      	ldr	r2, [pc, #412]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001152:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001156:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d013      	beq.n	8001188 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001160:	f7ff fc9c 	bl	8000a9c <HAL_GetTick>
 8001164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001166:	e008      	b.n	800117a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001168:	f7ff fc98 	bl	8000a9c <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b64      	cmp	r3, #100	; 0x64
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e1fa      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117a:	4b5d      	ldr	r3, [pc, #372]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d0f0      	beq.n	8001168 <HAL_RCC_OscConfig+0xe4>
 8001186:	e014      	b.n	80011b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001188:	f7ff fc88 	bl	8000a9c <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001190:	f7ff fc84 	bl	8000a9c <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b64      	cmp	r3, #100	; 0x64
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e1e6      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011a2:	4b53      	ldr	r3, [pc, #332]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f0      	bne.n	8001190 <HAL_RCC_OscConfig+0x10c>
 80011ae:	e000      	b.n	80011b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d063      	beq.n	8001286 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011be:	4b4c      	ldr	r3, [pc, #304]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 030c 	and.w	r3, r3, #12
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d00b      	beq.n	80011e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011ca:	4b49      	ldr	r3, [pc, #292]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 030c 	and.w	r3, r3, #12
 80011d2:	2b08      	cmp	r3, #8
 80011d4:	d11c      	bne.n	8001210 <HAL_RCC_OscConfig+0x18c>
 80011d6:	4b46      	ldr	r3, [pc, #280]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d116      	bne.n	8001210 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e2:	4b43      	ldr	r3, [pc, #268]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d005      	beq.n	80011fa <HAL_RCC_OscConfig+0x176>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d001      	beq.n	80011fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e1ba      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fa:	4b3d      	ldr	r3, [pc, #244]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	4939      	ldr	r1, [pc, #228]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 800120a:	4313      	orrs	r3, r2
 800120c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800120e:	e03a      	b.n	8001286 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d020      	beq.n	800125a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001218:	4b36      	ldr	r3, [pc, #216]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 800121a:	2201      	movs	r2, #1
 800121c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121e:	f7ff fc3d 	bl	8000a9c <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001226:	f7ff fc39 	bl	8000a9c <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e19b      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001238:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0f0      	beq.n	8001226 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001244:	4b2a      	ldr	r3, [pc, #168]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	4927      	ldr	r1, [pc, #156]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 8001254:	4313      	orrs	r3, r2
 8001256:	600b      	str	r3, [r1, #0]
 8001258:	e015      	b.n	8001286 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800125a:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <HAL_RCC_OscConfig+0x270>)
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001260:	f7ff fc1c 	bl	8000a9c <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001268:	f7ff fc18 	bl	8000a9c <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e17a      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800127a:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1f0      	bne.n	8001268 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0308 	and.w	r3, r3, #8
 800128e:	2b00      	cmp	r3, #0
 8001290:	d03a      	beq.n	8001308 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d019      	beq.n	80012ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800129a:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <HAL_RCC_OscConfig+0x274>)
 800129c:	2201      	movs	r2, #1
 800129e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a0:	f7ff fbfc 	bl	8000a9c <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012a8:	f7ff fbf8 	bl	8000a9c <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e15a      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ba:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <HAL_RCC_OscConfig+0x26c>)
 80012bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d0f0      	beq.n	80012a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012c6:	2001      	movs	r0, #1
 80012c8:	f000 fada 	bl	8001880 <RCC_Delay>
 80012cc:	e01c      	b.n	8001308 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012ce:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <HAL_RCC_OscConfig+0x274>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d4:	f7ff fbe2 	bl	8000a9c <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012da:	e00f      	b.n	80012fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012dc:	f7ff fbde 	bl	8000a9c <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d908      	bls.n	80012fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e140      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
 80012ee:	bf00      	nop
 80012f0:	40021000 	.word	0x40021000
 80012f4:	42420000 	.word	0x42420000
 80012f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012fc:	4b9e      	ldr	r3, [pc, #632]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80012fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1e9      	bne.n	80012dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 80a6 	beq.w	8001462 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001316:	2300      	movs	r3, #0
 8001318:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800131a:	4b97      	ldr	r3, [pc, #604]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10d      	bne.n	8001342 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	4b94      	ldr	r3, [pc, #592]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	4a93      	ldr	r2, [pc, #588]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 800132c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001330:	61d3      	str	r3, [r2, #28]
 8001332:	4b91      	ldr	r3, [pc, #580]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800133e:	2301      	movs	r3, #1
 8001340:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001342:	4b8e      	ldr	r3, [pc, #568]	; (800157c <HAL_RCC_OscConfig+0x4f8>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800134a:	2b00      	cmp	r3, #0
 800134c:	d118      	bne.n	8001380 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800134e:	4b8b      	ldr	r3, [pc, #556]	; (800157c <HAL_RCC_OscConfig+0x4f8>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a8a      	ldr	r2, [pc, #552]	; (800157c <HAL_RCC_OscConfig+0x4f8>)
 8001354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001358:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800135a:	f7ff fb9f 	bl	8000a9c <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001362:	f7ff fb9b 	bl	8000a9c <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b64      	cmp	r3, #100	; 0x64
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e0fd      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001374:	4b81      	ldr	r3, [pc, #516]	; (800157c <HAL_RCC_OscConfig+0x4f8>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0f0      	beq.n	8001362 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d106      	bne.n	8001396 <HAL_RCC_OscConfig+0x312>
 8001388:	4b7b      	ldr	r3, [pc, #492]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	4a7a      	ldr	r2, [pc, #488]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	6213      	str	r3, [r2, #32]
 8001394:	e02d      	b.n	80013f2 <HAL_RCC_OscConfig+0x36e>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d10c      	bne.n	80013b8 <HAL_RCC_OscConfig+0x334>
 800139e:	4b76      	ldr	r3, [pc, #472]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013a0:	6a1b      	ldr	r3, [r3, #32]
 80013a2:	4a75      	ldr	r2, [pc, #468]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013a4:	f023 0301 	bic.w	r3, r3, #1
 80013a8:	6213      	str	r3, [r2, #32]
 80013aa:	4b73      	ldr	r3, [pc, #460]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	4a72      	ldr	r2, [pc, #456]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013b0:	f023 0304 	bic.w	r3, r3, #4
 80013b4:	6213      	str	r3, [r2, #32]
 80013b6:	e01c      	b.n	80013f2 <HAL_RCC_OscConfig+0x36e>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	2b05      	cmp	r3, #5
 80013be:	d10c      	bne.n	80013da <HAL_RCC_OscConfig+0x356>
 80013c0:	4b6d      	ldr	r3, [pc, #436]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	4a6c      	ldr	r2, [pc, #432]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013c6:	f043 0304 	orr.w	r3, r3, #4
 80013ca:	6213      	str	r3, [r2, #32]
 80013cc:	4b6a      	ldr	r3, [pc, #424]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013ce:	6a1b      	ldr	r3, [r3, #32]
 80013d0:	4a69      	ldr	r2, [pc, #420]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6213      	str	r3, [r2, #32]
 80013d8:	e00b      	b.n	80013f2 <HAL_RCC_OscConfig+0x36e>
 80013da:	4b67      	ldr	r3, [pc, #412]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013dc:	6a1b      	ldr	r3, [r3, #32]
 80013de:	4a66      	ldr	r2, [pc, #408]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013e0:	f023 0301 	bic.w	r3, r3, #1
 80013e4:	6213      	str	r3, [r2, #32]
 80013e6:	4b64      	ldr	r3, [pc, #400]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013e8:	6a1b      	ldr	r3, [r3, #32]
 80013ea:	4a63      	ldr	r2, [pc, #396]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80013ec:	f023 0304 	bic.w	r3, r3, #4
 80013f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d015      	beq.n	8001426 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fa:	f7ff fb4f 	bl	8000a9c <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001400:	e00a      	b.n	8001418 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001402:	f7ff fb4b 	bl	8000a9c <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001410:	4293      	cmp	r3, r2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e0ab      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001418:	4b57      	ldr	r3, [pc, #348]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0ee      	beq.n	8001402 <HAL_RCC_OscConfig+0x37e>
 8001424:	e014      	b.n	8001450 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001426:	f7ff fb39 	bl	8000a9c <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800142c:	e00a      	b.n	8001444 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800142e:	f7ff fb35 	bl	8000a9c <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	f241 3288 	movw	r2, #5000	; 0x1388
 800143c:	4293      	cmp	r3, r2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e095      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001444:	4b4c      	ldr	r3, [pc, #304]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1ee      	bne.n	800142e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001450:	7dfb      	ldrb	r3, [r7, #23]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d105      	bne.n	8001462 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001456:	4b48      	ldr	r3, [pc, #288]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	4a47      	ldr	r2, [pc, #284]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 800145c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001460:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	2b00      	cmp	r3, #0
 8001468:	f000 8081 	beq.w	800156e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800146c:	4b42      	ldr	r3, [pc, #264]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 030c 	and.w	r3, r3, #12
 8001474:	2b08      	cmp	r3, #8
 8001476:	d061      	beq.n	800153c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69db      	ldr	r3, [r3, #28]
 800147c:	2b02      	cmp	r3, #2
 800147e:	d146      	bne.n	800150e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001480:	4b3f      	ldr	r3, [pc, #252]	; (8001580 <HAL_RCC_OscConfig+0x4fc>)
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001486:	f7ff fb09 	bl	8000a9c <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800148e:	f7ff fb05 	bl	8000a9c <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e067      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014a0:	4b35      	ldr	r3, [pc, #212]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1f0      	bne.n	800148e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014b4:	d108      	bne.n	80014c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014b6:	4b30      	ldr	r3, [pc, #192]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	492d      	ldr	r1, [pc, #180]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80014c4:	4313      	orrs	r3, r2
 80014c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014c8:	4b2b      	ldr	r3, [pc, #172]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a19      	ldr	r1, [r3, #32]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d8:	430b      	orrs	r3, r1
 80014da:	4927      	ldr	r1, [pc, #156]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014e0:	4b27      	ldr	r3, [pc, #156]	; (8001580 <HAL_RCC_OscConfig+0x4fc>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e6:	f7ff fad9 	bl	8000a9c <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ee:	f7ff fad5 	bl	8000a9c <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e037      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001500:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0f0      	beq.n	80014ee <HAL_RCC_OscConfig+0x46a>
 800150c:	e02f      	b.n	800156e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800150e:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <HAL_RCC_OscConfig+0x4fc>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001514:	f7ff fac2 	bl	8000a9c <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800151c:	f7ff fabe 	bl	8000a9c <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e020      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800152e:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f0      	bne.n	800151c <HAL_RCC_OscConfig+0x498>
 800153a:	e018      	b.n	800156e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	69db      	ldr	r3, [r3, #28]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d101      	bne.n	8001548 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e013      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001548:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <HAL_RCC_OscConfig+0x4f4>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	429a      	cmp	r2, r3
 800155a:	d106      	bne.n	800156a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001566:	429a      	cmp	r2, r3
 8001568:	d001      	beq.n	800156e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e000      	b.n	8001570 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40021000 	.word	0x40021000
 800157c:	40007000 	.word	0x40007000
 8001580:	42420060 	.word	0x42420060

08001584 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e0d0      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001598:	4b6a      	ldr	r3, [pc, #424]	; (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d910      	bls.n	80015c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a6:	4b67      	ldr	r3, [pc, #412]	; (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f023 0207 	bic.w	r2, r3, #7
 80015ae:	4965      	ldr	r1, [pc, #404]	; (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b6:	4b63      	ldr	r3, [pc, #396]	; (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d001      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e0b8      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d020      	beq.n	8001616 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015e0:	4b59      	ldr	r3, [pc, #356]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	4a58      	ldr	r2, [pc, #352]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80015e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0308 	and.w	r3, r3, #8
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d005      	beq.n	8001604 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015f8:	4b53      	ldr	r3, [pc, #332]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	4a52      	ldr	r2, [pc, #328]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80015fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001602:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001604:	4b50      	ldr	r3, [pc, #320]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	494d      	ldr	r1, [pc, #308]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001612:	4313      	orrs	r3, r2
 8001614:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	d040      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d107      	bne.n	800163a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162a:	4b47      	ldr	r3, [pc, #284]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d115      	bne.n	8001662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e07f      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d107      	bne.n	8001652 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001642:	4b41      	ldr	r3, [pc, #260]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d109      	bne.n	8001662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e073      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001652:	4b3d      	ldr	r3, [pc, #244]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e06b      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001662:	4b39      	ldr	r3, [pc, #228]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f023 0203 	bic.w	r2, r3, #3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	4936      	ldr	r1, [pc, #216]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001670:	4313      	orrs	r3, r2
 8001672:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001674:	f7ff fa12 	bl	8000a9c <HAL_GetTick>
 8001678:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800167a:	e00a      	b.n	8001692 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800167c:	f7ff fa0e 	bl	8000a9c <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	f241 3288 	movw	r2, #5000	; 0x1388
 800168a:	4293      	cmp	r3, r2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e053      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001692:	4b2d      	ldr	r3, [pc, #180]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 020c 	and.w	r2, r3, #12
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d1eb      	bne.n	800167c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016a4:	4b27      	ldr	r3, [pc, #156]	; (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d210      	bcs.n	80016d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b2:	4b24      	ldr	r3, [pc, #144]	; (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f023 0207 	bic.w	r2, r3, #7
 80016ba:	4922      	ldr	r1, [pc, #136]	; (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	4313      	orrs	r3, r2
 80016c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c2:	4b20      	ldr	r3, [pc, #128]	; (8001744 <HAL_RCC_ClockConfig+0x1c0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d001      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e032      	b.n	800173a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d008      	beq.n	80016f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016e0:	4b19      	ldr	r3, [pc, #100]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	4916      	ldr	r1, [pc, #88]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d009      	beq.n	8001712 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016fe:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	490e      	ldr	r1, [pc, #56]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 800170e:	4313      	orrs	r3, r2
 8001710:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001712:	f000 f821 	bl	8001758 <HAL_RCC_GetSysClockFreq>
 8001716:	4601      	mov	r1, r0
 8001718:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <HAL_RCC_ClockConfig+0x1c4>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	091b      	lsrs	r3, r3, #4
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	4a0a      	ldr	r2, [pc, #40]	; (800174c <HAL_RCC_ClockConfig+0x1c8>)
 8001724:	5cd3      	ldrb	r3, [r2, r3]
 8001726:	fa21 f303 	lsr.w	r3, r1, r3
 800172a:	4a09      	ldr	r2, [pc, #36]	; (8001750 <HAL_RCC_ClockConfig+0x1cc>)
 800172c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <HAL_RCC_ClockConfig+0x1d0>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff f970 	bl	8000a18 <HAL_InitTick>

  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40022000 	.word	0x40022000
 8001748:	40021000 	.word	0x40021000
 800174c:	08003408 	.word	0x08003408
 8001750:	20000000 	.word	0x20000000
 8001754:	20000004 	.word	0x20000004

08001758 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001758:	b490      	push	{r4, r7}
 800175a:	b08a      	sub	sp, #40	; 0x28
 800175c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800175e:	4b2a      	ldr	r3, [pc, #168]	; (8001808 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001760:	1d3c      	adds	r4, r7, #4
 8001762:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001764:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001768:	4b28      	ldr	r3, [pc, #160]	; (800180c <HAL_RCC_GetSysClockFreq+0xb4>)
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
 8001776:	2300      	movs	r3, #0
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800177e:	2300      	movs	r3, #0
 8001780:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001782:	4b23      	ldr	r3, [pc, #140]	; (8001810 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f003 030c 	and.w	r3, r3, #12
 800178e:	2b04      	cmp	r3, #4
 8001790:	d002      	beq.n	8001798 <HAL_RCC_GetSysClockFreq+0x40>
 8001792:	2b08      	cmp	r3, #8
 8001794:	d003      	beq.n	800179e <HAL_RCC_GetSysClockFreq+0x46>
 8001796:	e02d      	b.n	80017f4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001798:	4b1e      	ldr	r3, [pc, #120]	; (8001814 <HAL_RCC_GetSysClockFreq+0xbc>)
 800179a:	623b      	str	r3, [r7, #32]
      break;
 800179c:	e02d      	b.n	80017fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	0c9b      	lsrs	r3, r3, #18
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017aa:	4413      	add	r3, r2
 80017ac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80017b0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d013      	beq.n	80017e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017bc:	4b14      	ldr	r3, [pc, #80]	; (8001810 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	0c5b      	lsrs	r3, r3, #17
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017ca:	4413      	add	r3, r2
 80017cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80017d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	4a0f      	ldr	r2, [pc, #60]	; (8001814 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017d6:	fb02 f203 	mul.w	r2, r2, r3
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
 80017e2:	e004      	b.n	80017ee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	4a0c      	ldr	r2, [pc, #48]	; (8001818 <HAL_RCC_GetSysClockFreq+0xc0>)
 80017e8:	fb02 f303 	mul.w	r3, r2, r3
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	623b      	str	r3, [r7, #32]
      break;
 80017f2:	e002      	b.n	80017fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017f4:	4b07      	ldr	r3, [pc, #28]	; (8001814 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017f6:	623b      	str	r3, [r7, #32]
      break;
 80017f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017fa:	6a3b      	ldr	r3, [r7, #32]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3728      	adds	r7, #40	; 0x28
 8001800:	46bd      	mov	sp, r7
 8001802:	bc90      	pop	{r4, r7}
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	080033f4 	.word	0x080033f4
 800180c:	08003404 	.word	0x08003404
 8001810:	40021000 	.word	0x40021000
 8001814:	007a1200 	.word	0x007a1200
 8001818:	003d0900 	.word	0x003d0900

0800181c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001820:	4b02      	ldr	r3, [pc, #8]	; (800182c <HAL_RCC_GetHCLKFreq+0x10>)
 8001822:	681b      	ldr	r3, [r3, #0]
}
 8001824:	4618      	mov	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr
 800182c:	20000000 	.word	0x20000000

08001830 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001834:	f7ff fff2 	bl	800181c <HAL_RCC_GetHCLKFreq>
 8001838:	4601      	mov	r1, r0
 800183a:	4b05      	ldr	r3, [pc, #20]	; (8001850 <HAL_RCC_GetPCLK1Freq+0x20>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	0a1b      	lsrs	r3, r3, #8
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	4a03      	ldr	r2, [pc, #12]	; (8001854 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001846:	5cd3      	ldrb	r3, [r2, r3]
 8001848:	fa21 f303 	lsr.w	r3, r1, r3
}
 800184c:	4618      	mov	r0, r3
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40021000 	.word	0x40021000
 8001854:	08003418 	.word	0x08003418

08001858 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800185c:	f7ff ffde 	bl	800181c <HAL_RCC_GetHCLKFreq>
 8001860:	4601      	mov	r1, r0
 8001862:	4b05      	ldr	r3, [pc, #20]	; (8001878 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	0adb      	lsrs	r3, r3, #11
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	4a03      	ldr	r2, [pc, #12]	; (800187c <HAL_RCC_GetPCLK2Freq+0x24>)
 800186e:	5cd3      	ldrb	r3, [r2, r3]
 8001870:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001874:	4618      	mov	r0, r3
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40021000 	.word	0x40021000
 800187c:	08003418 	.word	0x08003418

08001880 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001888:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <RCC_Delay+0x34>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <RCC_Delay+0x38>)
 800188e:	fba2 2303 	umull	r2, r3, r2, r3
 8001892:	0a5b      	lsrs	r3, r3, #9
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	fb02 f303 	mul.w	r3, r2, r3
 800189a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800189c:	bf00      	nop
  }
  while (Delay --);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	1e5a      	subs	r2, r3, #1
 80018a2:	60fa      	str	r2, [r7, #12]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1f9      	bne.n	800189c <RCC_Delay+0x1c>
}
 80018a8:	bf00      	nop
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	20000000 	.word	0x20000000
 80018b8:	10624dd3 	.word	0x10624dd3

080018bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e041      	b.n	8001952 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d106      	bne.n	80018e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7fe ff18 	bl	8000718 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2202      	movs	r2, #2
 80018ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3304      	adds	r3, #4
 80018f8:	4619      	mov	r1, r3
 80018fa:	4610      	mov	r0, r2
 80018fc:	f000 fa64 	bl	8001dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
	...

0800195c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b01      	cmp	r3, #1
 800196e:	d001      	beq.n	8001974 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e03a      	b.n	80019ea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2202      	movs	r2, #2
 8001978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68da      	ldr	r2, [r3, #12]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 0201 	orr.w	r2, r2, #1
 800198a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a18      	ldr	r2, [pc, #96]	; (80019f4 <HAL_TIM_Base_Start_IT+0x98>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d00e      	beq.n	80019b4 <HAL_TIM_Base_Start_IT+0x58>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800199e:	d009      	beq.n	80019b4 <HAL_TIM_Base_Start_IT+0x58>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a14      	ldr	r2, [pc, #80]	; (80019f8 <HAL_TIM_Base_Start_IT+0x9c>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d004      	beq.n	80019b4 <HAL_TIM_Base_Start_IT+0x58>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a13      	ldr	r2, [pc, #76]	; (80019fc <HAL_TIM_Base_Start_IT+0xa0>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d111      	bne.n	80019d8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2b06      	cmp	r3, #6
 80019c4:	d010      	beq.n	80019e8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f042 0201 	orr.w	r2, r2, #1
 80019d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019d6:	e007      	b.n	80019e8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0201 	orr.w	r2, r2, #1
 80019e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr
 80019f4:	40012c00 	.word	0x40012c00
 80019f8:	40000400 	.word	0x40000400
 80019fc:	40000800 	.word	0x40000800

08001a00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d122      	bne.n	8001a5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d11b      	bne.n	8001a5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f06f 0202 	mvn.w	r2, #2
 8001a2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 f9a4 	bl	8001d90 <HAL_TIM_IC_CaptureCallback>
 8001a48:	e005      	b.n	8001a56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 f997 	bl	8001d7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 f9a6 	bl	8001da2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d122      	bne.n	8001ab0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b04      	cmp	r3, #4
 8001a76:	d11b      	bne.n	8001ab0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f06f 0204 	mvn.w	r2, #4
 8001a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2202      	movs	r2, #2
 8001a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f97a 	bl	8001d90 <HAL_TIM_IC_CaptureCallback>
 8001a9c:	e005      	b.n	8001aaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f96d 	bl	8001d7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f97c 	bl	8001da2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	2b08      	cmp	r3, #8
 8001abc:	d122      	bne.n	8001b04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	d11b      	bne.n	8001b04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f06f 0208 	mvn.w	r2, #8
 8001ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2204      	movs	r2, #4
 8001ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 f950 	bl	8001d90 <HAL_TIM_IC_CaptureCallback>
 8001af0:	e005      	b.n	8001afe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f943 	bl	8001d7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f952 	bl	8001da2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	f003 0310 	and.w	r3, r3, #16
 8001b0e:	2b10      	cmp	r3, #16
 8001b10:	d122      	bne.n	8001b58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	f003 0310 	and.w	r3, r3, #16
 8001b1c:	2b10      	cmp	r3, #16
 8001b1e:	d11b      	bne.n	8001b58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f06f 0210 	mvn.w	r2, #16
 8001b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2208      	movs	r2, #8
 8001b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f926 	bl	8001d90 <HAL_TIM_IC_CaptureCallback>
 8001b44:	e005      	b.n	8001b52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f919 	bl	8001d7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 f928 	bl	8001da2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d10e      	bne.n	8001b84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d107      	bne.n	8001b84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f06f 0201 	mvn.w	r2, #1
 8001b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7fe fb36 	bl	80001f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b8e:	2b80      	cmp	r3, #128	; 0x80
 8001b90:	d10e      	bne.n	8001bb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b9c:	2b80      	cmp	r3, #128	; 0x80
 8001b9e:	d107      	bne.n	8001bb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 fa6b 	bl	8002086 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bba:	2b40      	cmp	r3, #64	; 0x40
 8001bbc:	d10e      	bne.n	8001bdc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bc8:	2b40      	cmp	r3, #64	; 0x40
 8001bca:	d107      	bne.n	8001bdc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 f8ec 	bl	8001db4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	f003 0320 	and.w	r3, r3, #32
 8001be6:	2b20      	cmp	r3, #32
 8001be8:	d10e      	bne.n	8001c08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	f003 0320 	and.w	r3, r3, #32
 8001bf4:	2b20      	cmp	r3, #32
 8001bf6:	d107      	bne.n	8001c08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f06f 0220 	mvn.w	r2, #32
 8001c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 fa36 	bl	8002074 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <HAL_TIM_ConfigClockSource+0x18>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e0a6      	b.n	8001d76 <HAL_TIM_ConfigClockSource+0x166>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2202      	movs	r2, #2
 8001c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001c46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b40      	cmp	r3, #64	; 0x40
 8001c5e:	d067      	beq.n	8001d30 <HAL_TIM_ConfigClockSource+0x120>
 8001c60:	2b40      	cmp	r3, #64	; 0x40
 8001c62:	d80b      	bhi.n	8001c7c <HAL_TIM_ConfigClockSource+0x6c>
 8001c64:	2b10      	cmp	r3, #16
 8001c66:	d073      	beq.n	8001d50 <HAL_TIM_ConfigClockSource+0x140>
 8001c68:	2b10      	cmp	r3, #16
 8001c6a:	d802      	bhi.n	8001c72 <HAL_TIM_ConfigClockSource+0x62>
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d06f      	beq.n	8001d50 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001c70:	e078      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001c72:	2b20      	cmp	r3, #32
 8001c74:	d06c      	beq.n	8001d50 <HAL_TIM_ConfigClockSource+0x140>
 8001c76:	2b30      	cmp	r3, #48	; 0x30
 8001c78:	d06a      	beq.n	8001d50 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001c7a:	e073      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001c7c:	2b70      	cmp	r3, #112	; 0x70
 8001c7e:	d00d      	beq.n	8001c9c <HAL_TIM_ConfigClockSource+0x8c>
 8001c80:	2b70      	cmp	r3, #112	; 0x70
 8001c82:	d804      	bhi.n	8001c8e <HAL_TIM_ConfigClockSource+0x7e>
 8001c84:	2b50      	cmp	r3, #80	; 0x50
 8001c86:	d033      	beq.n	8001cf0 <HAL_TIM_ConfigClockSource+0xe0>
 8001c88:	2b60      	cmp	r3, #96	; 0x60
 8001c8a:	d041      	beq.n	8001d10 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001c8c:	e06a      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c92:	d066      	beq.n	8001d62 <HAL_TIM_ConfigClockSource+0x152>
 8001c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c98:	d017      	beq.n	8001cca <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001c9a:	e063      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6818      	ldr	r0, [r3, #0]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	6899      	ldr	r1, [r3, #8]
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	f000 f965 	bl	8001f7a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001cbe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	609a      	str	r2, [r3, #8]
      break;
 8001cc8:	e04c      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6818      	ldr	r0, [r3, #0]
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	6899      	ldr	r1, [r3, #8]
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	f000 f94e 	bl	8001f7a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cec:	609a      	str	r2, [r3, #8]
      break;
 8001cee:	e039      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6818      	ldr	r0, [r3, #0]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	6859      	ldr	r1, [r3, #4]
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	f000 f8c5 	bl	8001e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2150      	movs	r1, #80	; 0x50
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f000 f91c 	bl	8001f46 <TIM_ITRx_SetConfig>
      break;
 8001d0e:	e029      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6818      	ldr	r0, [r3, #0]
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	6859      	ldr	r1, [r3, #4]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	f000 f8e3 	bl	8001ee8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2160      	movs	r1, #96	; 0x60
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f000 f90c 	bl	8001f46 <TIM_ITRx_SetConfig>
      break;
 8001d2e:	e019      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	6859      	ldr	r1, [r3, #4]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	f000 f8a5 	bl	8001e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2140      	movs	r1, #64	; 0x40
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f000 f8fc 	bl	8001f46 <TIM_ITRx_SetConfig>
      break;
 8001d4e:	e009      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	f000 f8f3 	bl	8001f46 <TIM_ITRx_SetConfig>
        break;
 8001d60:	e000      	b.n	8001d64 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001d62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr

08001d90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr

08001da2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr

08001db4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	4770      	bx	lr
	...

08001dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a29      	ldr	r2, [pc, #164]	; (8001e80 <TIM_Base_SetConfig+0xb8>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d00b      	beq.n	8001df8 <TIM_Base_SetConfig+0x30>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de6:	d007      	beq.n	8001df8 <TIM_Base_SetConfig+0x30>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a26      	ldr	r2, [pc, #152]	; (8001e84 <TIM_Base_SetConfig+0xbc>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d003      	beq.n	8001df8 <TIM_Base_SetConfig+0x30>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a25      	ldr	r2, [pc, #148]	; (8001e88 <TIM_Base_SetConfig+0xc0>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d108      	bne.n	8001e0a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a1c      	ldr	r2, [pc, #112]	; (8001e80 <TIM_Base_SetConfig+0xb8>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d00b      	beq.n	8001e2a <TIM_Base_SetConfig+0x62>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e18:	d007      	beq.n	8001e2a <TIM_Base_SetConfig+0x62>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a19      	ldr	r2, [pc, #100]	; (8001e84 <TIM_Base_SetConfig+0xbc>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d003      	beq.n	8001e2a <TIM_Base_SetConfig+0x62>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a18      	ldr	r2, [pc, #96]	; (8001e88 <TIM_Base_SetConfig+0xc0>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d108      	bne.n	8001e3c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a07      	ldr	r2, [pc, #28]	; (8001e80 <TIM_Base_SetConfig+0xb8>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d103      	bne.n	8001e70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	691a      	ldr	r2, [r3, #16]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	615a      	str	r2, [r3, #20]
}
 8001e76:	bf00      	nop
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr
 8001e80:	40012c00 	.word	0x40012c00
 8001e84:	40000400 	.word	0x40000400
 8001e88:	40000800 	.word	0x40000800

08001e8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b087      	sub	sp, #28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	f023 0201 	bic.w	r2, r3, #1
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001eb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	011b      	lsls	r3, r3, #4
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f023 030a 	bic.w	r3, r3, #10
 8001ec8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	621a      	str	r2, [r3, #32]
}
 8001ede:	bf00      	nop
 8001ee0:	371c      	adds	r7, #28
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr

08001ee8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b087      	sub	sp, #28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	f023 0210 	bic.w	r2, r3, #16
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001f12:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	031b      	lsls	r3, r3, #12
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001f24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	011b      	lsls	r3, r3, #4
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	621a      	str	r2, [r3, #32]
}
 8001f3c:	bf00      	nop
 8001f3e:	371c      	adds	r7, #28
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr

08001f46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b085      	sub	sp, #20
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	f043 0307 	orr.w	r3, r3, #7
 8001f68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	609a      	str	r2, [r3, #8]
}
 8001f70:	bf00      	nop
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr

08001f7a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b087      	sub	sp, #28
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	60f8      	str	r0, [r7, #12]
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	607a      	str	r2, [r7, #4]
 8001f86:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f94:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	021a      	lsls	r2, r3, #8
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	609a      	str	r2, [r3, #8]
}
 8001fae:	bf00      	nop
 8001fb0:	371c      	adds	r7, #28
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d101      	bne.n	8001fd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	e046      	b.n	800205e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2202      	movs	r2, #2
 8001fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a16      	ldr	r2, [pc, #88]	; (8002068 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d00e      	beq.n	8002032 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800201c:	d009      	beq.n	8002032 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a12      	ldr	r2, [pc, #72]	; (800206c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d004      	beq.n	8002032 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a10      	ldr	r2, [pc, #64]	; (8002070 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d10c      	bne.n	800204c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002038:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	4313      	orrs	r3, r2
 8002042:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68ba      	ldr	r2, [r7, #8]
 800204a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr
 8002068:	40012c00 	.word	0x40012c00
 800206c:	40000400 	.word	0x40000400
 8002070:	40000800 	.word	0x40000800

08002074 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr

08002086 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr

08002098 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e03f      	b.n	800212a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d106      	bne.n	80020c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7fe fb50 	bl	8000764 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2224      	movs	r2, #36	; 0x24
 80020c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f905 	bl	80022ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	691a      	ldr	r2, [r3, #16]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	695a      	ldr	r2, [r3, #20]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002100:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68da      	ldr	r2, [r3, #12]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002110:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2220      	movs	r2, #32
 800211c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2220      	movs	r2, #32
 8002124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b08a      	sub	sp, #40	; 0x28
 8002136:	af02      	add	r7, sp, #8
 8002138:	60f8      	str	r0, [r7, #12]
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	603b      	str	r3, [r7, #0]
 800213e:	4613      	mov	r3, r2
 8002140:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b20      	cmp	r3, #32
 8002150:	d17c      	bne.n	800224c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d002      	beq.n	800215e <HAL_UART_Transmit+0x2c>
 8002158:	88fb      	ldrh	r3, [r7, #6]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e075      	b.n	800224e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002168:	2b01      	cmp	r3, #1
 800216a:	d101      	bne.n	8002170 <HAL_UART_Transmit+0x3e>
 800216c:	2302      	movs	r3, #2
 800216e:	e06e      	b.n	800224e <HAL_UART_Transmit+0x11c>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2221      	movs	r2, #33	; 0x21
 8002182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002186:	f7fe fc89 	bl	8000a9c <HAL_GetTick>
 800218a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	88fa      	ldrh	r2, [r7, #6]
 8002190:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	88fa      	ldrh	r2, [r7, #6]
 8002196:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021a0:	d108      	bne.n	80021b4 <HAL_UART_Transmit+0x82>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d104      	bne.n	80021b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	61bb      	str	r3, [r7, #24]
 80021b2:	e003      	b.n	80021bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80021c4:	e02a      	b.n	800221c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2200      	movs	r2, #0
 80021ce:	2180      	movs	r1, #128	; 0x80
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f000 f840 	bl	8002256 <UART_WaitOnFlagUntilTimeout>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e036      	b.n	800224e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10b      	bne.n	80021fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	881b      	ldrh	r3, [r3, #0]
 80021ea:	461a      	mov	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	3302      	adds	r3, #2
 80021fa:	61bb      	str	r3, [r7, #24]
 80021fc:	e007      	b.n	800220e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	781a      	ldrb	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	3301      	adds	r3, #1
 800220c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002212:	b29b      	uxth	r3, r3
 8002214:	3b01      	subs	r3, #1
 8002216:	b29a      	uxth	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002220:	b29b      	uxth	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1cf      	bne.n	80021c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	2200      	movs	r2, #0
 800222e:	2140      	movs	r1, #64	; 0x40
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 f810 	bl	8002256 <UART_WaitOnFlagUntilTimeout>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e006      	b.n	800224e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2220      	movs	r2, #32
 8002244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002248:	2300      	movs	r3, #0
 800224a:	e000      	b.n	800224e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800224c:	2302      	movs	r3, #2
  }
}
 800224e:	4618      	mov	r0, r3
 8002250:	3720      	adds	r7, #32
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b084      	sub	sp, #16
 800225a:	af00      	add	r7, sp, #0
 800225c:	60f8      	str	r0, [r7, #12]
 800225e:	60b9      	str	r1, [r7, #8]
 8002260:	603b      	str	r3, [r7, #0]
 8002262:	4613      	mov	r3, r2
 8002264:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002266:	e02c      	b.n	80022c2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226e:	d028      	beq.n	80022c2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d007      	beq.n	8002286 <UART_WaitOnFlagUntilTimeout+0x30>
 8002276:	f7fe fc11 	bl	8000a9c <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	429a      	cmp	r2, r3
 8002284:	d21d      	bcs.n	80022c2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68da      	ldr	r2, [r3, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002294:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	695a      	ldr	r2, [r3, #20]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0201 	bic.w	r2, r2, #1
 80022a4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2220      	movs	r2, #32
 80022aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2220      	movs	r2, #32
 80022b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e00f      	b.n	80022e2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	4013      	ands	r3, r2
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	bf0c      	ite	eq
 80022d2:	2301      	moveq	r3, #1
 80022d4:	2300      	movne	r3, #0
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	461a      	mov	r2, r3
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d0c3      	beq.n	8002268 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	430a      	orrs	r2, r1
 8002308:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	4313      	orrs	r3, r2
 800231a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002326:	f023 030c 	bic.w	r3, r3, #12
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6812      	ldr	r2, [r2, #0]
 800232e:	68b9      	ldr	r1, [r7, #8]
 8002330:	430b      	orrs	r3, r1
 8002332:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	699a      	ldr	r2, [r3, #24]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a2c      	ldr	r2, [pc, #176]	; (8002400 <UART_SetConfig+0x114>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d103      	bne.n	800235c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002354:	f7ff fa80 	bl	8001858 <HAL_RCC_GetPCLK2Freq>
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	e002      	b.n	8002362 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800235c:	f7ff fa68 	bl	8001830 <HAL_RCC_GetPCLK1Freq>
 8002360:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	009a      	lsls	r2, r3, #2
 800236c:	441a      	add	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	fbb2 f3f3 	udiv	r3, r2, r3
 8002378:	4a22      	ldr	r2, [pc, #136]	; (8002404 <UART_SetConfig+0x118>)
 800237a:	fba2 2303 	umull	r2, r3, r2, r3
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	0119      	lsls	r1, r3, #4
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	009a      	lsls	r2, r3, #2
 800238c:	441a      	add	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	fbb2 f2f3 	udiv	r2, r2, r3
 8002398:	4b1a      	ldr	r3, [pc, #104]	; (8002404 <UART_SetConfig+0x118>)
 800239a:	fba3 0302 	umull	r0, r3, r3, r2
 800239e:	095b      	lsrs	r3, r3, #5
 80023a0:	2064      	movs	r0, #100	; 0x64
 80023a2:	fb00 f303 	mul.w	r3, r0, r3
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	011b      	lsls	r3, r3, #4
 80023aa:	3332      	adds	r3, #50	; 0x32
 80023ac:	4a15      	ldr	r2, [pc, #84]	; (8002404 <UART_SetConfig+0x118>)
 80023ae:	fba2 2303 	umull	r2, r3, r2, r3
 80023b2:	095b      	lsrs	r3, r3, #5
 80023b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023b8:	4419      	add	r1, r3
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	4613      	mov	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	009a      	lsls	r2, r3, #2
 80023c4:	441a      	add	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80023d0:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <UART_SetConfig+0x118>)
 80023d2:	fba3 0302 	umull	r0, r3, r3, r2
 80023d6:	095b      	lsrs	r3, r3, #5
 80023d8:	2064      	movs	r0, #100	; 0x64
 80023da:	fb00 f303 	mul.w	r3, r0, r3
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	3332      	adds	r3, #50	; 0x32
 80023e4:	4a07      	ldr	r2, [pc, #28]	; (8002404 <UART_SetConfig+0x118>)
 80023e6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ea:	095b      	lsrs	r3, r3, #5
 80023ec:	f003 020f 	and.w	r2, r3, #15
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	440a      	add	r2, r1
 80023f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80023f8:	bf00      	nop
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40013800 	.word	0x40013800
 8002404:	51eb851f 	.word	0x51eb851f

08002408 <__errno>:
 8002408:	4b01      	ldr	r3, [pc, #4]	; (8002410 <__errno+0x8>)
 800240a:	6818      	ldr	r0, [r3, #0]
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	2000000c 	.word	0x2000000c

08002414 <__libc_init_array>:
 8002414:	b570      	push	{r4, r5, r6, lr}
 8002416:	2500      	movs	r5, #0
 8002418:	4e0c      	ldr	r6, [pc, #48]	; (800244c <__libc_init_array+0x38>)
 800241a:	4c0d      	ldr	r4, [pc, #52]	; (8002450 <__libc_init_array+0x3c>)
 800241c:	1ba4      	subs	r4, r4, r6
 800241e:	10a4      	asrs	r4, r4, #2
 8002420:	42a5      	cmp	r5, r4
 8002422:	d109      	bne.n	8002438 <__libc_init_array+0x24>
 8002424:	f000 ff74 	bl	8003310 <_init>
 8002428:	2500      	movs	r5, #0
 800242a:	4e0a      	ldr	r6, [pc, #40]	; (8002454 <__libc_init_array+0x40>)
 800242c:	4c0a      	ldr	r4, [pc, #40]	; (8002458 <__libc_init_array+0x44>)
 800242e:	1ba4      	subs	r4, r4, r6
 8002430:	10a4      	asrs	r4, r4, #2
 8002432:	42a5      	cmp	r5, r4
 8002434:	d105      	bne.n	8002442 <__libc_init_array+0x2e>
 8002436:	bd70      	pop	{r4, r5, r6, pc}
 8002438:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800243c:	4798      	blx	r3
 800243e:	3501      	adds	r5, #1
 8002440:	e7ee      	b.n	8002420 <__libc_init_array+0xc>
 8002442:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002446:	4798      	blx	r3
 8002448:	3501      	adds	r5, #1
 800244a:	e7f2      	b.n	8002432 <__libc_init_array+0x1e>
 800244c:	080034b8 	.word	0x080034b8
 8002450:	080034b8 	.word	0x080034b8
 8002454:	080034b8 	.word	0x080034b8
 8002458:	080034bc 	.word	0x080034bc

0800245c <memset>:
 800245c:	4603      	mov	r3, r0
 800245e:	4402      	add	r2, r0
 8002460:	4293      	cmp	r3, r2
 8002462:	d100      	bne.n	8002466 <memset+0xa>
 8002464:	4770      	bx	lr
 8002466:	f803 1b01 	strb.w	r1, [r3], #1
 800246a:	e7f9      	b.n	8002460 <memset+0x4>

0800246c <iprintf>:
 800246c:	b40f      	push	{r0, r1, r2, r3}
 800246e:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <iprintf+0x2c>)
 8002470:	b513      	push	{r0, r1, r4, lr}
 8002472:	681c      	ldr	r4, [r3, #0]
 8002474:	b124      	cbz	r4, 8002480 <iprintf+0x14>
 8002476:	69a3      	ldr	r3, [r4, #24]
 8002478:	b913      	cbnz	r3, 8002480 <iprintf+0x14>
 800247a:	4620      	mov	r0, r4
 800247c:	f000 fa22 	bl	80028c4 <__sinit>
 8002480:	ab05      	add	r3, sp, #20
 8002482:	9a04      	ldr	r2, [sp, #16]
 8002484:	68a1      	ldr	r1, [r4, #8]
 8002486:	4620      	mov	r0, r4
 8002488:	9301      	str	r3, [sp, #4]
 800248a:	f000 fbd7 	bl	8002c3c <_vfiprintf_r>
 800248e:	b002      	add	sp, #8
 8002490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002494:	b004      	add	sp, #16
 8002496:	4770      	bx	lr
 8002498:	2000000c 	.word	0x2000000c

0800249c <_puts_r>:
 800249c:	b570      	push	{r4, r5, r6, lr}
 800249e:	460e      	mov	r6, r1
 80024a0:	4605      	mov	r5, r0
 80024a2:	b118      	cbz	r0, 80024ac <_puts_r+0x10>
 80024a4:	6983      	ldr	r3, [r0, #24]
 80024a6:	b90b      	cbnz	r3, 80024ac <_puts_r+0x10>
 80024a8:	f000 fa0c 	bl	80028c4 <__sinit>
 80024ac:	69ab      	ldr	r3, [r5, #24]
 80024ae:	68ac      	ldr	r4, [r5, #8]
 80024b0:	b913      	cbnz	r3, 80024b8 <_puts_r+0x1c>
 80024b2:	4628      	mov	r0, r5
 80024b4:	f000 fa06 	bl	80028c4 <__sinit>
 80024b8:	4b23      	ldr	r3, [pc, #140]	; (8002548 <_puts_r+0xac>)
 80024ba:	429c      	cmp	r4, r3
 80024bc:	d117      	bne.n	80024ee <_puts_r+0x52>
 80024be:	686c      	ldr	r4, [r5, #4]
 80024c0:	89a3      	ldrh	r3, [r4, #12]
 80024c2:	071b      	lsls	r3, r3, #28
 80024c4:	d51d      	bpl.n	8002502 <_puts_r+0x66>
 80024c6:	6923      	ldr	r3, [r4, #16]
 80024c8:	b1db      	cbz	r3, 8002502 <_puts_r+0x66>
 80024ca:	3e01      	subs	r6, #1
 80024cc:	68a3      	ldr	r3, [r4, #8]
 80024ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80024d2:	3b01      	subs	r3, #1
 80024d4:	60a3      	str	r3, [r4, #8]
 80024d6:	b9e9      	cbnz	r1, 8002514 <_puts_r+0x78>
 80024d8:	2b00      	cmp	r3, #0
 80024da:	da2e      	bge.n	800253a <_puts_r+0x9e>
 80024dc:	4622      	mov	r2, r4
 80024de:	210a      	movs	r1, #10
 80024e0:	4628      	mov	r0, r5
 80024e2:	f000 f83f 	bl	8002564 <__swbuf_r>
 80024e6:	3001      	adds	r0, #1
 80024e8:	d011      	beq.n	800250e <_puts_r+0x72>
 80024ea:	200a      	movs	r0, #10
 80024ec:	e011      	b.n	8002512 <_puts_r+0x76>
 80024ee:	4b17      	ldr	r3, [pc, #92]	; (800254c <_puts_r+0xb0>)
 80024f0:	429c      	cmp	r4, r3
 80024f2:	d101      	bne.n	80024f8 <_puts_r+0x5c>
 80024f4:	68ac      	ldr	r4, [r5, #8]
 80024f6:	e7e3      	b.n	80024c0 <_puts_r+0x24>
 80024f8:	4b15      	ldr	r3, [pc, #84]	; (8002550 <_puts_r+0xb4>)
 80024fa:	429c      	cmp	r4, r3
 80024fc:	bf08      	it	eq
 80024fe:	68ec      	ldreq	r4, [r5, #12]
 8002500:	e7de      	b.n	80024c0 <_puts_r+0x24>
 8002502:	4621      	mov	r1, r4
 8002504:	4628      	mov	r0, r5
 8002506:	f000 f87f 	bl	8002608 <__swsetup_r>
 800250a:	2800      	cmp	r0, #0
 800250c:	d0dd      	beq.n	80024ca <_puts_r+0x2e>
 800250e:	f04f 30ff 	mov.w	r0, #4294967295
 8002512:	bd70      	pop	{r4, r5, r6, pc}
 8002514:	2b00      	cmp	r3, #0
 8002516:	da04      	bge.n	8002522 <_puts_r+0x86>
 8002518:	69a2      	ldr	r2, [r4, #24]
 800251a:	429a      	cmp	r2, r3
 800251c:	dc06      	bgt.n	800252c <_puts_r+0x90>
 800251e:	290a      	cmp	r1, #10
 8002520:	d004      	beq.n	800252c <_puts_r+0x90>
 8002522:	6823      	ldr	r3, [r4, #0]
 8002524:	1c5a      	adds	r2, r3, #1
 8002526:	6022      	str	r2, [r4, #0]
 8002528:	7019      	strb	r1, [r3, #0]
 800252a:	e7cf      	b.n	80024cc <_puts_r+0x30>
 800252c:	4622      	mov	r2, r4
 800252e:	4628      	mov	r0, r5
 8002530:	f000 f818 	bl	8002564 <__swbuf_r>
 8002534:	3001      	adds	r0, #1
 8002536:	d1c9      	bne.n	80024cc <_puts_r+0x30>
 8002538:	e7e9      	b.n	800250e <_puts_r+0x72>
 800253a:	200a      	movs	r0, #10
 800253c:	6823      	ldr	r3, [r4, #0]
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	6022      	str	r2, [r4, #0]
 8002542:	7018      	strb	r0, [r3, #0]
 8002544:	e7e5      	b.n	8002512 <_puts_r+0x76>
 8002546:	bf00      	nop
 8002548:	08003444 	.word	0x08003444
 800254c:	08003464 	.word	0x08003464
 8002550:	08003424 	.word	0x08003424

08002554 <puts>:
 8002554:	4b02      	ldr	r3, [pc, #8]	; (8002560 <puts+0xc>)
 8002556:	4601      	mov	r1, r0
 8002558:	6818      	ldr	r0, [r3, #0]
 800255a:	f7ff bf9f 	b.w	800249c <_puts_r>
 800255e:	bf00      	nop
 8002560:	2000000c 	.word	0x2000000c

08002564 <__swbuf_r>:
 8002564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002566:	460e      	mov	r6, r1
 8002568:	4614      	mov	r4, r2
 800256a:	4605      	mov	r5, r0
 800256c:	b118      	cbz	r0, 8002576 <__swbuf_r+0x12>
 800256e:	6983      	ldr	r3, [r0, #24]
 8002570:	b90b      	cbnz	r3, 8002576 <__swbuf_r+0x12>
 8002572:	f000 f9a7 	bl	80028c4 <__sinit>
 8002576:	4b21      	ldr	r3, [pc, #132]	; (80025fc <__swbuf_r+0x98>)
 8002578:	429c      	cmp	r4, r3
 800257a:	d12a      	bne.n	80025d2 <__swbuf_r+0x6e>
 800257c:	686c      	ldr	r4, [r5, #4]
 800257e:	69a3      	ldr	r3, [r4, #24]
 8002580:	60a3      	str	r3, [r4, #8]
 8002582:	89a3      	ldrh	r3, [r4, #12]
 8002584:	071a      	lsls	r2, r3, #28
 8002586:	d52e      	bpl.n	80025e6 <__swbuf_r+0x82>
 8002588:	6923      	ldr	r3, [r4, #16]
 800258a:	b363      	cbz	r3, 80025e6 <__swbuf_r+0x82>
 800258c:	6923      	ldr	r3, [r4, #16]
 800258e:	6820      	ldr	r0, [r4, #0]
 8002590:	b2f6      	uxtb	r6, r6
 8002592:	1ac0      	subs	r0, r0, r3
 8002594:	6963      	ldr	r3, [r4, #20]
 8002596:	4637      	mov	r7, r6
 8002598:	4283      	cmp	r3, r0
 800259a:	dc04      	bgt.n	80025a6 <__swbuf_r+0x42>
 800259c:	4621      	mov	r1, r4
 800259e:	4628      	mov	r0, r5
 80025a0:	f000 f926 	bl	80027f0 <_fflush_r>
 80025a4:	bb28      	cbnz	r0, 80025f2 <__swbuf_r+0x8e>
 80025a6:	68a3      	ldr	r3, [r4, #8]
 80025a8:	3001      	adds	r0, #1
 80025aa:	3b01      	subs	r3, #1
 80025ac:	60a3      	str	r3, [r4, #8]
 80025ae:	6823      	ldr	r3, [r4, #0]
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	6022      	str	r2, [r4, #0]
 80025b4:	701e      	strb	r6, [r3, #0]
 80025b6:	6963      	ldr	r3, [r4, #20]
 80025b8:	4283      	cmp	r3, r0
 80025ba:	d004      	beq.n	80025c6 <__swbuf_r+0x62>
 80025bc:	89a3      	ldrh	r3, [r4, #12]
 80025be:	07db      	lsls	r3, r3, #31
 80025c0:	d519      	bpl.n	80025f6 <__swbuf_r+0x92>
 80025c2:	2e0a      	cmp	r6, #10
 80025c4:	d117      	bne.n	80025f6 <__swbuf_r+0x92>
 80025c6:	4621      	mov	r1, r4
 80025c8:	4628      	mov	r0, r5
 80025ca:	f000 f911 	bl	80027f0 <_fflush_r>
 80025ce:	b190      	cbz	r0, 80025f6 <__swbuf_r+0x92>
 80025d0:	e00f      	b.n	80025f2 <__swbuf_r+0x8e>
 80025d2:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <__swbuf_r+0x9c>)
 80025d4:	429c      	cmp	r4, r3
 80025d6:	d101      	bne.n	80025dc <__swbuf_r+0x78>
 80025d8:	68ac      	ldr	r4, [r5, #8]
 80025da:	e7d0      	b.n	800257e <__swbuf_r+0x1a>
 80025dc:	4b09      	ldr	r3, [pc, #36]	; (8002604 <__swbuf_r+0xa0>)
 80025de:	429c      	cmp	r4, r3
 80025e0:	bf08      	it	eq
 80025e2:	68ec      	ldreq	r4, [r5, #12]
 80025e4:	e7cb      	b.n	800257e <__swbuf_r+0x1a>
 80025e6:	4621      	mov	r1, r4
 80025e8:	4628      	mov	r0, r5
 80025ea:	f000 f80d 	bl	8002608 <__swsetup_r>
 80025ee:	2800      	cmp	r0, #0
 80025f0:	d0cc      	beq.n	800258c <__swbuf_r+0x28>
 80025f2:	f04f 37ff 	mov.w	r7, #4294967295
 80025f6:	4638      	mov	r0, r7
 80025f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025fa:	bf00      	nop
 80025fc:	08003444 	.word	0x08003444
 8002600:	08003464 	.word	0x08003464
 8002604:	08003424 	.word	0x08003424

08002608 <__swsetup_r>:
 8002608:	4b32      	ldr	r3, [pc, #200]	; (80026d4 <__swsetup_r+0xcc>)
 800260a:	b570      	push	{r4, r5, r6, lr}
 800260c:	681d      	ldr	r5, [r3, #0]
 800260e:	4606      	mov	r6, r0
 8002610:	460c      	mov	r4, r1
 8002612:	b125      	cbz	r5, 800261e <__swsetup_r+0x16>
 8002614:	69ab      	ldr	r3, [r5, #24]
 8002616:	b913      	cbnz	r3, 800261e <__swsetup_r+0x16>
 8002618:	4628      	mov	r0, r5
 800261a:	f000 f953 	bl	80028c4 <__sinit>
 800261e:	4b2e      	ldr	r3, [pc, #184]	; (80026d8 <__swsetup_r+0xd0>)
 8002620:	429c      	cmp	r4, r3
 8002622:	d10f      	bne.n	8002644 <__swsetup_r+0x3c>
 8002624:	686c      	ldr	r4, [r5, #4]
 8002626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800262a:	b29a      	uxth	r2, r3
 800262c:	0715      	lsls	r5, r2, #28
 800262e:	d42c      	bmi.n	800268a <__swsetup_r+0x82>
 8002630:	06d0      	lsls	r0, r2, #27
 8002632:	d411      	bmi.n	8002658 <__swsetup_r+0x50>
 8002634:	2209      	movs	r2, #9
 8002636:	6032      	str	r2, [r6, #0]
 8002638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800263c:	81a3      	strh	r3, [r4, #12]
 800263e:	f04f 30ff 	mov.w	r0, #4294967295
 8002642:	e03e      	b.n	80026c2 <__swsetup_r+0xba>
 8002644:	4b25      	ldr	r3, [pc, #148]	; (80026dc <__swsetup_r+0xd4>)
 8002646:	429c      	cmp	r4, r3
 8002648:	d101      	bne.n	800264e <__swsetup_r+0x46>
 800264a:	68ac      	ldr	r4, [r5, #8]
 800264c:	e7eb      	b.n	8002626 <__swsetup_r+0x1e>
 800264e:	4b24      	ldr	r3, [pc, #144]	; (80026e0 <__swsetup_r+0xd8>)
 8002650:	429c      	cmp	r4, r3
 8002652:	bf08      	it	eq
 8002654:	68ec      	ldreq	r4, [r5, #12]
 8002656:	e7e6      	b.n	8002626 <__swsetup_r+0x1e>
 8002658:	0751      	lsls	r1, r2, #29
 800265a:	d512      	bpl.n	8002682 <__swsetup_r+0x7a>
 800265c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800265e:	b141      	cbz	r1, 8002672 <__swsetup_r+0x6a>
 8002660:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002664:	4299      	cmp	r1, r3
 8002666:	d002      	beq.n	800266e <__swsetup_r+0x66>
 8002668:	4630      	mov	r0, r6
 800266a:	f000 fa19 	bl	8002aa0 <_free_r>
 800266e:	2300      	movs	r3, #0
 8002670:	6363      	str	r3, [r4, #52]	; 0x34
 8002672:	89a3      	ldrh	r3, [r4, #12]
 8002674:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002678:	81a3      	strh	r3, [r4, #12]
 800267a:	2300      	movs	r3, #0
 800267c:	6063      	str	r3, [r4, #4]
 800267e:	6923      	ldr	r3, [r4, #16]
 8002680:	6023      	str	r3, [r4, #0]
 8002682:	89a3      	ldrh	r3, [r4, #12]
 8002684:	f043 0308 	orr.w	r3, r3, #8
 8002688:	81a3      	strh	r3, [r4, #12]
 800268a:	6923      	ldr	r3, [r4, #16]
 800268c:	b94b      	cbnz	r3, 80026a2 <__swsetup_r+0x9a>
 800268e:	89a3      	ldrh	r3, [r4, #12]
 8002690:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002698:	d003      	beq.n	80026a2 <__swsetup_r+0x9a>
 800269a:	4621      	mov	r1, r4
 800269c:	4630      	mov	r0, r6
 800269e:	f000 f9bf 	bl	8002a20 <__smakebuf_r>
 80026a2:	89a2      	ldrh	r2, [r4, #12]
 80026a4:	f012 0301 	ands.w	r3, r2, #1
 80026a8:	d00c      	beq.n	80026c4 <__swsetup_r+0xbc>
 80026aa:	2300      	movs	r3, #0
 80026ac:	60a3      	str	r3, [r4, #8]
 80026ae:	6963      	ldr	r3, [r4, #20]
 80026b0:	425b      	negs	r3, r3
 80026b2:	61a3      	str	r3, [r4, #24]
 80026b4:	6923      	ldr	r3, [r4, #16]
 80026b6:	b953      	cbnz	r3, 80026ce <__swsetup_r+0xc6>
 80026b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026bc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80026c0:	d1ba      	bne.n	8002638 <__swsetup_r+0x30>
 80026c2:	bd70      	pop	{r4, r5, r6, pc}
 80026c4:	0792      	lsls	r2, r2, #30
 80026c6:	bf58      	it	pl
 80026c8:	6963      	ldrpl	r3, [r4, #20]
 80026ca:	60a3      	str	r3, [r4, #8]
 80026cc:	e7f2      	b.n	80026b4 <__swsetup_r+0xac>
 80026ce:	2000      	movs	r0, #0
 80026d0:	e7f7      	b.n	80026c2 <__swsetup_r+0xba>
 80026d2:	bf00      	nop
 80026d4:	2000000c 	.word	0x2000000c
 80026d8:	08003444 	.word	0x08003444
 80026dc:	08003464 	.word	0x08003464
 80026e0:	08003424 	.word	0x08003424

080026e4 <__sflush_r>:
 80026e4:	898a      	ldrh	r2, [r1, #12]
 80026e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026ea:	4605      	mov	r5, r0
 80026ec:	0710      	lsls	r0, r2, #28
 80026ee:	460c      	mov	r4, r1
 80026f0:	d458      	bmi.n	80027a4 <__sflush_r+0xc0>
 80026f2:	684b      	ldr	r3, [r1, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	dc05      	bgt.n	8002704 <__sflush_r+0x20>
 80026f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	dc02      	bgt.n	8002704 <__sflush_r+0x20>
 80026fe:	2000      	movs	r0, #0
 8002700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002704:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002706:	2e00      	cmp	r6, #0
 8002708:	d0f9      	beq.n	80026fe <__sflush_r+0x1a>
 800270a:	2300      	movs	r3, #0
 800270c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002710:	682f      	ldr	r7, [r5, #0]
 8002712:	6a21      	ldr	r1, [r4, #32]
 8002714:	602b      	str	r3, [r5, #0]
 8002716:	d032      	beq.n	800277e <__sflush_r+0x9a>
 8002718:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800271a:	89a3      	ldrh	r3, [r4, #12]
 800271c:	075a      	lsls	r2, r3, #29
 800271e:	d505      	bpl.n	800272c <__sflush_r+0x48>
 8002720:	6863      	ldr	r3, [r4, #4]
 8002722:	1ac0      	subs	r0, r0, r3
 8002724:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002726:	b10b      	cbz	r3, 800272c <__sflush_r+0x48>
 8002728:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800272a:	1ac0      	subs	r0, r0, r3
 800272c:	2300      	movs	r3, #0
 800272e:	4602      	mov	r2, r0
 8002730:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002732:	6a21      	ldr	r1, [r4, #32]
 8002734:	4628      	mov	r0, r5
 8002736:	47b0      	blx	r6
 8002738:	1c43      	adds	r3, r0, #1
 800273a:	89a3      	ldrh	r3, [r4, #12]
 800273c:	d106      	bne.n	800274c <__sflush_r+0x68>
 800273e:	6829      	ldr	r1, [r5, #0]
 8002740:	291d      	cmp	r1, #29
 8002742:	d848      	bhi.n	80027d6 <__sflush_r+0xf2>
 8002744:	4a29      	ldr	r2, [pc, #164]	; (80027ec <__sflush_r+0x108>)
 8002746:	40ca      	lsrs	r2, r1
 8002748:	07d6      	lsls	r6, r2, #31
 800274a:	d544      	bpl.n	80027d6 <__sflush_r+0xf2>
 800274c:	2200      	movs	r2, #0
 800274e:	6062      	str	r2, [r4, #4]
 8002750:	6922      	ldr	r2, [r4, #16]
 8002752:	04d9      	lsls	r1, r3, #19
 8002754:	6022      	str	r2, [r4, #0]
 8002756:	d504      	bpl.n	8002762 <__sflush_r+0x7e>
 8002758:	1c42      	adds	r2, r0, #1
 800275a:	d101      	bne.n	8002760 <__sflush_r+0x7c>
 800275c:	682b      	ldr	r3, [r5, #0]
 800275e:	b903      	cbnz	r3, 8002762 <__sflush_r+0x7e>
 8002760:	6560      	str	r0, [r4, #84]	; 0x54
 8002762:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002764:	602f      	str	r7, [r5, #0]
 8002766:	2900      	cmp	r1, #0
 8002768:	d0c9      	beq.n	80026fe <__sflush_r+0x1a>
 800276a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800276e:	4299      	cmp	r1, r3
 8002770:	d002      	beq.n	8002778 <__sflush_r+0x94>
 8002772:	4628      	mov	r0, r5
 8002774:	f000 f994 	bl	8002aa0 <_free_r>
 8002778:	2000      	movs	r0, #0
 800277a:	6360      	str	r0, [r4, #52]	; 0x34
 800277c:	e7c0      	b.n	8002700 <__sflush_r+0x1c>
 800277e:	2301      	movs	r3, #1
 8002780:	4628      	mov	r0, r5
 8002782:	47b0      	blx	r6
 8002784:	1c41      	adds	r1, r0, #1
 8002786:	d1c8      	bne.n	800271a <__sflush_r+0x36>
 8002788:	682b      	ldr	r3, [r5, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0c5      	beq.n	800271a <__sflush_r+0x36>
 800278e:	2b1d      	cmp	r3, #29
 8002790:	d001      	beq.n	8002796 <__sflush_r+0xb2>
 8002792:	2b16      	cmp	r3, #22
 8002794:	d101      	bne.n	800279a <__sflush_r+0xb6>
 8002796:	602f      	str	r7, [r5, #0]
 8002798:	e7b1      	b.n	80026fe <__sflush_r+0x1a>
 800279a:	89a3      	ldrh	r3, [r4, #12]
 800279c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027a0:	81a3      	strh	r3, [r4, #12]
 80027a2:	e7ad      	b.n	8002700 <__sflush_r+0x1c>
 80027a4:	690f      	ldr	r7, [r1, #16]
 80027a6:	2f00      	cmp	r7, #0
 80027a8:	d0a9      	beq.n	80026fe <__sflush_r+0x1a>
 80027aa:	0793      	lsls	r3, r2, #30
 80027ac:	bf18      	it	ne
 80027ae:	2300      	movne	r3, #0
 80027b0:	680e      	ldr	r6, [r1, #0]
 80027b2:	bf08      	it	eq
 80027b4:	694b      	ldreq	r3, [r1, #20]
 80027b6:	eba6 0807 	sub.w	r8, r6, r7
 80027ba:	600f      	str	r7, [r1, #0]
 80027bc:	608b      	str	r3, [r1, #8]
 80027be:	f1b8 0f00 	cmp.w	r8, #0
 80027c2:	dd9c      	ble.n	80026fe <__sflush_r+0x1a>
 80027c4:	4643      	mov	r3, r8
 80027c6:	463a      	mov	r2, r7
 80027c8:	6a21      	ldr	r1, [r4, #32]
 80027ca:	4628      	mov	r0, r5
 80027cc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80027ce:	47b0      	blx	r6
 80027d0:	2800      	cmp	r0, #0
 80027d2:	dc06      	bgt.n	80027e2 <__sflush_r+0xfe>
 80027d4:	89a3      	ldrh	r3, [r4, #12]
 80027d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027da:	81a3      	strh	r3, [r4, #12]
 80027dc:	f04f 30ff 	mov.w	r0, #4294967295
 80027e0:	e78e      	b.n	8002700 <__sflush_r+0x1c>
 80027e2:	4407      	add	r7, r0
 80027e4:	eba8 0800 	sub.w	r8, r8, r0
 80027e8:	e7e9      	b.n	80027be <__sflush_r+0xda>
 80027ea:	bf00      	nop
 80027ec:	20400001 	.word	0x20400001

080027f0 <_fflush_r>:
 80027f0:	b538      	push	{r3, r4, r5, lr}
 80027f2:	690b      	ldr	r3, [r1, #16]
 80027f4:	4605      	mov	r5, r0
 80027f6:	460c      	mov	r4, r1
 80027f8:	b1db      	cbz	r3, 8002832 <_fflush_r+0x42>
 80027fa:	b118      	cbz	r0, 8002804 <_fflush_r+0x14>
 80027fc:	6983      	ldr	r3, [r0, #24]
 80027fe:	b90b      	cbnz	r3, 8002804 <_fflush_r+0x14>
 8002800:	f000 f860 	bl	80028c4 <__sinit>
 8002804:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <_fflush_r+0x48>)
 8002806:	429c      	cmp	r4, r3
 8002808:	d109      	bne.n	800281e <_fflush_r+0x2e>
 800280a:	686c      	ldr	r4, [r5, #4]
 800280c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002810:	b17b      	cbz	r3, 8002832 <_fflush_r+0x42>
 8002812:	4621      	mov	r1, r4
 8002814:	4628      	mov	r0, r5
 8002816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800281a:	f7ff bf63 	b.w	80026e4 <__sflush_r>
 800281e:	4b07      	ldr	r3, [pc, #28]	; (800283c <_fflush_r+0x4c>)
 8002820:	429c      	cmp	r4, r3
 8002822:	d101      	bne.n	8002828 <_fflush_r+0x38>
 8002824:	68ac      	ldr	r4, [r5, #8]
 8002826:	e7f1      	b.n	800280c <_fflush_r+0x1c>
 8002828:	4b05      	ldr	r3, [pc, #20]	; (8002840 <_fflush_r+0x50>)
 800282a:	429c      	cmp	r4, r3
 800282c:	bf08      	it	eq
 800282e:	68ec      	ldreq	r4, [r5, #12]
 8002830:	e7ec      	b.n	800280c <_fflush_r+0x1c>
 8002832:	2000      	movs	r0, #0
 8002834:	bd38      	pop	{r3, r4, r5, pc}
 8002836:	bf00      	nop
 8002838:	08003444 	.word	0x08003444
 800283c:	08003464 	.word	0x08003464
 8002840:	08003424 	.word	0x08003424

08002844 <std>:
 8002844:	2300      	movs	r3, #0
 8002846:	b510      	push	{r4, lr}
 8002848:	4604      	mov	r4, r0
 800284a:	e9c0 3300 	strd	r3, r3, [r0]
 800284e:	6083      	str	r3, [r0, #8]
 8002850:	8181      	strh	r1, [r0, #12]
 8002852:	6643      	str	r3, [r0, #100]	; 0x64
 8002854:	81c2      	strh	r2, [r0, #14]
 8002856:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800285a:	6183      	str	r3, [r0, #24]
 800285c:	4619      	mov	r1, r3
 800285e:	2208      	movs	r2, #8
 8002860:	305c      	adds	r0, #92	; 0x5c
 8002862:	f7ff fdfb 	bl	800245c <memset>
 8002866:	4b05      	ldr	r3, [pc, #20]	; (800287c <std+0x38>)
 8002868:	6224      	str	r4, [r4, #32]
 800286a:	6263      	str	r3, [r4, #36]	; 0x24
 800286c:	4b04      	ldr	r3, [pc, #16]	; (8002880 <std+0x3c>)
 800286e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002870:	4b04      	ldr	r3, [pc, #16]	; (8002884 <std+0x40>)
 8002872:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002874:	4b04      	ldr	r3, [pc, #16]	; (8002888 <std+0x44>)
 8002876:	6323      	str	r3, [r4, #48]	; 0x30
 8002878:	bd10      	pop	{r4, pc}
 800287a:	bf00      	nop
 800287c:	08003199 	.word	0x08003199
 8002880:	080031bb 	.word	0x080031bb
 8002884:	080031f3 	.word	0x080031f3
 8002888:	08003217 	.word	0x08003217

0800288c <_cleanup_r>:
 800288c:	4901      	ldr	r1, [pc, #4]	; (8002894 <_cleanup_r+0x8>)
 800288e:	f000 b885 	b.w	800299c <_fwalk_reent>
 8002892:	bf00      	nop
 8002894:	080027f1 	.word	0x080027f1

08002898 <__sfmoreglue>:
 8002898:	b570      	push	{r4, r5, r6, lr}
 800289a:	2568      	movs	r5, #104	; 0x68
 800289c:	1e4a      	subs	r2, r1, #1
 800289e:	4355      	muls	r5, r2
 80028a0:	460e      	mov	r6, r1
 80028a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80028a6:	f000 f947 	bl	8002b38 <_malloc_r>
 80028aa:	4604      	mov	r4, r0
 80028ac:	b140      	cbz	r0, 80028c0 <__sfmoreglue+0x28>
 80028ae:	2100      	movs	r1, #0
 80028b0:	e9c0 1600 	strd	r1, r6, [r0]
 80028b4:	300c      	adds	r0, #12
 80028b6:	60a0      	str	r0, [r4, #8]
 80028b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80028bc:	f7ff fdce 	bl	800245c <memset>
 80028c0:	4620      	mov	r0, r4
 80028c2:	bd70      	pop	{r4, r5, r6, pc}

080028c4 <__sinit>:
 80028c4:	6983      	ldr	r3, [r0, #24]
 80028c6:	b510      	push	{r4, lr}
 80028c8:	4604      	mov	r4, r0
 80028ca:	bb33      	cbnz	r3, 800291a <__sinit+0x56>
 80028cc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80028d0:	6503      	str	r3, [r0, #80]	; 0x50
 80028d2:	4b12      	ldr	r3, [pc, #72]	; (800291c <__sinit+0x58>)
 80028d4:	4a12      	ldr	r2, [pc, #72]	; (8002920 <__sinit+0x5c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6282      	str	r2, [r0, #40]	; 0x28
 80028da:	4298      	cmp	r0, r3
 80028dc:	bf04      	itt	eq
 80028de:	2301      	moveq	r3, #1
 80028e0:	6183      	streq	r3, [r0, #24]
 80028e2:	f000 f81f 	bl	8002924 <__sfp>
 80028e6:	6060      	str	r0, [r4, #4]
 80028e8:	4620      	mov	r0, r4
 80028ea:	f000 f81b 	bl	8002924 <__sfp>
 80028ee:	60a0      	str	r0, [r4, #8]
 80028f0:	4620      	mov	r0, r4
 80028f2:	f000 f817 	bl	8002924 <__sfp>
 80028f6:	2200      	movs	r2, #0
 80028f8:	60e0      	str	r0, [r4, #12]
 80028fa:	2104      	movs	r1, #4
 80028fc:	6860      	ldr	r0, [r4, #4]
 80028fe:	f7ff ffa1 	bl	8002844 <std>
 8002902:	2201      	movs	r2, #1
 8002904:	2109      	movs	r1, #9
 8002906:	68a0      	ldr	r0, [r4, #8]
 8002908:	f7ff ff9c 	bl	8002844 <std>
 800290c:	2202      	movs	r2, #2
 800290e:	2112      	movs	r1, #18
 8002910:	68e0      	ldr	r0, [r4, #12]
 8002912:	f7ff ff97 	bl	8002844 <std>
 8002916:	2301      	movs	r3, #1
 8002918:	61a3      	str	r3, [r4, #24]
 800291a:	bd10      	pop	{r4, pc}
 800291c:	08003420 	.word	0x08003420
 8002920:	0800288d 	.word	0x0800288d

08002924 <__sfp>:
 8002924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002926:	4b1b      	ldr	r3, [pc, #108]	; (8002994 <__sfp+0x70>)
 8002928:	4607      	mov	r7, r0
 800292a:	681e      	ldr	r6, [r3, #0]
 800292c:	69b3      	ldr	r3, [r6, #24]
 800292e:	b913      	cbnz	r3, 8002936 <__sfp+0x12>
 8002930:	4630      	mov	r0, r6
 8002932:	f7ff ffc7 	bl	80028c4 <__sinit>
 8002936:	3648      	adds	r6, #72	; 0x48
 8002938:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800293c:	3b01      	subs	r3, #1
 800293e:	d503      	bpl.n	8002948 <__sfp+0x24>
 8002940:	6833      	ldr	r3, [r6, #0]
 8002942:	b133      	cbz	r3, 8002952 <__sfp+0x2e>
 8002944:	6836      	ldr	r6, [r6, #0]
 8002946:	e7f7      	b.n	8002938 <__sfp+0x14>
 8002948:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800294c:	b16d      	cbz	r5, 800296a <__sfp+0x46>
 800294e:	3468      	adds	r4, #104	; 0x68
 8002950:	e7f4      	b.n	800293c <__sfp+0x18>
 8002952:	2104      	movs	r1, #4
 8002954:	4638      	mov	r0, r7
 8002956:	f7ff ff9f 	bl	8002898 <__sfmoreglue>
 800295a:	6030      	str	r0, [r6, #0]
 800295c:	2800      	cmp	r0, #0
 800295e:	d1f1      	bne.n	8002944 <__sfp+0x20>
 8002960:	230c      	movs	r3, #12
 8002962:	4604      	mov	r4, r0
 8002964:	603b      	str	r3, [r7, #0]
 8002966:	4620      	mov	r0, r4
 8002968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800296a:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <__sfp+0x74>)
 800296c:	6665      	str	r5, [r4, #100]	; 0x64
 800296e:	e9c4 5500 	strd	r5, r5, [r4]
 8002972:	60a5      	str	r5, [r4, #8]
 8002974:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002978:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800297c:	2208      	movs	r2, #8
 800297e:	4629      	mov	r1, r5
 8002980:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002984:	f7ff fd6a 	bl	800245c <memset>
 8002988:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800298c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002990:	e7e9      	b.n	8002966 <__sfp+0x42>
 8002992:	bf00      	nop
 8002994:	08003420 	.word	0x08003420
 8002998:	ffff0001 	.word	0xffff0001

0800299c <_fwalk_reent>:
 800299c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029a0:	4680      	mov	r8, r0
 80029a2:	4689      	mov	r9, r1
 80029a4:	2600      	movs	r6, #0
 80029a6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80029aa:	b914      	cbnz	r4, 80029b2 <_fwalk_reent+0x16>
 80029ac:	4630      	mov	r0, r6
 80029ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80029b2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80029b6:	3f01      	subs	r7, #1
 80029b8:	d501      	bpl.n	80029be <_fwalk_reent+0x22>
 80029ba:	6824      	ldr	r4, [r4, #0]
 80029bc:	e7f5      	b.n	80029aa <_fwalk_reent+0xe>
 80029be:	89ab      	ldrh	r3, [r5, #12]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d907      	bls.n	80029d4 <_fwalk_reent+0x38>
 80029c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80029c8:	3301      	adds	r3, #1
 80029ca:	d003      	beq.n	80029d4 <_fwalk_reent+0x38>
 80029cc:	4629      	mov	r1, r5
 80029ce:	4640      	mov	r0, r8
 80029d0:	47c8      	blx	r9
 80029d2:	4306      	orrs	r6, r0
 80029d4:	3568      	adds	r5, #104	; 0x68
 80029d6:	e7ee      	b.n	80029b6 <_fwalk_reent+0x1a>

080029d8 <__swhatbuf_r>:
 80029d8:	b570      	push	{r4, r5, r6, lr}
 80029da:	460e      	mov	r6, r1
 80029dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029e0:	b096      	sub	sp, #88	; 0x58
 80029e2:	2900      	cmp	r1, #0
 80029e4:	4614      	mov	r4, r2
 80029e6:	461d      	mov	r5, r3
 80029e8:	da07      	bge.n	80029fa <__swhatbuf_r+0x22>
 80029ea:	2300      	movs	r3, #0
 80029ec:	602b      	str	r3, [r5, #0]
 80029ee:	89b3      	ldrh	r3, [r6, #12]
 80029f0:	061a      	lsls	r2, r3, #24
 80029f2:	d410      	bmi.n	8002a16 <__swhatbuf_r+0x3e>
 80029f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029f8:	e00e      	b.n	8002a18 <__swhatbuf_r+0x40>
 80029fa:	466a      	mov	r2, sp
 80029fc:	f000 fc32 	bl	8003264 <_fstat_r>
 8002a00:	2800      	cmp	r0, #0
 8002a02:	dbf2      	blt.n	80029ea <__swhatbuf_r+0x12>
 8002a04:	9a01      	ldr	r2, [sp, #4]
 8002a06:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002a0a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002a0e:	425a      	negs	r2, r3
 8002a10:	415a      	adcs	r2, r3
 8002a12:	602a      	str	r2, [r5, #0]
 8002a14:	e7ee      	b.n	80029f4 <__swhatbuf_r+0x1c>
 8002a16:	2340      	movs	r3, #64	; 0x40
 8002a18:	2000      	movs	r0, #0
 8002a1a:	6023      	str	r3, [r4, #0]
 8002a1c:	b016      	add	sp, #88	; 0x58
 8002a1e:	bd70      	pop	{r4, r5, r6, pc}

08002a20 <__smakebuf_r>:
 8002a20:	898b      	ldrh	r3, [r1, #12]
 8002a22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002a24:	079d      	lsls	r5, r3, #30
 8002a26:	4606      	mov	r6, r0
 8002a28:	460c      	mov	r4, r1
 8002a2a:	d507      	bpl.n	8002a3c <__smakebuf_r+0x1c>
 8002a2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002a30:	6023      	str	r3, [r4, #0]
 8002a32:	6123      	str	r3, [r4, #16]
 8002a34:	2301      	movs	r3, #1
 8002a36:	6163      	str	r3, [r4, #20]
 8002a38:	b002      	add	sp, #8
 8002a3a:	bd70      	pop	{r4, r5, r6, pc}
 8002a3c:	ab01      	add	r3, sp, #4
 8002a3e:	466a      	mov	r2, sp
 8002a40:	f7ff ffca 	bl	80029d8 <__swhatbuf_r>
 8002a44:	9900      	ldr	r1, [sp, #0]
 8002a46:	4605      	mov	r5, r0
 8002a48:	4630      	mov	r0, r6
 8002a4a:	f000 f875 	bl	8002b38 <_malloc_r>
 8002a4e:	b948      	cbnz	r0, 8002a64 <__smakebuf_r+0x44>
 8002a50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a54:	059a      	lsls	r2, r3, #22
 8002a56:	d4ef      	bmi.n	8002a38 <__smakebuf_r+0x18>
 8002a58:	f023 0303 	bic.w	r3, r3, #3
 8002a5c:	f043 0302 	orr.w	r3, r3, #2
 8002a60:	81a3      	strh	r3, [r4, #12]
 8002a62:	e7e3      	b.n	8002a2c <__smakebuf_r+0xc>
 8002a64:	4b0d      	ldr	r3, [pc, #52]	; (8002a9c <__smakebuf_r+0x7c>)
 8002a66:	62b3      	str	r3, [r6, #40]	; 0x28
 8002a68:	89a3      	ldrh	r3, [r4, #12]
 8002a6a:	6020      	str	r0, [r4, #0]
 8002a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a70:	81a3      	strh	r3, [r4, #12]
 8002a72:	9b00      	ldr	r3, [sp, #0]
 8002a74:	6120      	str	r0, [r4, #16]
 8002a76:	6163      	str	r3, [r4, #20]
 8002a78:	9b01      	ldr	r3, [sp, #4]
 8002a7a:	b15b      	cbz	r3, 8002a94 <__smakebuf_r+0x74>
 8002a7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a80:	4630      	mov	r0, r6
 8002a82:	f000 fc01 	bl	8003288 <_isatty_r>
 8002a86:	b128      	cbz	r0, 8002a94 <__smakebuf_r+0x74>
 8002a88:	89a3      	ldrh	r3, [r4, #12]
 8002a8a:	f023 0303 	bic.w	r3, r3, #3
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	81a3      	strh	r3, [r4, #12]
 8002a94:	89a3      	ldrh	r3, [r4, #12]
 8002a96:	431d      	orrs	r5, r3
 8002a98:	81a5      	strh	r5, [r4, #12]
 8002a9a:	e7cd      	b.n	8002a38 <__smakebuf_r+0x18>
 8002a9c:	0800288d 	.word	0x0800288d

08002aa0 <_free_r>:
 8002aa0:	b538      	push	{r3, r4, r5, lr}
 8002aa2:	4605      	mov	r5, r0
 8002aa4:	2900      	cmp	r1, #0
 8002aa6:	d043      	beq.n	8002b30 <_free_r+0x90>
 8002aa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002aac:	1f0c      	subs	r4, r1, #4
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	bfb8      	it	lt
 8002ab2:	18e4      	addlt	r4, r4, r3
 8002ab4:	f000 fc18 	bl	80032e8 <__malloc_lock>
 8002ab8:	4a1e      	ldr	r2, [pc, #120]	; (8002b34 <_free_r+0x94>)
 8002aba:	6813      	ldr	r3, [r2, #0]
 8002abc:	4610      	mov	r0, r2
 8002abe:	b933      	cbnz	r3, 8002ace <_free_r+0x2e>
 8002ac0:	6063      	str	r3, [r4, #4]
 8002ac2:	6014      	str	r4, [r2, #0]
 8002ac4:	4628      	mov	r0, r5
 8002ac6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002aca:	f000 bc0e 	b.w	80032ea <__malloc_unlock>
 8002ace:	42a3      	cmp	r3, r4
 8002ad0:	d90b      	bls.n	8002aea <_free_r+0x4a>
 8002ad2:	6821      	ldr	r1, [r4, #0]
 8002ad4:	1862      	adds	r2, r4, r1
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	bf01      	itttt	eq
 8002ada:	681a      	ldreq	r2, [r3, #0]
 8002adc:	685b      	ldreq	r3, [r3, #4]
 8002ade:	1852      	addeq	r2, r2, r1
 8002ae0:	6022      	streq	r2, [r4, #0]
 8002ae2:	6063      	str	r3, [r4, #4]
 8002ae4:	6004      	str	r4, [r0, #0]
 8002ae6:	e7ed      	b.n	8002ac4 <_free_r+0x24>
 8002ae8:	4613      	mov	r3, r2
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	b10a      	cbz	r2, 8002af2 <_free_r+0x52>
 8002aee:	42a2      	cmp	r2, r4
 8002af0:	d9fa      	bls.n	8002ae8 <_free_r+0x48>
 8002af2:	6819      	ldr	r1, [r3, #0]
 8002af4:	1858      	adds	r0, r3, r1
 8002af6:	42a0      	cmp	r0, r4
 8002af8:	d10b      	bne.n	8002b12 <_free_r+0x72>
 8002afa:	6820      	ldr	r0, [r4, #0]
 8002afc:	4401      	add	r1, r0
 8002afe:	1858      	adds	r0, r3, r1
 8002b00:	4282      	cmp	r2, r0
 8002b02:	6019      	str	r1, [r3, #0]
 8002b04:	d1de      	bne.n	8002ac4 <_free_r+0x24>
 8002b06:	6810      	ldr	r0, [r2, #0]
 8002b08:	6852      	ldr	r2, [r2, #4]
 8002b0a:	4401      	add	r1, r0
 8002b0c:	6019      	str	r1, [r3, #0]
 8002b0e:	605a      	str	r2, [r3, #4]
 8002b10:	e7d8      	b.n	8002ac4 <_free_r+0x24>
 8002b12:	d902      	bls.n	8002b1a <_free_r+0x7a>
 8002b14:	230c      	movs	r3, #12
 8002b16:	602b      	str	r3, [r5, #0]
 8002b18:	e7d4      	b.n	8002ac4 <_free_r+0x24>
 8002b1a:	6820      	ldr	r0, [r4, #0]
 8002b1c:	1821      	adds	r1, r4, r0
 8002b1e:	428a      	cmp	r2, r1
 8002b20:	bf01      	itttt	eq
 8002b22:	6811      	ldreq	r1, [r2, #0]
 8002b24:	6852      	ldreq	r2, [r2, #4]
 8002b26:	1809      	addeq	r1, r1, r0
 8002b28:	6021      	streq	r1, [r4, #0]
 8002b2a:	6062      	str	r2, [r4, #4]
 8002b2c:	605c      	str	r4, [r3, #4]
 8002b2e:	e7c9      	b.n	8002ac4 <_free_r+0x24>
 8002b30:	bd38      	pop	{r3, r4, r5, pc}
 8002b32:	bf00      	nop
 8002b34:	20000090 	.word	0x20000090

08002b38 <_malloc_r>:
 8002b38:	b570      	push	{r4, r5, r6, lr}
 8002b3a:	1ccd      	adds	r5, r1, #3
 8002b3c:	f025 0503 	bic.w	r5, r5, #3
 8002b40:	3508      	adds	r5, #8
 8002b42:	2d0c      	cmp	r5, #12
 8002b44:	bf38      	it	cc
 8002b46:	250c      	movcc	r5, #12
 8002b48:	2d00      	cmp	r5, #0
 8002b4a:	4606      	mov	r6, r0
 8002b4c:	db01      	blt.n	8002b52 <_malloc_r+0x1a>
 8002b4e:	42a9      	cmp	r1, r5
 8002b50:	d903      	bls.n	8002b5a <_malloc_r+0x22>
 8002b52:	230c      	movs	r3, #12
 8002b54:	6033      	str	r3, [r6, #0]
 8002b56:	2000      	movs	r0, #0
 8002b58:	bd70      	pop	{r4, r5, r6, pc}
 8002b5a:	f000 fbc5 	bl	80032e8 <__malloc_lock>
 8002b5e:	4a21      	ldr	r2, [pc, #132]	; (8002be4 <_malloc_r+0xac>)
 8002b60:	6814      	ldr	r4, [r2, #0]
 8002b62:	4621      	mov	r1, r4
 8002b64:	b991      	cbnz	r1, 8002b8c <_malloc_r+0x54>
 8002b66:	4c20      	ldr	r4, [pc, #128]	; (8002be8 <_malloc_r+0xb0>)
 8002b68:	6823      	ldr	r3, [r4, #0]
 8002b6a:	b91b      	cbnz	r3, 8002b74 <_malloc_r+0x3c>
 8002b6c:	4630      	mov	r0, r6
 8002b6e:	f000 fb03 	bl	8003178 <_sbrk_r>
 8002b72:	6020      	str	r0, [r4, #0]
 8002b74:	4629      	mov	r1, r5
 8002b76:	4630      	mov	r0, r6
 8002b78:	f000 fafe 	bl	8003178 <_sbrk_r>
 8002b7c:	1c43      	adds	r3, r0, #1
 8002b7e:	d124      	bne.n	8002bca <_malloc_r+0x92>
 8002b80:	230c      	movs	r3, #12
 8002b82:	4630      	mov	r0, r6
 8002b84:	6033      	str	r3, [r6, #0]
 8002b86:	f000 fbb0 	bl	80032ea <__malloc_unlock>
 8002b8a:	e7e4      	b.n	8002b56 <_malloc_r+0x1e>
 8002b8c:	680b      	ldr	r3, [r1, #0]
 8002b8e:	1b5b      	subs	r3, r3, r5
 8002b90:	d418      	bmi.n	8002bc4 <_malloc_r+0x8c>
 8002b92:	2b0b      	cmp	r3, #11
 8002b94:	d90f      	bls.n	8002bb6 <_malloc_r+0x7e>
 8002b96:	600b      	str	r3, [r1, #0]
 8002b98:	18cc      	adds	r4, r1, r3
 8002b9a:	50cd      	str	r5, [r1, r3]
 8002b9c:	4630      	mov	r0, r6
 8002b9e:	f000 fba4 	bl	80032ea <__malloc_unlock>
 8002ba2:	f104 000b 	add.w	r0, r4, #11
 8002ba6:	1d23      	adds	r3, r4, #4
 8002ba8:	f020 0007 	bic.w	r0, r0, #7
 8002bac:	1ac3      	subs	r3, r0, r3
 8002bae:	d0d3      	beq.n	8002b58 <_malloc_r+0x20>
 8002bb0:	425a      	negs	r2, r3
 8002bb2:	50e2      	str	r2, [r4, r3]
 8002bb4:	e7d0      	b.n	8002b58 <_malloc_r+0x20>
 8002bb6:	684b      	ldr	r3, [r1, #4]
 8002bb8:	428c      	cmp	r4, r1
 8002bba:	bf16      	itet	ne
 8002bbc:	6063      	strne	r3, [r4, #4]
 8002bbe:	6013      	streq	r3, [r2, #0]
 8002bc0:	460c      	movne	r4, r1
 8002bc2:	e7eb      	b.n	8002b9c <_malloc_r+0x64>
 8002bc4:	460c      	mov	r4, r1
 8002bc6:	6849      	ldr	r1, [r1, #4]
 8002bc8:	e7cc      	b.n	8002b64 <_malloc_r+0x2c>
 8002bca:	1cc4      	adds	r4, r0, #3
 8002bcc:	f024 0403 	bic.w	r4, r4, #3
 8002bd0:	42a0      	cmp	r0, r4
 8002bd2:	d005      	beq.n	8002be0 <_malloc_r+0xa8>
 8002bd4:	1a21      	subs	r1, r4, r0
 8002bd6:	4630      	mov	r0, r6
 8002bd8:	f000 face 	bl	8003178 <_sbrk_r>
 8002bdc:	3001      	adds	r0, #1
 8002bde:	d0cf      	beq.n	8002b80 <_malloc_r+0x48>
 8002be0:	6025      	str	r5, [r4, #0]
 8002be2:	e7db      	b.n	8002b9c <_malloc_r+0x64>
 8002be4:	20000090 	.word	0x20000090
 8002be8:	20000094 	.word	0x20000094

08002bec <__sfputc_r>:
 8002bec:	6893      	ldr	r3, [r2, #8]
 8002bee:	b410      	push	{r4}
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	6093      	str	r3, [r2, #8]
 8002bf6:	da07      	bge.n	8002c08 <__sfputc_r+0x1c>
 8002bf8:	6994      	ldr	r4, [r2, #24]
 8002bfa:	42a3      	cmp	r3, r4
 8002bfc:	db01      	blt.n	8002c02 <__sfputc_r+0x16>
 8002bfe:	290a      	cmp	r1, #10
 8002c00:	d102      	bne.n	8002c08 <__sfputc_r+0x1c>
 8002c02:	bc10      	pop	{r4}
 8002c04:	f7ff bcae 	b.w	8002564 <__swbuf_r>
 8002c08:	6813      	ldr	r3, [r2, #0]
 8002c0a:	1c58      	adds	r0, r3, #1
 8002c0c:	6010      	str	r0, [r2, #0]
 8002c0e:	7019      	strb	r1, [r3, #0]
 8002c10:	4608      	mov	r0, r1
 8002c12:	bc10      	pop	{r4}
 8002c14:	4770      	bx	lr

08002c16 <__sfputs_r>:
 8002c16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c18:	4606      	mov	r6, r0
 8002c1a:	460f      	mov	r7, r1
 8002c1c:	4614      	mov	r4, r2
 8002c1e:	18d5      	adds	r5, r2, r3
 8002c20:	42ac      	cmp	r4, r5
 8002c22:	d101      	bne.n	8002c28 <__sfputs_r+0x12>
 8002c24:	2000      	movs	r0, #0
 8002c26:	e007      	b.n	8002c38 <__sfputs_r+0x22>
 8002c28:	463a      	mov	r2, r7
 8002c2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c2e:	4630      	mov	r0, r6
 8002c30:	f7ff ffdc 	bl	8002bec <__sfputc_r>
 8002c34:	1c43      	adds	r3, r0, #1
 8002c36:	d1f3      	bne.n	8002c20 <__sfputs_r+0xa>
 8002c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002c3c <_vfiprintf_r>:
 8002c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c40:	460c      	mov	r4, r1
 8002c42:	b09d      	sub	sp, #116	; 0x74
 8002c44:	4617      	mov	r7, r2
 8002c46:	461d      	mov	r5, r3
 8002c48:	4606      	mov	r6, r0
 8002c4a:	b118      	cbz	r0, 8002c54 <_vfiprintf_r+0x18>
 8002c4c:	6983      	ldr	r3, [r0, #24]
 8002c4e:	b90b      	cbnz	r3, 8002c54 <_vfiprintf_r+0x18>
 8002c50:	f7ff fe38 	bl	80028c4 <__sinit>
 8002c54:	4b7c      	ldr	r3, [pc, #496]	; (8002e48 <_vfiprintf_r+0x20c>)
 8002c56:	429c      	cmp	r4, r3
 8002c58:	d158      	bne.n	8002d0c <_vfiprintf_r+0xd0>
 8002c5a:	6874      	ldr	r4, [r6, #4]
 8002c5c:	89a3      	ldrh	r3, [r4, #12]
 8002c5e:	0718      	lsls	r0, r3, #28
 8002c60:	d55e      	bpl.n	8002d20 <_vfiprintf_r+0xe4>
 8002c62:	6923      	ldr	r3, [r4, #16]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d05b      	beq.n	8002d20 <_vfiprintf_r+0xe4>
 8002c68:	2300      	movs	r3, #0
 8002c6a:	9309      	str	r3, [sp, #36]	; 0x24
 8002c6c:	2320      	movs	r3, #32
 8002c6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c72:	2330      	movs	r3, #48	; 0x30
 8002c74:	f04f 0b01 	mov.w	fp, #1
 8002c78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c7c:	9503      	str	r5, [sp, #12]
 8002c7e:	46b8      	mov	r8, r7
 8002c80:	4645      	mov	r5, r8
 8002c82:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002c86:	b10b      	cbz	r3, 8002c8c <_vfiprintf_r+0x50>
 8002c88:	2b25      	cmp	r3, #37	; 0x25
 8002c8a:	d154      	bne.n	8002d36 <_vfiprintf_r+0xfa>
 8002c8c:	ebb8 0a07 	subs.w	sl, r8, r7
 8002c90:	d00b      	beq.n	8002caa <_vfiprintf_r+0x6e>
 8002c92:	4653      	mov	r3, sl
 8002c94:	463a      	mov	r2, r7
 8002c96:	4621      	mov	r1, r4
 8002c98:	4630      	mov	r0, r6
 8002c9a:	f7ff ffbc 	bl	8002c16 <__sfputs_r>
 8002c9e:	3001      	adds	r0, #1
 8002ca0:	f000 80c2 	beq.w	8002e28 <_vfiprintf_r+0x1ec>
 8002ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ca6:	4453      	add	r3, sl
 8002ca8:	9309      	str	r3, [sp, #36]	; 0x24
 8002caa:	f898 3000 	ldrb.w	r3, [r8]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 80ba 	beq.w	8002e28 <_vfiprintf_r+0x1ec>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8002cba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002cbe:	9304      	str	r3, [sp, #16]
 8002cc0:	9307      	str	r3, [sp, #28]
 8002cc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002cc6:	931a      	str	r3, [sp, #104]	; 0x68
 8002cc8:	46a8      	mov	r8, r5
 8002cca:	2205      	movs	r2, #5
 8002ccc:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002cd0:	485e      	ldr	r0, [pc, #376]	; (8002e4c <_vfiprintf_r+0x210>)
 8002cd2:	f000 fafb 	bl	80032cc <memchr>
 8002cd6:	9b04      	ldr	r3, [sp, #16]
 8002cd8:	bb78      	cbnz	r0, 8002d3a <_vfiprintf_r+0xfe>
 8002cda:	06d9      	lsls	r1, r3, #27
 8002cdc:	bf44      	itt	mi
 8002cde:	2220      	movmi	r2, #32
 8002ce0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002ce4:	071a      	lsls	r2, r3, #28
 8002ce6:	bf44      	itt	mi
 8002ce8:	222b      	movmi	r2, #43	; 0x2b
 8002cea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002cee:	782a      	ldrb	r2, [r5, #0]
 8002cf0:	2a2a      	cmp	r2, #42	; 0x2a
 8002cf2:	d02a      	beq.n	8002d4a <_vfiprintf_r+0x10e>
 8002cf4:	46a8      	mov	r8, r5
 8002cf6:	2000      	movs	r0, #0
 8002cf8:	250a      	movs	r5, #10
 8002cfa:	9a07      	ldr	r2, [sp, #28]
 8002cfc:	4641      	mov	r1, r8
 8002cfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d02:	3b30      	subs	r3, #48	; 0x30
 8002d04:	2b09      	cmp	r3, #9
 8002d06:	d969      	bls.n	8002ddc <_vfiprintf_r+0x1a0>
 8002d08:	b360      	cbz	r0, 8002d64 <_vfiprintf_r+0x128>
 8002d0a:	e024      	b.n	8002d56 <_vfiprintf_r+0x11a>
 8002d0c:	4b50      	ldr	r3, [pc, #320]	; (8002e50 <_vfiprintf_r+0x214>)
 8002d0e:	429c      	cmp	r4, r3
 8002d10:	d101      	bne.n	8002d16 <_vfiprintf_r+0xda>
 8002d12:	68b4      	ldr	r4, [r6, #8]
 8002d14:	e7a2      	b.n	8002c5c <_vfiprintf_r+0x20>
 8002d16:	4b4f      	ldr	r3, [pc, #316]	; (8002e54 <_vfiprintf_r+0x218>)
 8002d18:	429c      	cmp	r4, r3
 8002d1a:	bf08      	it	eq
 8002d1c:	68f4      	ldreq	r4, [r6, #12]
 8002d1e:	e79d      	b.n	8002c5c <_vfiprintf_r+0x20>
 8002d20:	4621      	mov	r1, r4
 8002d22:	4630      	mov	r0, r6
 8002d24:	f7ff fc70 	bl	8002608 <__swsetup_r>
 8002d28:	2800      	cmp	r0, #0
 8002d2a:	d09d      	beq.n	8002c68 <_vfiprintf_r+0x2c>
 8002d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d30:	b01d      	add	sp, #116	; 0x74
 8002d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d36:	46a8      	mov	r8, r5
 8002d38:	e7a2      	b.n	8002c80 <_vfiprintf_r+0x44>
 8002d3a:	4a44      	ldr	r2, [pc, #272]	; (8002e4c <_vfiprintf_r+0x210>)
 8002d3c:	4645      	mov	r5, r8
 8002d3e:	1a80      	subs	r0, r0, r2
 8002d40:	fa0b f000 	lsl.w	r0, fp, r0
 8002d44:	4318      	orrs	r0, r3
 8002d46:	9004      	str	r0, [sp, #16]
 8002d48:	e7be      	b.n	8002cc8 <_vfiprintf_r+0x8c>
 8002d4a:	9a03      	ldr	r2, [sp, #12]
 8002d4c:	1d11      	adds	r1, r2, #4
 8002d4e:	6812      	ldr	r2, [r2, #0]
 8002d50:	9103      	str	r1, [sp, #12]
 8002d52:	2a00      	cmp	r2, #0
 8002d54:	db01      	blt.n	8002d5a <_vfiprintf_r+0x11e>
 8002d56:	9207      	str	r2, [sp, #28]
 8002d58:	e004      	b.n	8002d64 <_vfiprintf_r+0x128>
 8002d5a:	4252      	negs	r2, r2
 8002d5c:	f043 0302 	orr.w	r3, r3, #2
 8002d60:	9207      	str	r2, [sp, #28]
 8002d62:	9304      	str	r3, [sp, #16]
 8002d64:	f898 3000 	ldrb.w	r3, [r8]
 8002d68:	2b2e      	cmp	r3, #46	; 0x2e
 8002d6a:	d10e      	bne.n	8002d8a <_vfiprintf_r+0x14e>
 8002d6c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002d70:	2b2a      	cmp	r3, #42	; 0x2a
 8002d72:	d138      	bne.n	8002de6 <_vfiprintf_r+0x1aa>
 8002d74:	9b03      	ldr	r3, [sp, #12]
 8002d76:	f108 0802 	add.w	r8, r8, #2
 8002d7a:	1d1a      	adds	r2, r3, #4
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	9203      	str	r2, [sp, #12]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	bfb8      	it	lt
 8002d84:	f04f 33ff 	movlt.w	r3, #4294967295
 8002d88:	9305      	str	r3, [sp, #20]
 8002d8a:	4d33      	ldr	r5, [pc, #204]	; (8002e58 <_vfiprintf_r+0x21c>)
 8002d8c:	2203      	movs	r2, #3
 8002d8e:	f898 1000 	ldrb.w	r1, [r8]
 8002d92:	4628      	mov	r0, r5
 8002d94:	f000 fa9a 	bl	80032cc <memchr>
 8002d98:	b140      	cbz	r0, 8002dac <_vfiprintf_r+0x170>
 8002d9a:	2340      	movs	r3, #64	; 0x40
 8002d9c:	1b40      	subs	r0, r0, r5
 8002d9e:	fa03 f000 	lsl.w	r0, r3, r0
 8002da2:	9b04      	ldr	r3, [sp, #16]
 8002da4:	f108 0801 	add.w	r8, r8, #1
 8002da8:	4303      	orrs	r3, r0
 8002daa:	9304      	str	r3, [sp, #16]
 8002dac:	f898 1000 	ldrb.w	r1, [r8]
 8002db0:	2206      	movs	r2, #6
 8002db2:	482a      	ldr	r0, [pc, #168]	; (8002e5c <_vfiprintf_r+0x220>)
 8002db4:	f108 0701 	add.w	r7, r8, #1
 8002db8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002dbc:	f000 fa86 	bl	80032cc <memchr>
 8002dc0:	2800      	cmp	r0, #0
 8002dc2:	d037      	beq.n	8002e34 <_vfiprintf_r+0x1f8>
 8002dc4:	4b26      	ldr	r3, [pc, #152]	; (8002e60 <_vfiprintf_r+0x224>)
 8002dc6:	bb1b      	cbnz	r3, 8002e10 <_vfiprintf_r+0x1d4>
 8002dc8:	9b03      	ldr	r3, [sp, #12]
 8002dca:	3307      	adds	r3, #7
 8002dcc:	f023 0307 	bic.w	r3, r3, #7
 8002dd0:	3308      	adds	r3, #8
 8002dd2:	9303      	str	r3, [sp, #12]
 8002dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dd6:	444b      	add	r3, r9
 8002dd8:	9309      	str	r3, [sp, #36]	; 0x24
 8002dda:	e750      	b.n	8002c7e <_vfiprintf_r+0x42>
 8002ddc:	fb05 3202 	mla	r2, r5, r2, r3
 8002de0:	2001      	movs	r0, #1
 8002de2:	4688      	mov	r8, r1
 8002de4:	e78a      	b.n	8002cfc <_vfiprintf_r+0xc0>
 8002de6:	2300      	movs	r3, #0
 8002de8:	250a      	movs	r5, #10
 8002dea:	4619      	mov	r1, r3
 8002dec:	f108 0801 	add.w	r8, r8, #1
 8002df0:	9305      	str	r3, [sp, #20]
 8002df2:	4640      	mov	r0, r8
 8002df4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002df8:	3a30      	subs	r2, #48	; 0x30
 8002dfa:	2a09      	cmp	r2, #9
 8002dfc:	d903      	bls.n	8002e06 <_vfiprintf_r+0x1ca>
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0c3      	beq.n	8002d8a <_vfiprintf_r+0x14e>
 8002e02:	9105      	str	r1, [sp, #20]
 8002e04:	e7c1      	b.n	8002d8a <_vfiprintf_r+0x14e>
 8002e06:	fb05 2101 	mla	r1, r5, r1, r2
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	4680      	mov	r8, r0
 8002e0e:	e7f0      	b.n	8002df2 <_vfiprintf_r+0x1b6>
 8002e10:	ab03      	add	r3, sp, #12
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	4622      	mov	r2, r4
 8002e16:	4b13      	ldr	r3, [pc, #76]	; (8002e64 <_vfiprintf_r+0x228>)
 8002e18:	a904      	add	r1, sp, #16
 8002e1a:	4630      	mov	r0, r6
 8002e1c:	f3af 8000 	nop.w
 8002e20:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002e24:	4681      	mov	r9, r0
 8002e26:	d1d5      	bne.n	8002dd4 <_vfiprintf_r+0x198>
 8002e28:	89a3      	ldrh	r3, [r4, #12]
 8002e2a:	065b      	lsls	r3, r3, #25
 8002e2c:	f53f af7e 	bmi.w	8002d2c <_vfiprintf_r+0xf0>
 8002e30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e32:	e77d      	b.n	8002d30 <_vfiprintf_r+0xf4>
 8002e34:	ab03      	add	r3, sp, #12
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	4622      	mov	r2, r4
 8002e3a:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <_vfiprintf_r+0x228>)
 8002e3c:	a904      	add	r1, sp, #16
 8002e3e:	4630      	mov	r0, r6
 8002e40:	f000 f888 	bl	8002f54 <_printf_i>
 8002e44:	e7ec      	b.n	8002e20 <_vfiprintf_r+0x1e4>
 8002e46:	bf00      	nop
 8002e48:	08003444 	.word	0x08003444
 8002e4c:	08003484 	.word	0x08003484
 8002e50:	08003464 	.word	0x08003464
 8002e54:	08003424 	.word	0x08003424
 8002e58:	0800348a 	.word	0x0800348a
 8002e5c:	0800348e 	.word	0x0800348e
 8002e60:	00000000 	.word	0x00000000
 8002e64:	08002c17 	.word	0x08002c17

08002e68 <_printf_common>:
 8002e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e6c:	4691      	mov	r9, r2
 8002e6e:	461f      	mov	r7, r3
 8002e70:	688a      	ldr	r2, [r1, #8]
 8002e72:	690b      	ldr	r3, [r1, #16]
 8002e74:	4606      	mov	r6, r0
 8002e76:	4293      	cmp	r3, r2
 8002e78:	bfb8      	it	lt
 8002e7a:	4613      	movlt	r3, r2
 8002e7c:	f8c9 3000 	str.w	r3, [r9]
 8002e80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e84:	460c      	mov	r4, r1
 8002e86:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e8a:	b112      	cbz	r2, 8002e92 <_printf_common+0x2a>
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	f8c9 3000 	str.w	r3, [r9]
 8002e92:	6823      	ldr	r3, [r4, #0]
 8002e94:	0699      	lsls	r1, r3, #26
 8002e96:	bf42      	ittt	mi
 8002e98:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002e9c:	3302      	addmi	r3, #2
 8002e9e:	f8c9 3000 	strmi.w	r3, [r9]
 8002ea2:	6825      	ldr	r5, [r4, #0]
 8002ea4:	f015 0506 	ands.w	r5, r5, #6
 8002ea8:	d107      	bne.n	8002eba <_printf_common+0x52>
 8002eaa:	f104 0a19 	add.w	sl, r4, #25
 8002eae:	68e3      	ldr	r3, [r4, #12]
 8002eb0:	f8d9 2000 	ldr.w	r2, [r9]
 8002eb4:	1a9b      	subs	r3, r3, r2
 8002eb6:	42ab      	cmp	r3, r5
 8002eb8:	dc29      	bgt.n	8002f0e <_printf_common+0xa6>
 8002eba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002ebe:	6822      	ldr	r2, [r4, #0]
 8002ec0:	3300      	adds	r3, #0
 8002ec2:	bf18      	it	ne
 8002ec4:	2301      	movne	r3, #1
 8002ec6:	0692      	lsls	r2, r2, #26
 8002ec8:	d42e      	bmi.n	8002f28 <_printf_common+0xc0>
 8002eca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ece:	4639      	mov	r1, r7
 8002ed0:	4630      	mov	r0, r6
 8002ed2:	47c0      	blx	r8
 8002ed4:	3001      	adds	r0, #1
 8002ed6:	d021      	beq.n	8002f1c <_printf_common+0xb4>
 8002ed8:	6823      	ldr	r3, [r4, #0]
 8002eda:	68e5      	ldr	r5, [r4, #12]
 8002edc:	f003 0306 	and.w	r3, r3, #6
 8002ee0:	2b04      	cmp	r3, #4
 8002ee2:	bf18      	it	ne
 8002ee4:	2500      	movne	r5, #0
 8002ee6:	f8d9 2000 	ldr.w	r2, [r9]
 8002eea:	f04f 0900 	mov.w	r9, #0
 8002eee:	bf08      	it	eq
 8002ef0:	1aad      	subeq	r5, r5, r2
 8002ef2:	68a3      	ldr	r3, [r4, #8]
 8002ef4:	6922      	ldr	r2, [r4, #16]
 8002ef6:	bf08      	it	eq
 8002ef8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002efc:	4293      	cmp	r3, r2
 8002efe:	bfc4      	itt	gt
 8002f00:	1a9b      	subgt	r3, r3, r2
 8002f02:	18ed      	addgt	r5, r5, r3
 8002f04:	341a      	adds	r4, #26
 8002f06:	454d      	cmp	r5, r9
 8002f08:	d11a      	bne.n	8002f40 <_printf_common+0xd8>
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	e008      	b.n	8002f20 <_printf_common+0xb8>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	4652      	mov	r2, sl
 8002f12:	4639      	mov	r1, r7
 8002f14:	4630      	mov	r0, r6
 8002f16:	47c0      	blx	r8
 8002f18:	3001      	adds	r0, #1
 8002f1a:	d103      	bne.n	8002f24 <_printf_common+0xbc>
 8002f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f24:	3501      	adds	r5, #1
 8002f26:	e7c2      	b.n	8002eae <_printf_common+0x46>
 8002f28:	2030      	movs	r0, #48	; 0x30
 8002f2a:	18e1      	adds	r1, r4, r3
 8002f2c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f36:	4422      	add	r2, r4
 8002f38:	3302      	adds	r3, #2
 8002f3a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f3e:	e7c4      	b.n	8002eca <_printf_common+0x62>
 8002f40:	2301      	movs	r3, #1
 8002f42:	4622      	mov	r2, r4
 8002f44:	4639      	mov	r1, r7
 8002f46:	4630      	mov	r0, r6
 8002f48:	47c0      	blx	r8
 8002f4a:	3001      	adds	r0, #1
 8002f4c:	d0e6      	beq.n	8002f1c <_printf_common+0xb4>
 8002f4e:	f109 0901 	add.w	r9, r9, #1
 8002f52:	e7d8      	b.n	8002f06 <_printf_common+0x9e>

08002f54 <_printf_i>:
 8002f54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f58:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002f5c:	460c      	mov	r4, r1
 8002f5e:	7e09      	ldrb	r1, [r1, #24]
 8002f60:	b085      	sub	sp, #20
 8002f62:	296e      	cmp	r1, #110	; 0x6e
 8002f64:	4617      	mov	r7, r2
 8002f66:	4606      	mov	r6, r0
 8002f68:	4698      	mov	r8, r3
 8002f6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002f6c:	f000 80b3 	beq.w	80030d6 <_printf_i+0x182>
 8002f70:	d822      	bhi.n	8002fb8 <_printf_i+0x64>
 8002f72:	2963      	cmp	r1, #99	; 0x63
 8002f74:	d036      	beq.n	8002fe4 <_printf_i+0x90>
 8002f76:	d80a      	bhi.n	8002f8e <_printf_i+0x3a>
 8002f78:	2900      	cmp	r1, #0
 8002f7a:	f000 80b9 	beq.w	80030f0 <_printf_i+0x19c>
 8002f7e:	2958      	cmp	r1, #88	; 0x58
 8002f80:	f000 8083 	beq.w	800308a <_printf_i+0x136>
 8002f84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f88:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002f8c:	e032      	b.n	8002ff4 <_printf_i+0xa0>
 8002f8e:	2964      	cmp	r1, #100	; 0x64
 8002f90:	d001      	beq.n	8002f96 <_printf_i+0x42>
 8002f92:	2969      	cmp	r1, #105	; 0x69
 8002f94:	d1f6      	bne.n	8002f84 <_printf_i+0x30>
 8002f96:	6820      	ldr	r0, [r4, #0]
 8002f98:	6813      	ldr	r3, [r2, #0]
 8002f9a:	0605      	lsls	r5, r0, #24
 8002f9c:	f103 0104 	add.w	r1, r3, #4
 8002fa0:	d52a      	bpl.n	8002ff8 <_printf_i+0xa4>
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6011      	str	r1, [r2, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	da03      	bge.n	8002fb2 <_printf_i+0x5e>
 8002faa:	222d      	movs	r2, #45	; 0x2d
 8002fac:	425b      	negs	r3, r3
 8002fae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002fb2:	486f      	ldr	r0, [pc, #444]	; (8003170 <_printf_i+0x21c>)
 8002fb4:	220a      	movs	r2, #10
 8002fb6:	e039      	b.n	800302c <_printf_i+0xd8>
 8002fb8:	2973      	cmp	r1, #115	; 0x73
 8002fba:	f000 809d 	beq.w	80030f8 <_printf_i+0x1a4>
 8002fbe:	d808      	bhi.n	8002fd2 <_printf_i+0x7e>
 8002fc0:	296f      	cmp	r1, #111	; 0x6f
 8002fc2:	d020      	beq.n	8003006 <_printf_i+0xb2>
 8002fc4:	2970      	cmp	r1, #112	; 0x70
 8002fc6:	d1dd      	bne.n	8002f84 <_printf_i+0x30>
 8002fc8:	6823      	ldr	r3, [r4, #0]
 8002fca:	f043 0320 	orr.w	r3, r3, #32
 8002fce:	6023      	str	r3, [r4, #0]
 8002fd0:	e003      	b.n	8002fda <_printf_i+0x86>
 8002fd2:	2975      	cmp	r1, #117	; 0x75
 8002fd4:	d017      	beq.n	8003006 <_printf_i+0xb2>
 8002fd6:	2978      	cmp	r1, #120	; 0x78
 8002fd8:	d1d4      	bne.n	8002f84 <_printf_i+0x30>
 8002fda:	2378      	movs	r3, #120	; 0x78
 8002fdc:	4865      	ldr	r0, [pc, #404]	; (8003174 <_printf_i+0x220>)
 8002fde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002fe2:	e055      	b.n	8003090 <_printf_i+0x13c>
 8002fe4:	6813      	ldr	r3, [r2, #0]
 8002fe6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fea:	1d19      	adds	r1, r3, #4
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6011      	str	r1, [r2, #0]
 8002ff0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e08c      	b.n	8003112 <_printf_i+0x1be>
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002ffe:	6011      	str	r1, [r2, #0]
 8003000:	bf18      	it	ne
 8003002:	b21b      	sxthne	r3, r3
 8003004:	e7cf      	b.n	8002fa6 <_printf_i+0x52>
 8003006:	6813      	ldr	r3, [r2, #0]
 8003008:	6825      	ldr	r5, [r4, #0]
 800300a:	1d18      	adds	r0, r3, #4
 800300c:	6010      	str	r0, [r2, #0]
 800300e:	0628      	lsls	r0, r5, #24
 8003010:	d501      	bpl.n	8003016 <_printf_i+0xc2>
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	e002      	b.n	800301c <_printf_i+0xc8>
 8003016:	0668      	lsls	r0, r5, #25
 8003018:	d5fb      	bpl.n	8003012 <_printf_i+0xbe>
 800301a:	881b      	ldrh	r3, [r3, #0]
 800301c:	296f      	cmp	r1, #111	; 0x6f
 800301e:	bf14      	ite	ne
 8003020:	220a      	movne	r2, #10
 8003022:	2208      	moveq	r2, #8
 8003024:	4852      	ldr	r0, [pc, #328]	; (8003170 <_printf_i+0x21c>)
 8003026:	2100      	movs	r1, #0
 8003028:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800302c:	6865      	ldr	r5, [r4, #4]
 800302e:	2d00      	cmp	r5, #0
 8003030:	60a5      	str	r5, [r4, #8]
 8003032:	f2c0 8095 	blt.w	8003160 <_printf_i+0x20c>
 8003036:	6821      	ldr	r1, [r4, #0]
 8003038:	f021 0104 	bic.w	r1, r1, #4
 800303c:	6021      	str	r1, [r4, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d13d      	bne.n	80030be <_printf_i+0x16a>
 8003042:	2d00      	cmp	r5, #0
 8003044:	f040 808e 	bne.w	8003164 <_printf_i+0x210>
 8003048:	4665      	mov	r5, ip
 800304a:	2a08      	cmp	r2, #8
 800304c:	d10b      	bne.n	8003066 <_printf_i+0x112>
 800304e:	6823      	ldr	r3, [r4, #0]
 8003050:	07db      	lsls	r3, r3, #31
 8003052:	d508      	bpl.n	8003066 <_printf_i+0x112>
 8003054:	6923      	ldr	r3, [r4, #16]
 8003056:	6862      	ldr	r2, [r4, #4]
 8003058:	429a      	cmp	r2, r3
 800305a:	bfde      	ittt	le
 800305c:	2330      	movle	r3, #48	; 0x30
 800305e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003062:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003066:	ebac 0305 	sub.w	r3, ip, r5
 800306a:	6123      	str	r3, [r4, #16]
 800306c:	f8cd 8000 	str.w	r8, [sp]
 8003070:	463b      	mov	r3, r7
 8003072:	aa03      	add	r2, sp, #12
 8003074:	4621      	mov	r1, r4
 8003076:	4630      	mov	r0, r6
 8003078:	f7ff fef6 	bl	8002e68 <_printf_common>
 800307c:	3001      	adds	r0, #1
 800307e:	d14d      	bne.n	800311c <_printf_i+0x1c8>
 8003080:	f04f 30ff 	mov.w	r0, #4294967295
 8003084:	b005      	add	sp, #20
 8003086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800308a:	4839      	ldr	r0, [pc, #228]	; (8003170 <_printf_i+0x21c>)
 800308c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003090:	6813      	ldr	r3, [r2, #0]
 8003092:	6821      	ldr	r1, [r4, #0]
 8003094:	1d1d      	adds	r5, r3, #4
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6015      	str	r5, [r2, #0]
 800309a:	060a      	lsls	r2, r1, #24
 800309c:	d50b      	bpl.n	80030b6 <_printf_i+0x162>
 800309e:	07ca      	lsls	r2, r1, #31
 80030a0:	bf44      	itt	mi
 80030a2:	f041 0120 	orrmi.w	r1, r1, #32
 80030a6:	6021      	strmi	r1, [r4, #0]
 80030a8:	b91b      	cbnz	r3, 80030b2 <_printf_i+0x15e>
 80030aa:	6822      	ldr	r2, [r4, #0]
 80030ac:	f022 0220 	bic.w	r2, r2, #32
 80030b0:	6022      	str	r2, [r4, #0]
 80030b2:	2210      	movs	r2, #16
 80030b4:	e7b7      	b.n	8003026 <_printf_i+0xd2>
 80030b6:	064d      	lsls	r5, r1, #25
 80030b8:	bf48      	it	mi
 80030ba:	b29b      	uxthmi	r3, r3
 80030bc:	e7ef      	b.n	800309e <_printf_i+0x14a>
 80030be:	4665      	mov	r5, ip
 80030c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80030c4:	fb02 3311 	mls	r3, r2, r1, r3
 80030c8:	5cc3      	ldrb	r3, [r0, r3]
 80030ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80030ce:	460b      	mov	r3, r1
 80030d0:	2900      	cmp	r1, #0
 80030d2:	d1f5      	bne.n	80030c0 <_printf_i+0x16c>
 80030d4:	e7b9      	b.n	800304a <_printf_i+0xf6>
 80030d6:	6813      	ldr	r3, [r2, #0]
 80030d8:	6825      	ldr	r5, [r4, #0]
 80030da:	1d18      	adds	r0, r3, #4
 80030dc:	6961      	ldr	r1, [r4, #20]
 80030de:	6010      	str	r0, [r2, #0]
 80030e0:	0628      	lsls	r0, r5, #24
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	d501      	bpl.n	80030ea <_printf_i+0x196>
 80030e6:	6019      	str	r1, [r3, #0]
 80030e8:	e002      	b.n	80030f0 <_printf_i+0x19c>
 80030ea:	066a      	lsls	r2, r5, #25
 80030ec:	d5fb      	bpl.n	80030e6 <_printf_i+0x192>
 80030ee:	8019      	strh	r1, [r3, #0]
 80030f0:	2300      	movs	r3, #0
 80030f2:	4665      	mov	r5, ip
 80030f4:	6123      	str	r3, [r4, #16]
 80030f6:	e7b9      	b.n	800306c <_printf_i+0x118>
 80030f8:	6813      	ldr	r3, [r2, #0]
 80030fa:	1d19      	adds	r1, r3, #4
 80030fc:	6011      	str	r1, [r2, #0]
 80030fe:	681d      	ldr	r5, [r3, #0]
 8003100:	6862      	ldr	r2, [r4, #4]
 8003102:	2100      	movs	r1, #0
 8003104:	4628      	mov	r0, r5
 8003106:	f000 f8e1 	bl	80032cc <memchr>
 800310a:	b108      	cbz	r0, 8003110 <_printf_i+0x1bc>
 800310c:	1b40      	subs	r0, r0, r5
 800310e:	6060      	str	r0, [r4, #4]
 8003110:	6863      	ldr	r3, [r4, #4]
 8003112:	6123      	str	r3, [r4, #16]
 8003114:	2300      	movs	r3, #0
 8003116:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800311a:	e7a7      	b.n	800306c <_printf_i+0x118>
 800311c:	6923      	ldr	r3, [r4, #16]
 800311e:	462a      	mov	r2, r5
 8003120:	4639      	mov	r1, r7
 8003122:	4630      	mov	r0, r6
 8003124:	47c0      	blx	r8
 8003126:	3001      	adds	r0, #1
 8003128:	d0aa      	beq.n	8003080 <_printf_i+0x12c>
 800312a:	6823      	ldr	r3, [r4, #0]
 800312c:	079b      	lsls	r3, r3, #30
 800312e:	d413      	bmi.n	8003158 <_printf_i+0x204>
 8003130:	68e0      	ldr	r0, [r4, #12]
 8003132:	9b03      	ldr	r3, [sp, #12]
 8003134:	4298      	cmp	r0, r3
 8003136:	bfb8      	it	lt
 8003138:	4618      	movlt	r0, r3
 800313a:	e7a3      	b.n	8003084 <_printf_i+0x130>
 800313c:	2301      	movs	r3, #1
 800313e:	464a      	mov	r2, r9
 8003140:	4639      	mov	r1, r7
 8003142:	4630      	mov	r0, r6
 8003144:	47c0      	blx	r8
 8003146:	3001      	adds	r0, #1
 8003148:	d09a      	beq.n	8003080 <_printf_i+0x12c>
 800314a:	3501      	adds	r5, #1
 800314c:	68e3      	ldr	r3, [r4, #12]
 800314e:	9a03      	ldr	r2, [sp, #12]
 8003150:	1a9b      	subs	r3, r3, r2
 8003152:	42ab      	cmp	r3, r5
 8003154:	dcf2      	bgt.n	800313c <_printf_i+0x1e8>
 8003156:	e7eb      	b.n	8003130 <_printf_i+0x1dc>
 8003158:	2500      	movs	r5, #0
 800315a:	f104 0919 	add.w	r9, r4, #25
 800315e:	e7f5      	b.n	800314c <_printf_i+0x1f8>
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1ac      	bne.n	80030be <_printf_i+0x16a>
 8003164:	7803      	ldrb	r3, [r0, #0]
 8003166:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800316a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800316e:	e76c      	b.n	800304a <_printf_i+0xf6>
 8003170:	08003495 	.word	0x08003495
 8003174:	080034a6 	.word	0x080034a6

08003178 <_sbrk_r>:
 8003178:	b538      	push	{r3, r4, r5, lr}
 800317a:	2300      	movs	r3, #0
 800317c:	4c05      	ldr	r4, [pc, #20]	; (8003194 <_sbrk_r+0x1c>)
 800317e:	4605      	mov	r5, r0
 8003180:	4608      	mov	r0, r1
 8003182:	6023      	str	r3, [r4, #0]
 8003184:	f7fd fbda 	bl	800093c <_sbrk>
 8003188:	1c43      	adds	r3, r0, #1
 800318a:	d102      	bne.n	8003192 <_sbrk_r+0x1a>
 800318c:	6823      	ldr	r3, [r4, #0]
 800318e:	b103      	cbz	r3, 8003192 <_sbrk_r+0x1a>
 8003190:	602b      	str	r3, [r5, #0]
 8003192:	bd38      	pop	{r3, r4, r5, pc}
 8003194:	20000198 	.word	0x20000198

08003198 <__sread>:
 8003198:	b510      	push	{r4, lr}
 800319a:	460c      	mov	r4, r1
 800319c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031a0:	f000 f8a4 	bl	80032ec <_read_r>
 80031a4:	2800      	cmp	r0, #0
 80031a6:	bfab      	itete	ge
 80031a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80031aa:	89a3      	ldrhlt	r3, [r4, #12]
 80031ac:	181b      	addge	r3, r3, r0
 80031ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80031b2:	bfac      	ite	ge
 80031b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80031b6:	81a3      	strhlt	r3, [r4, #12]
 80031b8:	bd10      	pop	{r4, pc}

080031ba <__swrite>:
 80031ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031be:	461f      	mov	r7, r3
 80031c0:	898b      	ldrh	r3, [r1, #12]
 80031c2:	4605      	mov	r5, r0
 80031c4:	05db      	lsls	r3, r3, #23
 80031c6:	460c      	mov	r4, r1
 80031c8:	4616      	mov	r6, r2
 80031ca:	d505      	bpl.n	80031d8 <__swrite+0x1e>
 80031cc:	2302      	movs	r3, #2
 80031ce:	2200      	movs	r2, #0
 80031d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031d4:	f000 f868 	bl	80032a8 <_lseek_r>
 80031d8:	89a3      	ldrh	r3, [r4, #12]
 80031da:	4632      	mov	r2, r6
 80031dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031e0:	81a3      	strh	r3, [r4, #12]
 80031e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031e6:	463b      	mov	r3, r7
 80031e8:	4628      	mov	r0, r5
 80031ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80031ee:	f000 b817 	b.w	8003220 <_write_r>

080031f2 <__sseek>:
 80031f2:	b510      	push	{r4, lr}
 80031f4:	460c      	mov	r4, r1
 80031f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031fa:	f000 f855 	bl	80032a8 <_lseek_r>
 80031fe:	1c43      	adds	r3, r0, #1
 8003200:	89a3      	ldrh	r3, [r4, #12]
 8003202:	bf15      	itete	ne
 8003204:	6560      	strne	r0, [r4, #84]	; 0x54
 8003206:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800320a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800320e:	81a3      	strheq	r3, [r4, #12]
 8003210:	bf18      	it	ne
 8003212:	81a3      	strhne	r3, [r4, #12]
 8003214:	bd10      	pop	{r4, pc}

08003216 <__sclose>:
 8003216:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800321a:	f000 b813 	b.w	8003244 <_close_r>
	...

08003220 <_write_r>:
 8003220:	b538      	push	{r3, r4, r5, lr}
 8003222:	4605      	mov	r5, r0
 8003224:	4608      	mov	r0, r1
 8003226:	4611      	mov	r1, r2
 8003228:	2200      	movs	r2, #0
 800322a:	4c05      	ldr	r4, [pc, #20]	; (8003240 <_write_r+0x20>)
 800322c:	6022      	str	r2, [r4, #0]
 800322e:	461a      	mov	r2, r3
 8003230:	f7fd fb37 	bl	80008a2 <_write>
 8003234:	1c43      	adds	r3, r0, #1
 8003236:	d102      	bne.n	800323e <_write_r+0x1e>
 8003238:	6823      	ldr	r3, [r4, #0]
 800323a:	b103      	cbz	r3, 800323e <_write_r+0x1e>
 800323c:	602b      	str	r3, [r5, #0]
 800323e:	bd38      	pop	{r3, r4, r5, pc}
 8003240:	20000198 	.word	0x20000198

08003244 <_close_r>:
 8003244:	b538      	push	{r3, r4, r5, lr}
 8003246:	2300      	movs	r3, #0
 8003248:	4c05      	ldr	r4, [pc, #20]	; (8003260 <_close_r+0x1c>)
 800324a:	4605      	mov	r5, r0
 800324c:	4608      	mov	r0, r1
 800324e:	6023      	str	r3, [r4, #0]
 8003250:	f7fd fb43 	bl	80008da <_close>
 8003254:	1c43      	adds	r3, r0, #1
 8003256:	d102      	bne.n	800325e <_close_r+0x1a>
 8003258:	6823      	ldr	r3, [r4, #0]
 800325a:	b103      	cbz	r3, 800325e <_close_r+0x1a>
 800325c:	602b      	str	r3, [r5, #0]
 800325e:	bd38      	pop	{r3, r4, r5, pc}
 8003260:	20000198 	.word	0x20000198

08003264 <_fstat_r>:
 8003264:	b538      	push	{r3, r4, r5, lr}
 8003266:	2300      	movs	r3, #0
 8003268:	4c06      	ldr	r4, [pc, #24]	; (8003284 <_fstat_r+0x20>)
 800326a:	4605      	mov	r5, r0
 800326c:	4608      	mov	r0, r1
 800326e:	4611      	mov	r1, r2
 8003270:	6023      	str	r3, [r4, #0]
 8003272:	f7fd fb3d 	bl	80008f0 <_fstat>
 8003276:	1c43      	adds	r3, r0, #1
 8003278:	d102      	bne.n	8003280 <_fstat_r+0x1c>
 800327a:	6823      	ldr	r3, [r4, #0]
 800327c:	b103      	cbz	r3, 8003280 <_fstat_r+0x1c>
 800327e:	602b      	str	r3, [r5, #0]
 8003280:	bd38      	pop	{r3, r4, r5, pc}
 8003282:	bf00      	nop
 8003284:	20000198 	.word	0x20000198

08003288 <_isatty_r>:
 8003288:	b538      	push	{r3, r4, r5, lr}
 800328a:	2300      	movs	r3, #0
 800328c:	4c05      	ldr	r4, [pc, #20]	; (80032a4 <_isatty_r+0x1c>)
 800328e:	4605      	mov	r5, r0
 8003290:	4608      	mov	r0, r1
 8003292:	6023      	str	r3, [r4, #0]
 8003294:	f7fd fb3b 	bl	800090e <_isatty>
 8003298:	1c43      	adds	r3, r0, #1
 800329a:	d102      	bne.n	80032a2 <_isatty_r+0x1a>
 800329c:	6823      	ldr	r3, [r4, #0]
 800329e:	b103      	cbz	r3, 80032a2 <_isatty_r+0x1a>
 80032a0:	602b      	str	r3, [r5, #0]
 80032a2:	bd38      	pop	{r3, r4, r5, pc}
 80032a4:	20000198 	.word	0x20000198

080032a8 <_lseek_r>:
 80032a8:	b538      	push	{r3, r4, r5, lr}
 80032aa:	4605      	mov	r5, r0
 80032ac:	4608      	mov	r0, r1
 80032ae:	4611      	mov	r1, r2
 80032b0:	2200      	movs	r2, #0
 80032b2:	4c05      	ldr	r4, [pc, #20]	; (80032c8 <_lseek_r+0x20>)
 80032b4:	6022      	str	r2, [r4, #0]
 80032b6:	461a      	mov	r2, r3
 80032b8:	f7fd fb33 	bl	8000922 <_lseek>
 80032bc:	1c43      	adds	r3, r0, #1
 80032be:	d102      	bne.n	80032c6 <_lseek_r+0x1e>
 80032c0:	6823      	ldr	r3, [r4, #0]
 80032c2:	b103      	cbz	r3, 80032c6 <_lseek_r+0x1e>
 80032c4:	602b      	str	r3, [r5, #0]
 80032c6:	bd38      	pop	{r3, r4, r5, pc}
 80032c8:	20000198 	.word	0x20000198

080032cc <memchr>:
 80032cc:	b510      	push	{r4, lr}
 80032ce:	b2c9      	uxtb	r1, r1
 80032d0:	4402      	add	r2, r0
 80032d2:	4290      	cmp	r0, r2
 80032d4:	4603      	mov	r3, r0
 80032d6:	d101      	bne.n	80032dc <memchr+0x10>
 80032d8:	2300      	movs	r3, #0
 80032da:	e003      	b.n	80032e4 <memchr+0x18>
 80032dc:	781c      	ldrb	r4, [r3, #0]
 80032de:	3001      	adds	r0, #1
 80032e0:	428c      	cmp	r4, r1
 80032e2:	d1f6      	bne.n	80032d2 <memchr+0x6>
 80032e4:	4618      	mov	r0, r3
 80032e6:	bd10      	pop	{r4, pc}

080032e8 <__malloc_lock>:
 80032e8:	4770      	bx	lr

080032ea <__malloc_unlock>:
 80032ea:	4770      	bx	lr

080032ec <_read_r>:
 80032ec:	b538      	push	{r3, r4, r5, lr}
 80032ee:	4605      	mov	r5, r0
 80032f0:	4608      	mov	r0, r1
 80032f2:	4611      	mov	r1, r2
 80032f4:	2200      	movs	r2, #0
 80032f6:	4c05      	ldr	r4, [pc, #20]	; (800330c <_read_r+0x20>)
 80032f8:	6022      	str	r2, [r4, #0]
 80032fa:	461a      	mov	r2, r3
 80032fc:	f7fd fab4 	bl	8000868 <_read>
 8003300:	1c43      	adds	r3, r0, #1
 8003302:	d102      	bne.n	800330a <_read_r+0x1e>
 8003304:	6823      	ldr	r3, [r4, #0]
 8003306:	b103      	cbz	r3, 800330a <_read_r+0x1e>
 8003308:	602b      	str	r3, [r5, #0]
 800330a:	bd38      	pop	{r3, r4, r5, pc}
 800330c:	20000198 	.word	0x20000198

08003310 <_init>:
 8003310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003312:	bf00      	nop
 8003314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003316:	bc08      	pop	{r3}
 8003318:	469e      	mov	lr, r3
 800331a:	4770      	bx	lr

0800331c <_fini>:
 800331c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800331e:	bf00      	nop
 8003320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003322:	bc08      	pop	{r3}
 8003324:	469e      	mov	lr, r3
 8003326:	4770      	bx	lr
