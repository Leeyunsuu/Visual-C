
a14-15-i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b88  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08003c94  08003c94  00013c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dac  08003dac  000200b4  2**0
                  CONTENTS
  4 .ARM          00000000  08003dac  08003dac  000200b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003dac  08003dac  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dac  08003dac  00013dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003db0  08003db0  00013db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08003db4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  200000b4  08003e68  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08003e68  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d14  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000181a  00000000  00000000  00029df1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a38  00000000  00000000  0002b610  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009c8  00000000  00000000  0002c048  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017f74  00000000  00000000  0002ca10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007c1e  00000000  00000000  00044984  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00085e60  00000000  00000000  0004c5a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d2402  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030b8  00000000  00000000  000d2480  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b4 	.word	0x200000b4
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c7c 	.word	0x08003c7c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b8 	.word	0x200000b8
 8000148:	08003c7c 	.word	0x08003c7c

0800014c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800015a:	2201      	movs	r2, #1
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <__io_putchar+0x20>)
 800015e:	f002 fbfc 	bl	800295a <HAL_UART_Transmit>

  return ch;
 8000162:	687b      	ldr	r3, [r7, #4]
}
 8000164:	4618      	mov	r0, r3
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	20000144 	.word	0x20000144

08000170 <lcd_send_cmd>:

//----- character LCD ------------------------------------------------------------------
void lcd_send_cmd(char cmd)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b086      	sub	sp, #24
 8000174:	af02      	add	r7, sp, #8
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 800017a:	79fb      	ldrb	r3, [r7, #7]
 800017c:	f023 030f 	bic.w	r3, r3, #15
 8000180:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	011b      	lsls	r3, r3, #4
 8000186:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;  //[3]backlight=1, [2]en=1, [1]r/w=0, [0]rs=0
 8000188:	7bfb      	ldrb	r3, [r7, #15]
 800018a:	f043 030c 	orr.w	r3, r3, #12
 800018e:	b2db      	uxtb	r3, r3
 8000190:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;  //[3]backlight=1, [2]en=0, [1]r/w=0, [0]rs=0
 8000192:	7bfb      	ldrb	r3, [r7, #15]
 8000194:	f043 0308 	orr.w	r3, r3, #8
 8000198:	b2db      	uxtb	r3, r3
 800019a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;  //[3]backlight=1, [2]en=1, [1]r/w=0, [0]rs=0
 800019c:	7bbb      	ldrb	r3, [r7, #14]
 800019e:	f043 030c 	orr.w	r3, r3, #12
 80001a2:	b2db      	uxtb	r3, r3
 80001a4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;  //[3]backlight=1, [2]en=0, [1]r/w=0, [0]rs=0
 80001a6:	7bbb      	ldrb	r3, [r7, #14]
 80001a8:	f043 0308 	orr.w	r3, r3, #8
 80001ac:	b2db      	uxtb	r3, r3
 80001ae:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c2, i2cAddress,(uint8_t *) data_t, 4, 100);
 80001b0:	4b06      	ldr	r3, [pc, #24]	; (80001cc <lcd_send_cmd+0x5c>)
 80001b2:	8819      	ldrh	r1, [r3, #0]
 80001b4:	f107 0208 	add.w	r2, r7, #8
 80001b8:	2364      	movs	r3, #100	; 0x64
 80001ba:	9300      	str	r3, [sp, #0]
 80001bc:	2304      	movs	r3, #4
 80001be:	4804      	ldr	r0, [pc, #16]	; (80001d0 <lcd_send_cmd+0x60>)
 80001c0:	f001 fb2e 	bl	8001820 <HAL_I2C_Master_Transmit>
}
 80001c4:	bf00      	nop
 80001c6:	3710      	adds	r7, #16
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000000 	.word	0x20000000
 80001d0:	200000e0 	.word	0x200000e0

080001d4 <lcd_send_data>:

void lcd_send_data(char data)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b086      	sub	sp, #24
 80001d8:	af02      	add	r7, sp, #8
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	f023 030f 	bic.w	r3, r3, #15
 80001e4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	011b      	lsls	r3, r3, #4
 80001ea:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;  //[3]backlight=1, [2]en=1, [1]r/w=0, [0]rs=1
 80001ec:	7bfb      	ldrb	r3, [r7, #15]
 80001ee:	f043 030d 	orr.w	r3, r3, #13
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;  //[3]backlight=1, [2]en=0, [1]r/w=0, [0]rs=1
 80001f6:	7bfb      	ldrb	r3, [r7, #15]
 80001f8:	f043 0309 	orr.w	r3, r3, #9
 80001fc:	b2db      	uxtb	r3, r3
 80001fe:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;  //[3]backlight=1, [2]en=1, [1]r/w=0, [0]rs=1
 8000200:	7bbb      	ldrb	r3, [r7, #14]
 8000202:	f043 030d 	orr.w	r3, r3, #13
 8000206:	b2db      	uxtb	r3, r3
 8000208:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;  //[3]backlight=1, [2]en=0, [1]r/w=0, [0]rs=1
 800020a:	7bbb      	ldrb	r3, [r7, #14]
 800020c:	f043 0309 	orr.w	r3, r3, #9
 8000210:	b2db      	uxtb	r3, r3
 8000212:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c2, i2cAddress,(uint8_t *) data_t, 4, 100);
 8000214:	4b06      	ldr	r3, [pc, #24]	; (8000230 <lcd_send_data+0x5c>)
 8000216:	8819      	ldrh	r1, [r3, #0]
 8000218:	f107 0208 	add.w	r2, r7, #8
 800021c:	2364      	movs	r3, #100	; 0x64
 800021e:	9300      	str	r3, [sp, #0]
 8000220:	2304      	movs	r3, #4
 8000222:	4804      	ldr	r0, [pc, #16]	; (8000234 <lcd_send_data+0x60>)
 8000224:	f001 fafc 	bl	8001820 <HAL_I2C_Master_Transmit>
}
 8000228:	bf00      	nop
 800022a:	3710      	adds	r7, #16
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	20000000 	.word	0x20000000
 8000234:	200000e0 	.word	0x200000e0

08000238 <lcd_init>:

void lcd_init(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800023c:	2032      	movs	r0, #50	; 0x32
 800023e:	f000 fed9 	bl	8000ff4 <HAL_Delay>
	lcd_send_cmd(0x30);
 8000242:	2030      	movs	r0, #48	; 0x30
 8000244:	f7ff ff94 	bl	8000170 <lcd_send_cmd>
	HAL_Delay(10);  // wait for >4.1ms
 8000248:	200a      	movs	r0, #10
 800024a:	f000 fed3 	bl	8000ff4 <HAL_Delay>
	lcd_send_cmd(0x30);
 800024e:	2030      	movs	r0, #48	; 0x30
 8000250:	f7ff ff8e 	bl	8000170 <lcd_send_cmd>
	HAL_Delay(10);  // wait for >100us
 8000254:	200a      	movs	r0, #10
 8000256:	f000 fecd 	bl	8000ff4 <HAL_Delay>
	lcd_send_cmd(0x30);
 800025a:	2030      	movs	r0, #48	; 0x30
 800025c:	f7ff ff88 	bl	8000170 <lcd_send_cmd>
	HAL_Delay(10);
 8000260:	200a      	movs	r0, #10
 8000262:	f000 fec7 	bl	8000ff4 <HAL_Delay>
	lcd_send_cmd(0x20);  // 4bit mode
 8000266:	2020      	movs	r0, #32
 8000268:	f7ff ff82 	bl	8000170 <lcd_send_cmd>
	HAL_Delay(10);
 800026c:	200a      	movs	r0, #10
 800026e:	f000 fec1 	bl	8000ff4 <HAL_Delay>

	// dislay initialisation
	_displayfunction = LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS; // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000272:	4b19      	ldr	r3, [pc, #100]	; (80002d8 <lcd_init+0xa0>)
 8000274:	2208      	movs	r2, #8
 8000276:	701a      	strb	r2, [r3, #0]
	lcd_send_cmd(LCD_FUNCTIONSET | _displayfunction);
 8000278:	4b17      	ldr	r3, [pc, #92]	; (80002d8 <lcd_init+0xa0>)
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	f043 0320 	orr.w	r3, r3, #32
 8000280:	b2db      	uxtb	r3, r3
 8000282:	4618      	mov	r0, r3
 8000284:	f7ff ff74 	bl	8000170 <lcd_send_cmd>
	HAL_Delay(10);
 8000288:	200a      	movs	r0, #10
 800028a:	f000 feb3 	bl	8000ff4 <HAL_Delay>

	_displaymode = LCD_ENTRYDDRAMINCREMENT; //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800028e:	4b13      	ldr	r3, [pc, #76]	; (80002dc <lcd_init+0xa4>)
 8000290:	2202      	movs	r2, #2
 8000292:	701a      	strb	r2, [r3, #0]
	lcd_send_cmd(LCD_ENTRYMODESET | _displaymode);
 8000294:	4b11      	ldr	r3, [pc, #68]	; (80002dc <lcd_init+0xa4>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	f043 0304 	orr.w	r3, r3, #4
 800029c:	b2db      	uxtb	r3, r3
 800029e:	4618      	mov	r0, r3
 80002a0:	f7ff ff66 	bl	8000170 <lcd_send_cmd>
	HAL_Delay(10);
 80002a4:	200a      	movs	r0, #10
 80002a6:	f000 fea5 	bl	8000ff4 <HAL_Delay>

	_displaycontrol = LCD_DISPLAYON | LCD_CURSORON | LCD_BLINKON; //Display on/off control --> D=1, C=1, B=1
 80002aa:	4b0d      	ldr	r3, [pc, #52]	; (80002e0 <lcd_init+0xa8>)
 80002ac:	2207      	movs	r2, #7
 80002ae:	701a      	strb	r2, [r3, #0]
	lcd_send_cmd(LCD_DISPLAYCONTROL | _displaycontrol);
 80002b0:	4b0b      	ldr	r3, [pc, #44]	; (80002e0 <lcd_init+0xa8>)
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	f043 0308 	orr.w	r3, r3, #8
 80002b8:	b2db      	uxtb	r3, r3
 80002ba:	4618      	mov	r0, r3
 80002bc:	f7ff ff58 	bl	8000170 <lcd_send_cmd>
	HAL_Delay(10);
 80002c0:	200a      	movs	r0, #10
 80002c2:	f000 fe97 	bl	8000ff4 <HAL_Delay>

	lcd_send_cmd(LCD_CLEARDISPLAY); // clear display
 80002c6:	2001      	movs	r0, #1
 80002c8:	f7ff ff52 	bl	8000170 <lcd_send_cmd>
	HAL_Delay(100);
 80002cc:	2064      	movs	r0, #100	; 0x64
 80002ce:	f000 fe91 	bl	8000ff4 <HAL_Delay>
}
 80002d2:	bf00      	nop
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	200000d0 	.word	0x200000d0
 80002dc:	200000d3 	.word	0x200000d3
 80002e0:	200000d2 	.word	0x200000d2

080002e4 <lcd_send_string>:

void lcd_send_string(char *str)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data(*str++);
 80002ec:	e006      	b.n	80002fc <lcd_send_string+0x18>
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	1c5a      	adds	r2, r3, #1
 80002f2:	607a      	str	r2, [r7, #4]
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	4618      	mov	r0, r3
 80002f8:	f7ff ff6c 	bl	80001d4 <lcd_send_data>
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d1f4      	bne.n	80002ee <lcd_send_string+0xa>
}
 8000304:	bf00      	nop
 8000306:	3708      	adds	r7, #8
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}

0800030c <lcd_clear>:

void lcd_clear(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	lcd_send_cmd(LCD_CLEARDISPLAY);
 8000310:	2001      	movs	r0, #1
 8000312:	f7ff ff2d 	bl	8000170 <lcd_send_cmd>
}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}

0800031a <lcd_home>:

void lcd_home(void)
{
 800031a:	b580      	push	{r7, lr}
 800031c:	af00      	add	r7, sp, #0
	lcd_send_cmd(LCD_RETURNHOME);
 800031e:	2002      	movs	r0, #2
 8000320:	f7ff ff26 	bl	8000170 <lcd_send_cmd>
}
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}

08000328 <lcd_setCursor>:

void lcd_setCursor(uint8_t row, uint8_t col)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	4603      	mov	r3, r0
 8000330:	460a      	mov	r2, r1
 8000332:	71fb      	strb	r3, [r7, #7]
 8000334:	4613      	mov	r3, r2
 8000336:	71bb      	strb	r3, [r7, #6]
	if(((row >= 0) && (row <= 1)) && ((col >= 0) && (col < 16))){
 8000338:	79fb      	ldrb	r3, [r7, #7]
 800033a:	2b01      	cmp	r3, #1
 800033c:	d81b      	bhi.n	8000376 <lcd_setCursor+0x4e>
 800033e:	79bb      	ldrb	r3, [r7, #6]
 8000340:	2b0f      	cmp	r3, #15
 8000342:	d818      	bhi.n	8000376 <lcd_setCursor+0x4e>
		if(row == 0){
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d107      	bne.n	800035a <lcd_setCursor+0x32>
			lcd_send_cmd(LCD_SETDDRAMADDR | (0x00 + col));
 800034a:	79bb      	ldrb	r3, [r7, #6]
 800034c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000350:	b2db      	uxtb	r3, r3
 8000352:	4618      	mov	r0, r3
 8000354:	f7ff ff0c 	bl	8000170 <lcd_send_cmd>
		}else if(row == 1){
			lcd_send_cmd(LCD_SETDDRAMADDR | (0x40 + col));
		}
	}
}
 8000358:	e00d      	b.n	8000376 <lcd_setCursor+0x4e>
		}else if(row == 1){
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	2b01      	cmp	r3, #1
 800035e:	d10a      	bne.n	8000376 <lcd_setCursor+0x4e>
			lcd_send_cmd(LCD_SETDDRAMADDR | (0x40 + col));
 8000360:	79bb      	ldrb	r3, [r7, #6]
 8000362:	3340      	adds	r3, #64	; 0x40
 8000364:	b2db      	uxtb	r3, r3
 8000366:	b25b      	sxtb	r3, r3
 8000368:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800036c:	b25b      	sxtb	r3, r3
 800036e:	b2db      	uxtb	r3, r3
 8000370:	4618      	mov	r0, r3
 8000372:	f7ff fefd 	bl	8000170 <lcd_send_cmd>
}
 8000376:	bf00      	nop
 8000378:	3708      	adds	r7, #8
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
	...

08000380 <lcd_characterDatainput>:

void lcd_characterDatainput(void) // a~z data
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
	  //printf("%c\r\n",clcdData[0]);

	  lcd_send_data(clcdData[0]);
 8000384:	4b0a      	ldr	r3, [pc, #40]	; (80003b0 <lcd_characterDatainput+0x30>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	4618      	mov	r0, r3
 800038a:	f7ff ff23 	bl	80001d4 <lcd_send_data>
	  if('z' == clcdData[0]){
 800038e:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <lcd_characterDatainput+0x30>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	2b7a      	cmp	r3, #122	; 0x7a
 8000394:	d103      	bne.n	800039e <lcd_characterDatainput+0x1e>
		  clcdData[0] = 'a';
 8000396:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <lcd_characterDatainput+0x30>)
 8000398:	2261      	movs	r2, #97	; 0x61
 800039a:	701a      	strb	r2, [r3, #0]
	  }else{
		  clcdData[0] += 1;
	  }
}
 800039c:	e005      	b.n	80003aa <lcd_characterDatainput+0x2a>
		  clcdData[0] += 1;
 800039e:	4b04      	ldr	r3, [pc, #16]	; (80003b0 <lcd_characterDatainput+0x30>)
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	3301      	adds	r3, #1
 80003a4:	b2da      	uxtb	r2, r3
 80003a6:	4b02      	ldr	r3, [pc, #8]	; (80003b0 <lcd_characterDatainput+0x30>)
 80003a8:	701a      	strb	r2, [r3, #0]
}
 80003aa:	bf00      	nop
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	20000188 	.word	0x20000188

080003b4 <lcd_createSpecialCharacter>:

void lcd_createSpecialCharacter(uint8_t location, uint8_t charmap[]) {
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b084      	sub	sp, #16
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	4603      	mov	r3, r0
 80003bc:	6039      	str	r1, [r7, #0]
 80003be:	71fb      	strb	r3, [r7, #7]
	location &= 0x7; 				// we only have 8 locations 0-7
 80003c0:	79fb      	ldrb	r3, [r7, #7]
 80003c2:	f003 0307 	and.w	r3, r3, #7
 80003c6:	71fb      	strb	r3, [r7, #7]
	lcd_send_cmd(LCD_SETCGRAMADDR | (location << 3));
 80003c8:	79fb      	ldrb	r3, [r7, #7]
 80003ca:	00db      	lsls	r3, r3, #3
 80003cc:	b25b      	sxtb	r3, r3
 80003ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003d2:	b25b      	sxtb	r3, r3
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	4618      	mov	r0, r3
 80003d8:	f7ff feca 	bl	8000170 <lcd_send_cmd>
	for (int i = 0; i < 8; i++) {
 80003dc:	2300      	movs	r3, #0
 80003de:	60fb      	str	r3, [r7, #12]
 80003e0:	e009      	b.n	80003f6 <lcd_createSpecialCharacter+0x42>
		lcd_send_data(charmap[i]);
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	683a      	ldr	r2, [r7, #0]
 80003e6:	4413      	add	r3, r2
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	4618      	mov	r0, r3
 80003ec:	f7ff fef2 	bl	80001d4 <lcd_send_data>
	for (int i = 0; i < 8; i++) {
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	3301      	adds	r3, #1
 80003f4:	60fb      	str	r3, [r7, #12]
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	2b07      	cmp	r3, #7
 80003fa:	ddf2      	ble.n	80003e2 <lcd_createSpecialCharacter+0x2e>
	}
}
 80003fc:	bf00      	nop
 80003fe:	3710      	adds	r7, #16
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}

08000404 <lcd_incrementDDRAM>:

//----- LCD_ENTRYMODESET : inc/dec DDRAM address, shift of entire display
void lcd_incrementDDRAM(void) // cmd : d
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	_displaymode = LCD_ENTRYDDRAMINCREMENT;	//0x02
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <lcd_incrementDDRAM+0x20>)
 800040a:	2202      	movs	r2, #2
 800040c:	701a      	strb	r2, [r3, #0]
	lcd_send_cmd(LCD_ENTRYMODESET | _displaymode);
 800040e:	4b05      	ldr	r3, [pc, #20]	; (8000424 <lcd_incrementDDRAM+0x20>)
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	f043 0304 	orr.w	r3, r3, #4
 8000416:	b2db      	uxtb	r3, r3
 8000418:	4618      	mov	r0, r3
 800041a:	f7ff fea9 	bl	8000170 <lcd_send_cmd>
}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	200000d3 	.word	0x200000d3

08000428 <lcd_decrementDDRAM>:

void lcd_decrementDDRAM(void) // cmd : e
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
	//----- 코드 추�? -----
	_displaymode = LCD_ENTRYDDRAMDECREMENT;	//0x02
 800042c:	4b06      	ldr	r3, [pc, #24]	; (8000448 <lcd_decrementDDRAM+0x20>)
 800042e:	2200      	movs	r2, #0
 8000430:	701a      	strb	r2, [r3, #0]
	lcd_send_cmd(LCD_ENTRYMODESET | _displaymode);
 8000432:	4b05      	ldr	r3, [pc, #20]	; (8000448 <lcd_decrementDDRAM+0x20>)
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	f043 0304 	orr.w	r3, r3, #4
 800043a:	b2db      	uxtb	r3, r3
 800043c:	4618      	mov	r0, r3
 800043e:	f7ff fe97 	bl	8000170 <lcd_send_cmd>
}
 8000442:	bf00      	nop
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	200000d3 	.word	0x200000d3

0800044c <lcd_shiftEntiredisplayLeft>:

void lcd_shiftEntiredisplayLeft(void)  // cmd : f
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
	//----- 코드 추�? -----
	_displaymode = LCD_ENTRYDISPLAYSHIFTLEFT;	//0x02
 8000450:	4b06      	ldr	r3, [pc, #24]	; (800046c <lcd_shiftEntiredisplayLeft+0x20>)
 8000452:	2203      	movs	r2, #3
 8000454:	701a      	strb	r2, [r3, #0]
	lcd_send_cmd(LCD_ENTRYMODESET | _displaymode);
 8000456:	4b05      	ldr	r3, [pc, #20]	; (800046c <lcd_shiftEntiredisplayLeft+0x20>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	f043 0304 	orr.w	r3, r3, #4
 800045e:	b2db      	uxtb	r3, r3
 8000460:	4618      	mov	r0, r3
 8000462:	f7ff fe85 	bl	8000170 <lcd_send_cmd>
}
 8000466:	bf00      	nop
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	200000d3 	.word	0x200000d3

08000470 <lcd_shiftEntiredisplayRight>:

void lcd_shiftEntiredisplayRight(void) // cmd : g
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
	//----- 코드 추�? -----
	_displaymode = LCD_ENTRYDISPLAYSHIFTRIGHT;	//0x02
 8000474:	4b06      	ldr	r3, [pc, #24]	; (8000490 <lcd_shiftEntiredisplayRight+0x20>)
 8000476:	2201      	movs	r2, #1
 8000478:	701a      	strb	r2, [r3, #0]
	lcd_send_cmd(LCD_ENTRYMODESET | _displaymode);
 800047a:	4b05      	ldr	r3, [pc, #20]	; (8000490 <lcd_shiftEntiredisplayRight+0x20>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	f043 0304 	orr.w	r3, r3, #4
 8000482:	b2db      	uxtb	r3, r3
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff fe73 	bl	8000170 <lcd_send_cmd>
}
 800048a:	bf00      	nop
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	200000d3 	.word	0x200000d3

08000494 <lcd_display>:
//----- LCD_ENTRYMODESET : inc/dec DDRAM address, shift of entire display

//----- LCD_DISPLAYCONTROL : display on/off cursor, blink -----
void lcd_display(void) // cmd : m
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	_displaycontrol |= LCD_DISPLAYON; // 0x04
 8000498:	4b08      	ldr	r3, [pc, #32]	; (80004bc <lcd_display+0x28>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	f043 0304 	orr.w	r3, r3, #4
 80004a0:	b2da      	uxtb	r2, r3
 80004a2:	4b06      	ldr	r3, [pc, #24]	; (80004bc <lcd_display+0x28>)
 80004a4:	701a      	strb	r2, [r3, #0]
	lcd_send_cmd(LCD_DISPLAYCONTROL | _displaycontrol);
 80004a6:	4b05      	ldr	r3, [pc, #20]	; (80004bc <lcd_display+0x28>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	f043 0308 	orr.w	r3, r3, #8
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	4618      	mov	r0, r3
 80004b2:	f7ff fe5d 	bl	8000170 <lcd_send_cmd>
}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	200000d2 	.word	0x200000d2

080004c0 <lcd_nodisplay>:

void lcd_nodisplay(void) // cmd : n
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	_displaycontrol &= (0xFF ^ LCD_DISPLAYON);
 80004c4:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <lcd_nodisplay+0x28>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	f023 0304 	bic.w	r3, r3, #4
 80004cc:	b2da      	uxtb	r2, r3
 80004ce:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <lcd_nodisplay+0x28>)
 80004d0:	701a      	strb	r2, [r3, #0]
	lcd_send_cmd(LCD_DISPLAYCONTROL | _displaycontrol);
 80004d2:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <lcd_nodisplay+0x28>)
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	f043 0308 	orr.w	r3, r3, #8
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	4618      	mov	r0, r3
 80004de:	f7ff fe47 	bl	8000170 <lcd_send_cmd>
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	200000d2 	.word	0x200000d2

080004ec <lcd_cursor>:

void lcd_cursor(void) // cmd : o
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	//----- 코드 추�? -----
	_displaycontrol |= LCD_CURSORON; // 0x04
 80004f0:	4b08      	ldr	r3, [pc, #32]	; (8000514 <lcd_cursor+0x28>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	f043 0302 	orr.w	r3, r3, #2
 80004f8:	b2da      	uxtb	r2, r3
 80004fa:	4b06      	ldr	r3, [pc, #24]	; (8000514 <lcd_cursor+0x28>)
 80004fc:	701a      	strb	r2, [r3, #0]
	lcd_send_cmd(LCD_DISPLAYCONTROL | _displaycontrol);
 80004fe:	4b05      	ldr	r3, [pc, #20]	; (8000514 <lcd_cursor+0x28>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	f043 0308 	orr.w	r3, r3, #8
 8000506:	b2db      	uxtb	r3, r3
 8000508:	4618      	mov	r0, r3
 800050a:	f7ff fe31 	bl	8000170 <lcd_send_cmd>
}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	200000d2 	.word	0x200000d2

08000518 <lcd_nocursor>:

void lcd_nocursor(void) // cmd : p
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	//----- 코드 추�? -----
	_displaycontrol &= (0xFF ^ LCD_CURSORON);
 800051c:	4b08      	ldr	r3, [pc, #32]	; (8000540 <lcd_nocursor+0x28>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	f023 0302 	bic.w	r3, r3, #2
 8000524:	b2da      	uxtb	r2, r3
 8000526:	4b06      	ldr	r3, [pc, #24]	; (8000540 <lcd_nocursor+0x28>)
 8000528:	701a      	strb	r2, [r3, #0]
	lcd_send_cmd(LCD_DISPLAYCONTROL | _displaycontrol);
 800052a:	4b05      	ldr	r3, [pc, #20]	; (8000540 <lcd_nocursor+0x28>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	f043 0308 	orr.w	r3, r3, #8
 8000532:	b2db      	uxtb	r3, r3
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff fe1b 	bl	8000170 <lcd_send_cmd>
}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	200000d2 	.word	0x200000d2

08000544 <lcd_blink>:

void lcd_blink(void) // cmd : q
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	//----- 코드 추�? -----
	_displaycontrol |= LCD_BLINKON; // 0x04
 8000548:	4b08      	ldr	r3, [pc, #32]	; (800056c <lcd_blink+0x28>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	b2da      	uxtb	r2, r3
 8000552:	4b06      	ldr	r3, [pc, #24]	; (800056c <lcd_blink+0x28>)
 8000554:	701a      	strb	r2, [r3, #0]
	lcd_send_cmd(LCD_DISPLAYCONTROL | _displaycontrol);
 8000556:	4b05      	ldr	r3, [pc, #20]	; (800056c <lcd_blink+0x28>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	f043 0308 	orr.w	r3, r3, #8
 800055e:	b2db      	uxtb	r3, r3
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff fe05 	bl	8000170 <lcd_send_cmd>
}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	200000d2 	.word	0x200000d2

08000570 <lcd_noblink>:

void lcd_noblink(void) // cmd : r
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	//----- 코드 추�? -----
	_displaycontrol &= (0xFF ^ LCD_BLINKON);
 8000574:	4b08      	ldr	r3, [pc, #32]	; (8000598 <lcd_noblink+0x28>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	f023 0301 	bic.w	r3, r3, #1
 800057c:	b2da      	uxtb	r2, r3
 800057e:	4b06      	ldr	r3, [pc, #24]	; (8000598 <lcd_noblink+0x28>)
 8000580:	701a      	strb	r2, [r3, #0]
	lcd_send_cmd(LCD_DISPLAYCONTROL | _displaycontrol);
 8000582:	4b05      	ldr	r3, [pc, #20]	; (8000598 <lcd_noblink+0x28>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	f043 0308 	orr.w	r3, r3, #8
 800058a:	b2db      	uxtb	r3, r3
 800058c:	4618      	mov	r0, r3
 800058e:	f7ff fdef 	bl	8000170 <lcd_send_cmd>
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	200000d2 	.word	0x200000d2

0800059c <lcd_shiftCursorLeft>:
//----- LCD_DISPLAYCONTROL : display on/off cursor, blink -----

//----- LCD_CURSORSHIFT : cursor & dispaly shift -----
void lcd_shiftCursorLeft(void) // cmd : s
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	_cursordisplayshift = LCD_SHIFTCURSORLEFTDECRESE ; // 0x00
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <lcd_shiftCursorLeft+0x20>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	701a      	strb	r2, [r3, #0]
	lcd_send_cmd(LCD_CURSORSHIFT | _cursordisplayshift);
 80005a6:	4b05      	ldr	r3, [pc, #20]	; (80005bc <lcd_shiftCursorLeft+0x20>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	f043 0310 	orr.w	r3, r3, #16
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	4618      	mov	r0, r3
 80005b2:	f7ff fddd 	bl	8000170 <lcd_send_cmd>
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	200000d1 	.word	0x200000d1

080005c0 <lcd_shiftCursorRight>:

void lcd_shiftCursorRight(void) // cmd : t
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	//----- 코드 추�? -----
	_cursordisplayshift = LCD_SHIFTCURSORRIGHTINCRESE ; // 0x00
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <lcd_shiftCursorRight+0x20>)
 80005c6:	2204      	movs	r2, #4
 80005c8:	701a      	strb	r2, [r3, #0]
	lcd_send_cmd(LCD_CURSORSHIFT | _cursordisplayshift);
 80005ca:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <lcd_shiftCursorRight+0x20>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	f043 0310 	orr.w	r3, r3, #16
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff fdcb 	bl	8000170 <lcd_send_cmd>
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	200000d1 	.word	0x200000d1

080005e4 <lcd_shiftAllDisplayLeft>:

void lcd_shiftAllDisplayLeft(void) // cmd : u
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	//----- 코드 추�? -----
	_cursordisplayshift = LCD_SHIFTALLDISPLAYLEFTCURSORLEFT ; // 0x00
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <lcd_shiftAllDisplayLeft+0x20>)
 80005ea:	2208      	movs	r2, #8
 80005ec:	701a      	strb	r2, [r3, #0]
	lcd_send_cmd(LCD_CURSORSHIFT | _cursordisplayshift);
 80005ee:	4b05      	ldr	r3, [pc, #20]	; (8000604 <lcd_shiftAllDisplayLeft+0x20>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	f043 0310 	orr.w	r3, r3, #16
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff fdb9 	bl	8000170 <lcd_send_cmd>
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	200000d1 	.word	0x200000d1

08000608 <lcd_shiftAllDisplayRight>:

void lcd_shiftAllDisplayRight(void) // cmd : v
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	//----- 코드 추�? -----
	_cursordisplayshift = LCD_SHIFTALLDISPLAYLEFTCURSORRIGHT ; // 0x00
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <lcd_shiftAllDisplayRight+0x20>)
 800060e:	220c      	movs	r2, #12
 8000610:	701a      	strb	r2, [r3, #0]
	lcd_send_cmd(LCD_CURSORSHIFT | _cursordisplayshift);
 8000612:	4b05      	ldr	r3, [pc, #20]	; (8000628 <lcd_shiftAllDisplayRight+0x20>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	f043 0310 	orr.w	r3, r3, #16
 800061a:	b2db      	uxtb	r3, r3
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff fda7 	bl	8000170 <lcd_send_cmd>
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	200000d1 	.word	0x200000d1

0800062c <lcd_address_search>:
//----- LCD_CURSORSHIFT : cursor & dispaly shift -----

void lcd_address_search(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef i2cstatus;

	for(uint16_t i = 0; i < 128; i++){
 8000632:	2300      	movs	r3, #0
 8000634:	80fb      	strh	r3, [r7, #6]
 8000636:	e015      	b.n	8000664 <lcd_address_search+0x38>
		i2cstatus = HAL_I2C_IsDeviceReady(&hi2c2, i << 1, 1, 10);
 8000638:	88fb      	ldrh	r3, [r7, #6]
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	b299      	uxth	r1, r3
 800063e:	230a      	movs	r3, #10
 8000640:	2201      	movs	r2, #1
 8000642:	480d      	ldr	r0, [pc, #52]	; (8000678 <lcd_address_search+0x4c>)
 8000644:	f001 f9ea 	bl	8001a1c <HAL_I2C_IsDeviceReady>
 8000648:	4603      	mov	r3, r0
 800064a:	717b      	strb	r3, [r7, #5]
		if(HAL_OK == i2cstatus){
 800064c:	797b      	ldrb	r3, [r7, #5]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d105      	bne.n	800065e <lcd_address_search+0x32>
		  printf("OK addr=0x%02x\r\n",(i << 1));
 8000652:	88fb      	ldrh	r3, [r7, #6]
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	4619      	mov	r1, r3
 8000658:	4808      	ldr	r0, [pc, #32]	; (800067c <lcd_address_search+0x50>)
 800065a:	f002 fbbd 	bl	8002dd8 <iprintf>
	for(uint16_t i = 0; i < 128; i++){
 800065e:	88fb      	ldrh	r3, [r7, #6]
 8000660:	3301      	adds	r3, #1
 8000662:	80fb      	strh	r3, [r7, #6]
 8000664:	88fb      	ldrh	r3, [r7, #6]
 8000666:	2b7f      	cmp	r3, #127	; 0x7f
 8000668:	d9e6      	bls.n	8000638 <lcd_address_search+0xc>
		  //break;
		}else{
		  //printf("err addr=0x%02x\r\n",(i << 1));
		}
	}
	printf("lcd_address_search\r\n");
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <lcd_address_search+0x54>)
 800066c:	f002 fc28 	bl	8002ec0 <puts>
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	200000e0 	.word	0x200000e0
 800067c:	08003c94 	.word	0x08003c94
 8000680:	08003ca8 	.word	0x08003ca8

08000684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068a:	f000 fc51 	bl	8000f30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068e:	f000 f99d 	bl	80009cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000692:	f000 fa35 	bl	8000b00 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000696:	f000 fa09 	bl	8000aac <MX_USART2_UART_Init>
  MX_I2C2_Init();
 800069a:	f000 f9d9 	bl	8000a50 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  printf("---character LCD(i2c) test---\r\n");
 800069e:	48bc      	ldr	r0, [pc, #752]	; (8000990 <main+0x30c>)
 80006a0:	f002 fc0e 	bl	8002ec0 <puts>

  HAL_Delay(10);
 80006a4:	200a      	movs	r0, #10
 80006a6:	f000 fca5 	bl	8000ff4 <HAL_Delay>
  lcd_init();
 80006aa:	f7ff fdc5 	bl	8000238 <lcd_init>
  HAL_Delay(20);
 80006ae:	2014      	movs	r0, #20
 80006b0:	f000 fca0 	bl	8000ff4 <HAL_Delay>
  sprintf(clcdData,"lys");
 80006b4:	4bb7      	ldr	r3, [pc, #732]	; (8000994 <main+0x310>)
 80006b6:	4ab8      	ldr	r2, [pc, #736]	; (8000998 <main+0x314>)
 80006b8:	6810      	ldr	r0, [r2, #0]
 80006ba:	6018      	str	r0, [r3, #0]
  lcd_send_string(clcdData);
 80006bc:	48b5      	ldr	r0, [pc, #724]	; (8000994 <main+0x310>)
 80006be:	f7ff fe11 	bl	80002e4 <lcd_send_string>
  HAL_Delay(20);
 80006c2:	2014      	movs	r0, #20
 80006c4:	f000 fc96 	bl	8000ff4 <HAL_Delay>
  clcdData[0] = 'a';
 80006c8:	4bb2      	ldr	r3, [pc, #712]	; (8000994 <main+0x310>)
 80006ca:	2261      	movs	r2, #97	; 0x61
 80006cc:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  uart2status = HAL_UART_Receive(&huart2, urx, 1, 300);
 80006ce:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80006d2:	2201      	movs	r2, #1
 80006d4:	49b1      	ldr	r1, [pc, #708]	; (800099c <main+0x318>)
 80006d6:	48b2      	ldr	r0, [pc, #712]	; (80009a0 <main+0x31c>)
 80006d8:	f002 f9d1 	bl	8002a7e <HAL_UART_Receive>
 80006dc:	4603      	mov	r3, r0
 80006de:	71fb      	strb	r3, [r7, #7]
	  if(HAL_OK == uart2status){
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	f040 8149 	bne.w	800097a <main+0x2f6>
		  printf("*%c*\r\n",urx[0]);
 80006e8:	4bac      	ldr	r3, [pc, #688]	; (800099c <main+0x318>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	4619      	mov	r1, r3
 80006ee:	48ad      	ldr	r0, [pc, #692]	; (80009a4 <main+0x320>)
 80006f0:	f002 fb72 	bl	8002dd8 <iprintf>
		  switch(urx[0]){
 80006f4:	4ba9      	ldr	r3, [pc, #676]	; (800099c <main+0x318>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	3b31      	subs	r3, #49	; 0x31
 80006fa:	2b48      	cmp	r3, #72	; 0x48
 80006fc:	f200 813f 	bhi.w	800097e <main+0x2fa>
 8000700:	a201      	add	r2, pc, #4	; (adr r2, 8000708 <main+0x84>)
 8000702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000706:	bf00      	nop
 8000708:	0800082d 	.word	0x0800082d
 800070c:	0800097f 	.word	0x0800097f
 8000710:	0800097f 	.word	0x0800097f
 8000714:	0800097f 	.word	0x0800097f
 8000718:	0800097f 	.word	0x0800097f
 800071c:	0800097f 	.word	0x0800097f
 8000720:	0800097f 	.word	0x0800097f
 8000724:	0800097f 	.word	0x0800097f
 8000728:	0800097f 	.word	0x0800097f
 800072c:	0800097f 	.word	0x0800097f
 8000730:	0800097f 	.word	0x0800097f
 8000734:	0800097f 	.word	0x0800097f
 8000738:	0800097f 	.word	0x0800097f
 800073c:	0800097f 	.word	0x0800097f
 8000740:	0800097f 	.word	0x0800097f
 8000744:	0800097f 	.word	0x0800097f
 8000748:	0800097f 	.word	0x0800097f
 800074c:	0800097f 	.word	0x0800097f
 8000750:	0800097f 	.word	0x0800097f
 8000754:	0800097f 	.word	0x0800097f
 8000758:	0800097f 	.word	0x0800097f
 800075c:	0800097f 	.word	0x0800097f
 8000760:	0800097f 	.word	0x0800097f
 8000764:	0800097f 	.word	0x0800097f
 8000768:	0800097f 	.word	0x0800097f
 800076c:	0800097f 	.word	0x0800097f
 8000770:	0800097f 	.word	0x0800097f
 8000774:	0800097f 	.word	0x0800097f
 8000778:	0800097f 	.word	0x0800097f
 800077c:	0800097f 	.word	0x0800097f
 8000780:	0800097f 	.word	0x0800097f
 8000784:	0800097f 	.word	0x0800097f
 8000788:	0800097f 	.word	0x0800097f
 800078c:	0800097f 	.word	0x0800097f
 8000790:	0800097f 	.word	0x0800097f
 8000794:	0800097f 	.word	0x0800097f
 8000798:	0800097f 	.word	0x0800097f
 800079c:	0800097f 	.word	0x0800097f
 80007a0:	0800097f 	.word	0x0800097f
 80007a4:	0800097f 	.word	0x0800097f
 80007a8:	0800097f 	.word	0x0800097f
 80007ac:	0800097f 	.word	0x0800097f
 80007b0:	0800097f 	.word	0x0800097f
 80007b4:	0800097f 	.word	0x0800097f
 80007b8:	0800097f 	.word	0x0800097f
 80007bc:	0800097f 	.word	0x0800097f
 80007c0:	0800097f 	.word	0x0800097f
 80007c4:	0800097f 	.word	0x0800097f
 80007c8:	08000859 	.word	0x08000859
 80007cc:	08000863 	.word	0x08000863
 80007d0:	08000833 	.word	0x08000833
 80007d4:	08000873 	.word	0x08000873
 80007d8:	08000879 	.word	0x08000879
 80007dc:	0800087f 	.word	0x0800087f
 80007e0:	08000885 	.word	0x08000885
 80007e4:	08000839 	.word	0x08000839
 80007e8:	0800083f 	.word	0x0800083f
 80007ec:	0800097f 	.word	0x0800097f
 80007f0:	0800086d 	.word	0x0800086d
 80007f4:	0800097f 	.word	0x0800097f
 80007f8:	0800088b 	.word	0x0800088b
 80007fc:	08000891 	.word	0x08000891
 8000800:	08000897 	.word	0x08000897
 8000804:	0800089d 	.word	0x0800089d
 8000808:	080008a3 	.word	0x080008a3
 800080c:	080008a9 	.word	0x080008a9
 8000810:	080008af 	.word	0x080008af
 8000814:	080008b5 	.word	0x080008b5
 8000818:	080008bb 	.word	0x080008bb
 800081c:	080008c1 	.word	0x080008c1
 8000820:	0800097f 	.word	0x0800097f
 8000824:	080008c7 	.word	0x080008c7
 8000828:	08000909 	.word	0x08000909
		  case '1':
			  lcd_address_search();
 800082c:	f7ff fefe 	bl	800062c <lcd_address_search>
			  break;
 8000830:	e0a6      	b.n	8000980 <main+0x2fc>
		  case 'c':
			  lcd_clear();
 8000832:	f7ff fd6b 	bl	800030c <lcd_clear>
			  break;
 8000836:	e0a3      	b.n	8000980 <main+0x2fc>
		  case 'h':
			  lcd_home();
 8000838:	f7ff fd6f 	bl	800031a <lcd_home>
			  break;
 800083c:	e0a0      	b.n	8000980 <main+0x2fc>
		  case 'i':
			  lcd_init();
 800083e:	f7ff fcfb 	bl	8000238 <lcd_init>
			  sprintf(clcdData,"lys");
 8000842:	4b54      	ldr	r3, [pc, #336]	; (8000994 <main+0x310>)
 8000844:	4a54      	ldr	r2, [pc, #336]	; (8000998 <main+0x314>)
 8000846:	6810      	ldr	r0, [r2, #0]
 8000848:	6018      	str	r0, [r3, #0]
			  lcd_send_string(clcdData);
 800084a:	4852      	ldr	r0, [pc, #328]	; (8000994 <main+0x310>)
 800084c:	f7ff fd4a 	bl	80002e4 <lcd_send_string>
			  clcdData[0] = 'a';
 8000850:	4b50      	ldr	r3, [pc, #320]	; (8000994 <main+0x310>)
 8000852:	2261      	movs	r2, #97	; 0x61
 8000854:	701a      	strb	r2, [r3, #0]
			  break;
 8000856:	e093      	b.n	8000980 <main+0x2fc>
		  case 'a':
			  lcd_setCursor(0, 0);
 8000858:	2100      	movs	r1, #0
 800085a:	2000      	movs	r0, #0
 800085c:	f7ff fd64 	bl	8000328 <lcd_setCursor>
			  break;
 8000860:	e08e      	b.n	8000980 <main+0x2fc>
		  case 'b':
			  lcd_setCursor(1, 0);
 8000862:	2100      	movs	r1, #0
 8000864:	2001      	movs	r0, #1
 8000866:	f7ff fd5f 	bl	8000328 <lcd_setCursor>
			  break;
 800086a:	e089      	b.n	8000980 <main+0x2fc>
		  case 'k':
			  lcd_characterDatainput();
 800086c:	f7ff fd88 	bl	8000380 <lcd_characterDatainput>
			  break;
 8000870:	e086      	b.n	8000980 <main+0x2fc>
		  //----- LCD_ENTRYMODESET : inc/dec DDRAM address, shift of entire display
		  case 'd':
			  lcd_incrementDDRAM();
 8000872:	f7ff fdc7 	bl	8000404 <lcd_incrementDDRAM>
			  break;
 8000876:	e083      	b.n	8000980 <main+0x2fc>
		  case 'e':
			  lcd_decrementDDRAM();
 8000878:	f7ff fdd6 	bl	8000428 <lcd_decrementDDRAM>
			  break;
 800087c:	e080      	b.n	8000980 <main+0x2fc>
		  case 'f':
			  lcd_shiftEntiredisplayLeft();
 800087e:	f7ff fde5 	bl	800044c <lcd_shiftEntiredisplayLeft>
			  break;
 8000882:	e07d      	b.n	8000980 <main+0x2fc>
		  case 'g':
			  lcd_shiftEntiredisplayRight();
 8000884:	f7ff fdf4 	bl	8000470 <lcd_shiftEntiredisplayRight>
			  break;
 8000888:	e07a      	b.n	8000980 <main+0x2fc>
		  //----- LCD_ENTRYMODESET : inc/dec DDRAM address, shift of entire display
		  //----- LCD_DISPLAYCONTROL : display on/off cursor, blink -----
		  case 'm':
			  lcd_display();
 800088a:	f7ff fe03 	bl	8000494 <lcd_display>
			  break;
 800088e:	e077      	b.n	8000980 <main+0x2fc>
		  case 'n':
			  lcd_nodisplay();
 8000890:	f7ff fe16 	bl	80004c0 <lcd_nodisplay>
			  break;
 8000894:	e074      	b.n	8000980 <main+0x2fc>
		  case 'o':
			  lcd_cursor();
 8000896:	f7ff fe29 	bl	80004ec <lcd_cursor>
			  break;
 800089a:	e071      	b.n	8000980 <main+0x2fc>
		  case 'p':
			  lcd_nocursor();
 800089c:	f7ff fe3c 	bl	8000518 <lcd_nocursor>
			  break;
 80008a0:	e06e      	b.n	8000980 <main+0x2fc>
		  case 'q':
			  lcd_blink();
 80008a2:	f7ff fe4f 	bl	8000544 <lcd_blink>
			  break;
 80008a6:	e06b      	b.n	8000980 <main+0x2fc>
		  case 'r':
			  lcd_noblink();
 80008a8:	f7ff fe62 	bl	8000570 <lcd_noblink>
			  break;
 80008ac:	e068      	b.n	8000980 <main+0x2fc>
		  //----- LCD_DISPLAYCONTROL : display on/off cursor, blink -----
		  //----- LCD_CURSORSHIFT : cursor & dispaly shift -----
		  case 's':
			  lcd_shiftCursorLeft();
 80008ae:	f7ff fe75 	bl	800059c <lcd_shiftCursorLeft>
			  break;
 80008b2:	e065      	b.n	8000980 <main+0x2fc>
		  case 't':
			  lcd_shiftCursorRight();
 80008b4:	f7ff fe84 	bl	80005c0 <lcd_shiftCursorRight>
			  break;
 80008b8:	e062      	b.n	8000980 <main+0x2fc>
		  case 'u':
			  lcd_shiftAllDisplayLeft();
 80008ba:	f7ff fe93 	bl	80005e4 <lcd_shiftAllDisplayLeft>
			  break;
 80008be:	e05f      	b.n	8000980 <main+0x2fc>
		  case 'v':
			  lcd_shiftAllDisplayRight();
 80008c0:	f7ff fea2 	bl	8000608 <lcd_shiftAllDisplayRight>
			  break;
 80008c4:	e05c      	b.n	8000980 <main+0x2fc>
		  //----- LCD_CURSORSHIFT : cursor & dispaly shift -----
		  //----- special character -----
		  case 'x':
			  lcd_createSpecialCharacter(0, Heart);
 80008c6:	4938      	ldr	r1, [pc, #224]	; (80009a8 <main+0x324>)
 80008c8:	2000      	movs	r0, #0
 80008ca:	f7ff fd73 	bl	80003b4 <lcd_createSpecialCharacter>
			  lcd_createSpecialCharacter(1, Bell);
 80008ce:	4937      	ldr	r1, [pc, #220]	; (80009ac <main+0x328>)
 80008d0:	2001      	movs	r0, #1
 80008d2:	f7ff fd6f 	bl	80003b4 <lcd_createSpecialCharacter>
			  lcd_createSpecialCharacter(2, Alien);
 80008d6:	4936      	ldr	r1, [pc, #216]	; (80009b0 <main+0x32c>)
 80008d8:	2002      	movs	r0, #2
 80008da:	f7ff fd6b 	bl	80003b4 <lcd_createSpecialCharacter>
			  lcd_createSpecialCharacter(3, Check);
 80008de:	4935      	ldr	r1, [pc, #212]	; (80009b4 <main+0x330>)
 80008e0:	2003      	movs	r0, #3
 80008e2:	f7ff fd67 	bl	80003b4 <lcd_createSpecialCharacter>
			  lcd_createSpecialCharacter(4, Speaker);
 80008e6:	4934      	ldr	r1, [pc, #208]	; (80009b8 <main+0x334>)
 80008e8:	2004      	movs	r0, #4
 80008ea:	f7ff fd63 	bl	80003b4 <lcd_createSpecialCharacter>
			  lcd_createSpecialCharacter(5, Sound);
 80008ee:	4933      	ldr	r1, [pc, #204]	; (80009bc <main+0x338>)
 80008f0:	2005      	movs	r0, #5
 80008f2:	f7ff fd5f 	bl	80003b4 <lcd_createSpecialCharacter>
			  lcd_createSpecialCharacter(6, Skull);
 80008f6:	4932      	ldr	r1, [pc, #200]	; (80009c0 <main+0x33c>)
 80008f8:	2006      	movs	r0, #6
 80008fa:	f7ff fd5b 	bl	80003b4 <lcd_createSpecialCharacter>
			  lcd_createSpecialCharacter(7, Lock);
 80008fe:	4931      	ldr	r1, [pc, #196]	; (80009c4 <main+0x340>)
 8000900:	2007      	movs	r0, #7
 8000902:	f7ff fd57 	bl	80003b4 <lcd_createSpecialCharacter>
			  break;
 8000906:	e03b      	b.n	8000980 <main+0x2fc>
		  case 'y':
			  lcd_setCursor(1, 0); lcd_send_data(0);
 8000908:	2100      	movs	r1, #0
 800090a:	2001      	movs	r0, #1
 800090c:	f7ff fd0c 	bl	8000328 <lcd_setCursor>
 8000910:	2000      	movs	r0, #0
 8000912:	f7ff fc5f 	bl	80001d4 <lcd_send_data>
			  lcd_setCursor(1, 1); lcd_send_data(1);
 8000916:	2101      	movs	r1, #1
 8000918:	2001      	movs	r0, #1
 800091a:	f7ff fd05 	bl	8000328 <lcd_setCursor>
 800091e:	2001      	movs	r0, #1
 8000920:	f7ff fc58 	bl	80001d4 <lcd_send_data>
			  lcd_setCursor(1, 2); lcd_send_data(2);
 8000924:	2102      	movs	r1, #2
 8000926:	2001      	movs	r0, #1
 8000928:	f7ff fcfe 	bl	8000328 <lcd_setCursor>
 800092c:	2002      	movs	r0, #2
 800092e:	f7ff fc51 	bl	80001d4 <lcd_send_data>
			  lcd_setCursor(1, 3); lcd_send_data(3);
 8000932:	2103      	movs	r1, #3
 8000934:	2001      	movs	r0, #1
 8000936:	f7ff fcf7 	bl	8000328 <lcd_setCursor>
 800093a:	2003      	movs	r0, #3
 800093c:	f7ff fc4a 	bl	80001d4 <lcd_send_data>
			  lcd_setCursor(1, 4); lcd_send_data(4);
 8000940:	2104      	movs	r1, #4
 8000942:	2001      	movs	r0, #1
 8000944:	f7ff fcf0 	bl	8000328 <lcd_setCursor>
 8000948:	2004      	movs	r0, #4
 800094a:	f7ff fc43 	bl	80001d4 <lcd_send_data>
			  lcd_setCursor(1, 5); lcd_send_data(5);
 800094e:	2105      	movs	r1, #5
 8000950:	2001      	movs	r0, #1
 8000952:	f7ff fce9 	bl	8000328 <lcd_setCursor>
 8000956:	2005      	movs	r0, #5
 8000958:	f7ff fc3c 	bl	80001d4 <lcd_send_data>
			  lcd_setCursor(1, 6); lcd_send_data(6);
 800095c:	2106      	movs	r1, #6
 800095e:	2001      	movs	r0, #1
 8000960:	f7ff fce2 	bl	8000328 <lcd_setCursor>
 8000964:	2006      	movs	r0, #6
 8000966:	f7ff fc35 	bl	80001d4 <lcd_send_data>
			  lcd_setCursor(1, 7); lcd_send_data(7);
 800096a:	2107      	movs	r1, #7
 800096c:	2001      	movs	r0, #1
 800096e:	f7ff fcdb 	bl	8000328 <lcd_setCursor>
 8000972:	2007      	movs	r0, #7
 8000974:	f7ff fc2e 	bl	80001d4 <lcd_send_data>
			  break;
 8000978:	e002      	b.n	8000980 <main+0x2fc>
			  //----- special character -----
		  default:
			  break;
		  }
	  }
 800097a:	bf00      	nop
 800097c:	e000      	b.n	8000980 <main+0x2fc>
			  break;
 800097e:	bf00      	nop

	  //pc13pin = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
   	  //if(GPIO_PIN_RESET == pc13pin){
   	  //}

	  HAL_Delay(100);
 8000980:	2064      	movs	r0, #100	; 0x64
 8000982:	f000 fb37 	bl	8000ff4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000986:	2120      	movs	r1, #32
 8000988:	480f      	ldr	r0, [pc, #60]	; (80009c8 <main+0x344>)
 800098a:	f000 fdd5 	bl	8001538 <HAL_GPIO_TogglePin>
	  uart2status = HAL_UART_Receive(&huart2, urx, 1, 300);
 800098e:	e69e      	b.n	80006ce <main+0x4a>
 8000990:	08003cbc 	.word	0x08003cbc
 8000994:	20000188 	.word	0x20000188
 8000998:	08003cdc 	.word	0x08003cdc
 800099c:	20000134 	.word	0x20000134
 80009a0:	20000144 	.word	0x20000144
 80009a4:	08003ce0 	.word	0x08003ce0
 80009a8:	20000004 	.word	0x20000004
 80009ac:	2000000c 	.word	0x2000000c
 80009b0:	20000014 	.word	0x20000014
 80009b4:	2000001c 	.word	0x2000001c
 80009b8:	20000024 	.word	0x20000024
 80009bc:	2000002c 	.word	0x2000002c
 80009c0:	20000034 	.word	0x20000034
 80009c4:	2000003c 	.word	0x2000003c
 80009c8:	40010800 	.word	0x40010800

080009cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b090      	sub	sp, #64	; 0x40
 80009d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d2:	f107 0318 	add.w	r3, r7, #24
 80009d6:	2228      	movs	r2, #40	; 0x28
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f002 f9f4 	bl	8002dc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ee:	2302      	movs	r3, #2
 80009f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009f2:	2301      	movs	r3, #1
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009f6:	2310      	movs	r3, #16
 80009f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009fa:	2302      	movs	r3, #2
 80009fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80009fe:	2300      	movs	r3, #0
 8000a00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000a02:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000a06:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a08:	f107 0318 	add.w	r3, r7, #24
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f001 fb3b 	bl	8002088 <HAL_RCC_OscConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000a18:	f000 f8e0 	bl	8000bdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1c:	230f      	movs	r3, #15
 8000a1e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a20:	2302      	movs	r3, #2
 8000a22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	2102      	movs	r1, #2
 8000a36:	4618      	mov	r0, r3
 8000a38:	f001 fda6 	bl	8002588 <HAL_RCC_ClockConfig>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000a42:	f000 f8cb 	bl	8000bdc <Error_Handler>
  }
}
 8000a46:	bf00      	nop
 8000a48:	3740      	adds	r7, #64	; 0x40
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <MX_I2C2_Init+0x50>)
 8000a56:	4a13      	ldr	r2, [pc, #76]	; (8000aa4 <MX_I2C2_Init+0x54>)
 8000a58:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <MX_I2C2_Init+0x50>)
 8000a5c:	4a12      	ldr	r2, [pc, #72]	; (8000aa8 <MX_I2C2_Init+0x58>)
 8000a5e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <MX_I2C2_Init+0x50>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <MX_I2C2_Init+0x50>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <MX_I2C2_Init+0x50>)
 8000a6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a72:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a74:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <MX_I2C2_Init+0x50>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_I2C2_Init+0x50>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a80:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <MX_I2C2_Init+0x50>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <MX_I2C2_Init+0x50>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a8c:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <MX_I2C2_Init+0x50>)
 8000a8e:	f000 fd8f 	bl	80015b0 <HAL_I2C_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a98:	f000 f8a0 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	200000e0 	.word	0x200000e0
 8000aa4:	40005800 	.word	0x40005800
 8000aa8:	000186a0 	.word	0x000186a0

08000aac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ab2:	4a12      	ldr	r2, [pc, #72]	; (8000afc <MX_USART2_UART_Init+0x50>)
 8000ab4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ab8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000abc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ae4:	f001 feec 	bl	80028c0 <HAL_UART_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000aee:	f000 f875 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000144 	.word	0x20000144
 8000afc:	40004400 	.word	0x40004400

08000b00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b088      	sub	sp, #32
 8000b04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b06:	f107 0310 	add.w	r3, r7, #16
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b14:	4b2d      	ldr	r3, [pc, #180]	; (8000bcc <MX_GPIO_Init+0xcc>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	4a2c      	ldr	r2, [pc, #176]	; (8000bcc <MX_GPIO_Init+0xcc>)
 8000b1a:	f043 0310 	orr.w	r3, r3, #16
 8000b1e:	6193      	str	r3, [r2, #24]
 8000b20:	4b2a      	ldr	r3, [pc, #168]	; (8000bcc <MX_GPIO_Init+0xcc>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	f003 0310 	and.w	r3, r3, #16
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2c:	4b27      	ldr	r3, [pc, #156]	; (8000bcc <MX_GPIO_Init+0xcc>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	4a26      	ldr	r2, [pc, #152]	; (8000bcc <MX_GPIO_Init+0xcc>)
 8000b32:	f043 0320 	orr.w	r3, r3, #32
 8000b36:	6193      	str	r3, [r2, #24]
 8000b38:	4b24      	ldr	r3, [pc, #144]	; (8000bcc <MX_GPIO_Init+0xcc>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	f003 0320 	and.w	r3, r3, #32
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b44:	4b21      	ldr	r3, [pc, #132]	; (8000bcc <MX_GPIO_Init+0xcc>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	4a20      	ldr	r2, [pc, #128]	; (8000bcc <MX_GPIO_Init+0xcc>)
 8000b4a:	f043 0304 	orr.w	r3, r3, #4
 8000b4e:	6193      	str	r3, [r2, #24]
 8000b50:	4b1e      	ldr	r3, [pc, #120]	; (8000bcc <MX_GPIO_Init+0xcc>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	f003 0304 	and.w	r3, r3, #4
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5c:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <MX_GPIO_Init+0xcc>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	4a1a      	ldr	r2, [pc, #104]	; (8000bcc <MX_GPIO_Init+0xcc>)
 8000b62:	f043 0308 	orr.w	r3, r3, #8
 8000b66:	6193      	str	r3, [r2, #24]
 8000b68:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <MX_GPIO_Init+0xcc>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	f003 0308 	and.w	r3, r3, #8
 8000b70:	603b      	str	r3, [r7, #0]
 8000b72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2120      	movs	r1, #32
 8000b78:	4815      	ldr	r0, [pc, #84]	; (8000bd0 <MX_GPIO_Init+0xd0>)
 8000b7a:	f000 fcc5 	bl	8001508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <MX_GPIO_Init+0xd4>)
 8000b86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b8c:	f107 0310 	add.w	r3, r7, #16
 8000b90:	4619      	mov	r1, r3
 8000b92:	4811      	ldr	r0, [pc, #68]	; (8000bd8 <MX_GPIO_Init+0xd8>)
 8000b94:	f000 fb5e 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b98:	2320      	movs	r3, #32
 8000b9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ba8:	f107 0310 	add.w	r3, r7, #16
 8000bac:	4619      	mov	r1, r3
 8000bae:	4808      	ldr	r0, [pc, #32]	; (8000bd0 <MX_GPIO_Init+0xd0>)
 8000bb0:	f000 fb50 	bl	8001254 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	2028      	movs	r0, #40	; 0x28
 8000bba:	f000 fb14 	bl	80011e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bbe:	2028      	movs	r0, #40	; 0x28
 8000bc0:	f000 fb2d 	bl	800121e <HAL_NVIC_EnableIRQ>

}
 8000bc4:	bf00      	nop
 8000bc6:	3720      	adds	r7, #32
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	40010800 	.word	0x40010800
 8000bd4:	10110000 	.word	0x10110000
 8000bd8:	40011000 	.word	0x40011000

08000bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr

08000be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <HAL_MspInit+0x5c>)
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	4a14      	ldr	r2, [pc, #80]	; (8000c44 <HAL_MspInit+0x5c>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6193      	str	r3, [r2, #24]
 8000bfa:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_MspInit+0x5c>)
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <HAL_MspInit+0x5c>)
 8000c08:	69db      	ldr	r3, [r3, #28]
 8000c0a:	4a0e      	ldr	r2, [pc, #56]	; (8000c44 <HAL_MspInit+0x5c>)
 8000c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c10:	61d3      	str	r3, [r2, #28]
 8000c12:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <HAL_MspInit+0x5c>)
 8000c14:	69db      	ldr	r3, [r3, #28]
 8000c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <HAL_MspInit+0x60>)
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <HAL_MspInit+0x60>)
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	3714      	adds	r7, #20
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr
 8000c44:	40021000 	.word	0x40021000
 8000c48:	40010000 	.word	0x40010000

08000c4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0310 	add.w	r3, r7, #16
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a16      	ldr	r2, [pc, #88]	; (8000cc0 <HAL_I2C_MspInit+0x74>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d124      	bne.n	8000cb6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6c:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <HAL_I2C_MspInit+0x78>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	4a14      	ldr	r2, [pc, #80]	; (8000cc4 <HAL_I2C_MspInit+0x78>)
 8000c72:	f043 0308 	orr.w	r3, r3, #8
 8000c76:	6193      	str	r3, [r2, #24]
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <HAL_I2C_MspInit+0x78>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	f003 0308 	and.w	r3, r3, #8
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c84:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c8a:	2312      	movs	r3, #18
 8000c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c92:	f107 0310 	add.w	r3, r7, #16
 8000c96:	4619      	mov	r1, r3
 8000c98:	480b      	ldr	r0, [pc, #44]	; (8000cc8 <HAL_I2C_MspInit+0x7c>)
 8000c9a:	f000 fadb 	bl	8001254 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c9e:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <HAL_I2C_MspInit+0x78>)
 8000ca0:	69db      	ldr	r3, [r3, #28]
 8000ca2:	4a08      	ldr	r2, [pc, #32]	; (8000cc4 <HAL_I2C_MspInit+0x78>)
 8000ca4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ca8:	61d3      	str	r3, [r2, #28]
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_I2C_MspInit+0x78>)
 8000cac:	69db      	ldr	r3, [r3, #28]
 8000cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000cb6:	bf00      	nop
 8000cb8:	3720      	adds	r7, #32
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40005800 	.word	0x40005800
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	40010c00 	.word	0x40010c00

08000ccc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b088      	sub	sp, #32
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 0310 	add.w	r3, r7, #16
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a15      	ldr	r2, [pc, #84]	; (8000d3c <HAL_UART_MspInit+0x70>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d123      	bne.n	8000d34 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cec:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <HAL_UART_MspInit+0x74>)
 8000cee:	69db      	ldr	r3, [r3, #28]
 8000cf0:	4a13      	ldr	r2, [pc, #76]	; (8000d40 <HAL_UART_MspInit+0x74>)
 8000cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf6:	61d3      	str	r3, [r2, #28]
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <HAL_UART_MspInit+0x74>)
 8000cfa:	69db      	ldr	r3, [r3, #28]
 8000cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d04:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <HAL_UART_MspInit+0x74>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	4a0d      	ldr	r2, [pc, #52]	; (8000d40 <HAL_UART_MspInit+0x74>)
 8000d0a:	f043 0304 	orr.w	r3, r3, #4
 8000d0e:	6193      	str	r3, [r2, #24]
 8000d10:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <HAL_UART_MspInit+0x74>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f003 0304 	and.w	r3, r3, #4
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d1c:	230c      	movs	r3, #12
 8000d1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	2302      	movs	r3, #2
 8000d26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d28:	f107 0310 	add.w	r3, r7, #16
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4805      	ldr	r0, [pc, #20]	; (8000d44 <HAL_UART_MspInit+0x78>)
 8000d30:	f000 fa90 	bl	8001254 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d34:	bf00      	nop
 8000d36:	3720      	adds	r7, #32
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40004400 	.word	0x40004400
 8000d40:	40021000 	.word	0x40021000
 8000d44:	40010800 	.word	0x40010800

08000d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr

08000d54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <HardFault_Handler+0x4>

08000d5a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <MemManage_Handler+0x4>

08000d60 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <BusFault_Handler+0x4>

08000d66 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <UsageFault_Handler+0x4>

08000d6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr

08000d78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr

08000d84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr

08000d90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d94:	f000 f912 	bl	8000fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000da0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000da4:	f000 fbe2 	bl	800156c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}

08000dac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	e00a      	b.n	8000dd4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dbe:	f3af 8000 	nop.w
 8000dc2:	4601      	mov	r1, r0
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	1c5a      	adds	r2, r3, #1
 8000dc8:	60ba      	str	r2, [r7, #8]
 8000dca:	b2ca      	uxtb	r2, r1
 8000dcc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	697a      	ldr	r2, [r7, #20]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	dbf0      	blt.n	8000dbe <_read+0x12>
	}

return len;
 8000ddc:	687b      	ldr	r3, [r7, #4]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b086      	sub	sp, #24
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	60f8      	str	r0, [r7, #12]
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	e009      	b.n	8000e0c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	1c5a      	adds	r2, r3, #1
 8000dfc:	60ba      	str	r2, [r7, #8]
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff f9a3 	bl	800014c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	617b      	str	r3, [r7, #20]
 8000e0c:	697a      	ldr	r2, [r7, #20]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	dbf1      	blt.n	8000df8 <_write+0x12>
	}
	return len;
 8000e14:	687b      	ldr	r3, [r7, #4]
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <_close>:

int _close(int file)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b083      	sub	sp, #12
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
	return -1;
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr

08000e34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e44:	605a      	str	r2, [r3, #4]
	return 0;
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr

08000e52 <_isatty>:

int _isatty(int file)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
	return 1;
 8000e5a:	2301      	movs	r3, #1
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr

08000e66 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e66:	b480      	push	{r7}
 8000e68:	b085      	sub	sp, #20
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	60f8      	str	r0, [r7, #12]
 8000e6e:	60b9      	str	r1, [r7, #8]
 8000e70:	607a      	str	r2, [r7, #4]
	return 0;
 8000e72:	2300      	movs	r3, #0
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr
	...

08000e80 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000e88:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <_sbrk+0x50>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d102      	bne.n	8000e96 <_sbrk+0x16>
		heap_end = &end;
 8000e90:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <_sbrk+0x50>)
 8000e92:	4a10      	ldr	r2, [pc, #64]	; (8000ed4 <_sbrk+0x54>)
 8000e94:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <_sbrk+0x50>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <_sbrk+0x50>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	466a      	mov	r2, sp
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d907      	bls.n	8000eba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000eaa:	f001 ff63 	bl	8002d74 <__errno>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	230c      	movs	r3, #12
 8000eb2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb8:	e006      	b.n	8000ec8 <_sbrk+0x48>
	}

	heap_end += incr;
 8000eba:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <_sbrk+0x50>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	4a03      	ldr	r2, [pc, #12]	; (8000ed0 <_sbrk+0x50>)
 8000ec4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	200000d4 	.word	0x200000d4
 8000ed4:	200001c0 	.word	0x200001c0

08000ed8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr

08000ee4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee4:	480c      	ldr	r0, [pc, #48]	; (8000f18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ee6:	490d      	ldr	r1, [pc, #52]	; (8000f1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	; (8000f20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eec:	e002      	b.n	8000ef4 <LoopCopyDataInit>

08000eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef2:	3304      	adds	r3, #4

08000ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef8:	d3f9      	bcc.n	8000eee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efa:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000efc:	4c0a      	ldr	r4, [pc, #40]	; (8000f28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f00:	e001      	b.n	8000f06 <LoopFillZerobss>

08000f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f04:	3204      	adds	r2, #4

08000f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f08:	d3fb      	bcc.n	8000f02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f0a:	f7ff ffe5 	bl	8000ed8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f0e:	f001 ff37 	bl	8002d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f12:	f7ff fbb7 	bl	8000684 <main>
  bx lr
 8000f16:	4770      	bx	lr
  ldr r0, =_sdata
 8000f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f1c:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8000f20:	08003db4 	.word	0x08003db4
  ldr r2, =_sbss
 8000f24:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8000f28:	200001c0 	.word	0x200001c0

08000f2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f2c:	e7fe      	b.n	8000f2c <ADC1_2_IRQHandler>
	...

08000f30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <HAL_Init+0x28>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a07      	ldr	r2, [pc, #28]	; (8000f58 <HAL_Init+0x28>)
 8000f3a:	f043 0310 	orr.w	r3, r3, #16
 8000f3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f40:	2003      	movs	r0, #3
 8000f42:	f000 f945 	bl	80011d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f46:	2000      	movs	r0, #0
 8000f48:	f000 f808 	bl	8000f5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f4c:	f7ff fe4c 	bl	8000be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40022000 	.word	0x40022000

08000f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <HAL_InitTick+0x54>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <HAL_InitTick+0x58>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 f95d 	bl	800123a <HAL_SYSTICK_Config>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e00e      	b.n	8000fa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b0f      	cmp	r3, #15
 8000f8e:	d80a      	bhi.n	8000fa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f90:	2200      	movs	r2, #0
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295
 8000f98:	f000 f925 	bl	80011e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f9c:	4a06      	ldr	r2, [pc, #24]	; (8000fb8 <HAL_InitTick+0x5c>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	e000      	b.n	8000fa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000044 	.word	0x20000044
 8000fb4:	2000004c 	.word	0x2000004c
 8000fb8:	20000048 	.word	0x20000048

08000fbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <HAL_IncTick+0x1c>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <HAL_IncTick+0x20>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4413      	add	r3, r2
 8000fcc:	4a03      	ldr	r2, [pc, #12]	; (8000fdc <HAL_IncTick+0x20>)
 8000fce:	6013      	str	r3, [r2, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr
 8000fd8:	2000004c 	.word	0x2000004c
 8000fdc:	200001b8 	.word	0x200001b8

08000fe0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe4:	4b02      	ldr	r3, [pc, #8]	; (8000ff0 <HAL_GetTick+0x10>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr
 8000ff0:	200001b8 	.word	0x200001b8

08000ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ffc:	f7ff fff0 	bl	8000fe0 <HAL_GetTick>
 8001000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800100c:	d005      	beq.n	800101a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <HAL_Delay+0x40>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4413      	add	r3, r2
 8001018:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800101a:	bf00      	nop
 800101c:	f7ff ffe0 	bl	8000fe0 <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	429a      	cmp	r2, r3
 800102a:	d8f7      	bhi.n	800101c <HAL_Delay+0x28>
  {
  }
}
 800102c:	bf00      	nop
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	2000004c 	.word	0x2000004c

08001038 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <__NVIC_SetPriorityGrouping+0x44>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001054:	4013      	ands	r3, r2
 8001056:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001060:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800106a:	4a04      	ldr	r2, [pc, #16]	; (800107c <__NVIC_SetPriorityGrouping+0x44>)
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	60d3      	str	r3, [r2, #12]
}
 8001070:	bf00      	nop
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <__NVIC_GetPriorityGrouping+0x18>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	0a1b      	lsrs	r3, r3, #8
 800108a:	f003 0307 	and.w	r3, r3, #7
}
 800108e:	4618      	mov	r0, r3
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	db0b      	blt.n	80010c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	f003 021f 	and.w	r2, r3, #31
 80010b4:	4906      	ldr	r1, [pc, #24]	; (80010d0 <__NVIC_EnableIRQ+0x34>)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	095b      	lsrs	r3, r3, #5
 80010bc:	2001      	movs	r0, #1
 80010be:	fa00 f202 	lsl.w	r2, r0, r2
 80010c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	e000e100 	.word	0xe000e100

080010d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	6039      	str	r1, [r7, #0]
 80010de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	db0a      	blt.n	80010fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	490c      	ldr	r1, [pc, #48]	; (8001120 <__NVIC_SetPriority+0x4c>)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	0112      	lsls	r2, r2, #4
 80010f4:	b2d2      	uxtb	r2, r2
 80010f6:	440b      	add	r3, r1
 80010f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010fc:	e00a      	b.n	8001114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4908      	ldr	r1, [pc, #32]	; (8001124 <__NVIC_SetPriority+0x50>)
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	f003 030f 	and.w	r3, r3, #15
 800110a:	3b04      	subs	r3, #4
 800110c:	0112      	lsls	r2, r2, #4
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	440b      	add	r3, r1
 8001112:	761a      	strb	r2, [r3, #24]
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000e100 	.word	0xe000e100
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001128:	b480      	push	{r7}
 800112a:	b089      	sub	sp, #36	; 0x24
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	f1c3 0307 	rsb	r3, r3, #7
 8001142:	2b04      	cmp	r3, #4
 8001144:	bf28      	it	cs
 8001146:	2304      	movcs	r3, #4
 8001148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	3304      	adds	r3, #4
 800114e:	2b06      	cmp	r3, #6
 8001150:	d902      	bls.n	8001158 <NVIC_EncodePriority+0x30>
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3b03      	subs	r3, #3
 8001156:	e000      	b.n	800115a <NVIC_EncodePriority+0x32>
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800115c:	f04f 32ff 	mov.w	r2, #4294967295
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43da      	mvns	r2, r3
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	401a      	ands	r2, r3
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001170:	f04f 31ff 	mov.w	r1, #4294967295
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	fa01 f303 	lsl.w	r3, r1, r3
 800117a:	43d9      	mvns	r1, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001180:	4313      	orrs	r3, r2
         );
}
 8001182:	4618      	mov	r0, r3
 8001184:	3724      	adds	r7, #36	; 0x24
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr

0800118c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3b01      	subs	r3, #1
 8001198:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800119c:	d301      	bcc.n	80011a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119e:	2301      	movs	r3, #1
 80011a0:	e00f      	b.n	80011c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011a2:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <SysTick_Config+0x40>)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011aa:	210f      	movs	r1, #15
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295
 80011b0:	f7ff ff90 	bl	80010d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b4:	4b05      	ldr	r3, [pc, #20]	; (80011cc <SysTick_Config+0x40>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ba:	4b04      	ldr	r3, [pc, #16]	; (80011cc <SysTick_Config+0x40>)
 80011bc:	2207      	movs	r2, #7
 80011be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	e000e010 	.word	0xe000e010

080011d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ff2d 	bl	8001038 <__NVIC_SetPriorityGrouping>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b086      	sub	sp, #24
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	4603      	mov	r3, r0
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
 80011f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f8:	f7ff ff42 	bl	8001080 <__NVIC_GetPriorityGrouping>
 80011fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	68b9      	ldr	r1, [r7, #8]
 8001202:	6978      	ldr	r0, [r7, #20]
 8001204:	f7ff ff90 	bl	8001128 <NVIC_EncodePriority>
 8001208:	4602      	mov	r2, r0
 800120a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120e:	4611      	mov	r1, r2
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff5f 	bl	80010d4 <__NVIC_SetPriority>
}
 8001216:	bf00      	nop
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff35 	bl	800109c <__NVIC_EnableIRQ>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff ffa2 	bl	800118c <SysTick_Config>
 8001248:	4603      	mov	r3, r0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001254:	b480      	push	{r7}
 8001256:	b08b      	sub	sp, #44	; 0x2c
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800125e:	2300      	movs	r3, #0
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001266:	e127      	b.n	80014b8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001268:	2201      	movs	r2, #1
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	69fa      	ldr	r2, [r7, #28]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	429a      	cmp	r2, r3
 8001282:	f040 8116 	bne.w	80014b2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b12      	cmp	r3, #18
 800128c:	d034      	beq.n	80012f8 <HAL_GPIO_Init+0xa4>
 800128e:	2b12      	cmp	r3, #18
 8001290:	d80d      	bhi.n	80012ae <HAL_GPIO_Init+0x5a>
 8001292:	2b02      	cmp	r3, #2
 8001294:	d02b      	beq.n	80012ee <HAL_GPIO_Init+0x9a>
 8001296:	2b02      	cmp	r3, #2
 8001298:	d804      	bhi.n	80012a4 <HAL_GPIO_Init+0x50>
 800129a:	2b00      	cmp	r3, #0
 800129c:	d031      	beq.n	8001302 <HAL_GPIO_Init+0xae>
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d01c      	beq.n	80012dc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012a2:	e048      	b.n	8001336 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012a4:	2b03      	cmp	r3, #3
 80012a6:	d043      	beq.n	8001330 <HAL_GPIO_Init+0xdc>
 80012a8:	2b11      	cmp	r3, #17
 80012aa:	d01b      	beq.n	80012e4 <HAL_GPIO_Init+0x90>
          break;
 80012ac:	e043      	b.n	8001336 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012ae:	4a89      	ldr	r2, [pc, #548]	; (80014d4 <HAL_GPIO_Init+0x280>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d026      	beq.n	8001302 <HAL_GPIO_Init+0xae>
 80012b4:	4a87      	ldr	r2, [pc, #540]	; (80014d4 <HAL_GPIO_Init+0x280>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d806      	bhi.n	80012c8 <HAL_GPIO_Init+0x74>
 80012ba:	4a87      	ldr	r2, [pc, #540]	; (80014d8 <HAL_GPIO_Init+0x284>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d020      	beq.n	8001302 <HAL_GPIO_Init+0xae>
 80012c0:	4a86      	ldr	r2, [pc, #536]	; (80014dc <HAL_GPIO_Init+0x288>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d01d      	beq.n	8001302 <HAL_GPIO_Init+0xae>
          break;
 80012c6:	e036      	b.n	8001336 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012c8:	4a85      	ldr	r2, [pc, #532]	; (80014e0 <HAL_GPIO_Init+0x28c>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d019      	beq.n	8001302 <HAL_GPIO_Init+0xae>
 80012ce:	4a85      	ldr	r2, [pc, #532]	; (80014e4 <HAL_GPIO_Init+0x290>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d016      	beq.n	8001302 <HAL_GPIO_Init+0xae>
 80012d4:	4a84      	ldr	r2, [pc, #528]	; (80014e8 <HAL_GPIO_Init+0x294>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d013      	beq.n	8001302 <HAL_GPIO_Init+0xae>
          break;
 80012da:	e02c      	b.n	8001336 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	623b      	str	r3, [r7, #32]
          break;
 80012e2:	e028      	b.n	8001336 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	3304      	adds	r3, #4
 80012ea:	623b      	str	r3, [r7, #32]
          break;
 80012ec:	e023      	b.n	8001336 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	3308      	adds	r3, #8
 80012f4:	623b      	str	r3, [r7, #32]
          break;
 80012f6:	e01e      	b.n	8001336 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	330c      	adds	r3, #12
 80012fe:	623b      	str	r3, [r7, #32]
          break;
 8001300:	e019      	b.n	8001336 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d102      	bne.n	8001310 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800130a:	2304      	movs	r3, #4
 800130c:	623b      	str	r3, [r7, #32]
          break;
 800130e:	e012      	b.n	8001336 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d105      	bne.n	8001324 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001318:	2308      	movs	r3, #8
 800131a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	69fa      	ldr	r2, [r7, #28]
 8001320:	611a      	str	r2, [r3, #16]
          break;
 8001322:	e008      	b.n	8001336 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001324:	2308      	movs	r3, #8
 8001326:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69fa      	ldr	r2, [r7, #28]
 800132c:	615a      	str	r2, [r3, #20]
          break;
 800132e:	e002      	b.n	8001336 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001330:	2300      	movs	r3, #0
 8001332:	623b      	str	r3, [r7, #32]
          break;
 8001334:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	2bff      	cmp	r3, #255	; 0xff
 800133a:	d801      	bhi.n	8001340 <HAL_GPIO_Init+0xec>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	e001      	b.n	8001344 <HAL_GPIO_Init+0xf0>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3304      	adds	r3, #4
 8001344:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	2bff      	cmp	r3, #255	; 0xff
 800134a:	d802      	bhi.n	8001352 <HAL_GPIO_Init+0xfe>
 800134c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	e002      	b.n	8001358 <HAL_GPIO_Init+0x104>
 8001352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001354:	3b08      	subs	r3, #8
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	210f      	movs	r1, #15
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	fa01 f303 	lsl.w	r3, r1, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	401a      	ands	r2, r3
 800136a:	6a39      	ldr	r1, [r7, #32]
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	fa01 f303 	lsl.w	r3, r1, r3
 8001372:	431a      	orrs	r2, r3
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001380:	2b00      	cmp	r3, #0
 8001382:	f000 8096 	beq.w	80014b2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001386:	4b59      	ldr	r3, [pc, #356]	; (80014ec <HAL_GPIO_Init+0x298>)
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	4a58      	ldr	r2, [pc, #352]	; (80014ec <HAL_GPIO_Init+0x298>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6193      	str	r3, [r2, #24]
 8001392:	4b56      	ldr	r3, [pc, #344]	; (80014ec <HAL_GPIO_Init+0x298>)
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800139e:	4a54      	ldr	r2, [pc, #336]	; (80014f0 <HAL_GPIO_Init+0x29c>)
 80013a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a2:	089b      	lsrs	r3, r3, #2
 80013a4:	3302      	adds	r3, #2
 80013a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013aa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ae:	f003 0303 	and.w	r3, r3, #3
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	220f      	movs	r2, #15
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43db      	mvns	r3, r3
 80013bc:	68fa      	ldr	r2, [r7, #12]
 80013be:	4013      	ands	r3, r2
 80013c0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a4b      	ldr	r2, [pc, #300]	; (80014f4 <HAL_GPIO_Init+0x2a0>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d013      	beq.n	80013f2 <HAL_GPIO_Init+0x19e>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a4a      	ldr	r2, [pc, #296]	; (80014f8 <HAL_GPIO_Init+0x2a4>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d00d      	beq.n	80013ee <HAL_GPIO_Init+0x19a>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a49      	ldr	r2, [pc, #292]	; (80014fc <HAL_GPIO_Init+0x2a8>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d007      	beq.n	80013ea <HAL_GPIO_Init+0x196>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a48      	ldr	r2, [pc, #288]	; (8001500 <HAL_GPIO_Init+0x2ac>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d101      	bne.n	80013e6 <HAL_GPIO_Init+0x192>
 80013e2:	2303      	movs	r3, #3
 80013e4:	e006      	b.n	80013f4 <HAL_GPIO_Init+0x1a0>
 80013e6:	2304      	movs	r3, #4
 80013e8:	e004      	b.n	80013f4 <HAL_GPIO_Init+0x1a0>
 80013ea:	2302      	movs	r3, #2
 80013ec:	e002      	b.n	80013f4 <HAL_GPIO_Init+0x1a0>
 80013ee:	2301      	movs	r3, #1
 80013f0:	e000      	b.n	80013f4 <HAL_GPIO_Init+0x1a0>
 80013f2:	2300      	movs	r3, #0
 80013f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013f6:	f002 0203 	and.w	r2, r2, #3
 80013fa:	0092      	lsls	r2, r2, #2
 80013fc:	4093      	lsls	r3, r2
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	4313      	orrs	r3, r2
 8001402:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001404:	493a      	ldr	r1, [pc, #232]	; (80014f0 <HAL_GPIO_Init+0x29c>)
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	089b      	lsrs	r3, r3, #2
 800140a:	3302      	adds	r3, #2
 800140c:	68fa      	ldr	r2, [r7, #12]
 800140e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d006      	beq.n	800142c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800141e:	4b39      	ldr	r3, [pc, #228]	; (8001504 <HAL_GPIO_Init+0x2b0>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4938      	ldr	r1, [pc, #224]	; (8001504 <HAL_GPIO_Init+0x2b0>)
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	4313      	orrs	r3, r2
 8001428:	600b      	str	r3, [r1, #0]
 800142a:	e006      	b.n	800143a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800142c:	4b35      	ldr	r3, [pc, #212]	; (8001504 <HAL_GPIO_Init+0x2b0>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	43db      	mvns	r3, r3
 8001434:	4933      	ldr	r1, [pc, #204]	; (8001504 <HAL_GPIO_Init+0x2b0>)
 8001436:	4013      	ands	r3, r2
 8001438:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d006      	beq.n	8001454 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001446:	4b2f      	ldr	r3, [pc, #188]	; (8001504 <HAL_GPIO_Init+0x2b0>)
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	492e      	ldr	r1, [pc, #184]	; (8001504 <HAL_GPIO_Init+0x2b0>)
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	4313      	orrs	r3, r2
 8001450:	604b      	str	r3, [r1, #4]
 8001452:	e006      	b.n	8001462 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001454:	4b2b      	ldr	r3, [pc, #172]	; (8001504 <HAL_GPIO_Init+0x2b0>)
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	43db      	mvns	r3, r3
 800145c:	4929      	ldr	r1, [pc, #164]	; (8001504 <HAL_GPIO_Init+0x2b0>)
 800145e:	4013      	ands	r3, r2
 8001460:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d006      	beq.n	800147c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800146e:	4b25      	ldr	r3, [pc, #148]	; (8001504 <HAL_GPIO_Init+0x2b0>)
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	4924      	ldr	r1, [pc, #144]	; (8001504 <HAL_GPIO_Init+0x2b0>)
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	4313      	orrs	r3, r2
 8001478:	608b      	str	r3, [r1, #8]
 800147a:	e006      	b.n	800148a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800147c:	4b21      	ldr	r3, [pc, #132]	; (8001504 <HAL_GPIO_Init+0x2b0>)
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	43db      	mvns	r3, r3
 8001484:	491f      	ldr	r1, [pc, #124]	; (8001504 <HAL_GPIO_Init+0x2b0>)
 8001486:	4013      	ands	r3, r2
 8001488:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d006      	beq.n	80014a4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001496:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <HAL_GPIO_Init+0x2b0>)
 8001498:	68da      	ldr	r2, [r3, #12]
 800149a:	491a      	ldr	r1, [pc, #104]	; (8001504 <HAL_GPIO_Init+0x2b0>)
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	60cb      	str	r3, [r1, #12]
 80014a2:	e006      	b.n	80014b2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014a4:	4b17      	ldr	r3, [pc, #92]	; (8001504 <HAL_GPIO_Init+0x2b0>)
 80014a6:	68da      	ldr	r2, [r3, #12]
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	43db      	mvns	r3, r3
 80014ac:	4915      	ldr	r1, [pc, #84]	; (8001504 <HAL_GPIO_Init+0x2b0>)
 80014ae:	4013      	ands	r3, r2
 80014b0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	3301      	adds	r3, #1
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014be:	fa22 f303 	lsr.w	r3, r2, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f47f aed0 	bne.w	8001268 <HAL_GPIO_Init+0x14>
  }
}
 80014c8:	bf00      	nop
 80014ca:	372c      	adds	r7, #44	; 0x2c
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	10210000 	.word	0x10210000
 80014d8:	10110000 	.word	0x10110000
 80014dc:	10120000 	.word	0x10120000
 80014e0:	10310000 	.word	0x10310000
 80014e4:	10320000 	.word	0x10320000
 80014e8:	10220000 	.word	0x10220000
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40010000 	.word	0x40010000
 80014f4:	40010800 	.word	0x40010800
 80014f8:	40010c00 	.word	0x40010c00
 80014fc:	40011000 	.word	0x40011000
 8001500:	40011400 	.word	0x40011400
 8001504:	40010400 	.word	0x40010400

08001508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	807b      	strh	r3, [r7, #2]
 8001514:	4613      	mov	r3, r2
 8001516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001518:	787b      	ldrb	r3, [r7, #1]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800151e:	887a      	ldrh	r2, [r7, #2]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001524:	e003      	b.n	800152e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001526:	887b      	ldrh	r3, [r7, #2]
 8001528:	041a      	lsls	r2, r3, #16
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	611a      	str	r2, [r3, #16]
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr

08001538 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800154a:	887a      	ldrh	r2, [r7, #2]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4013      	ands	r3, r2
 8001550:	041a      	lsls	r2, r3, #16
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	43d9      	mvns	r1, r3
 8001556:	887b      	ldrh	r3, [r7, #2]
 8001558:	400b      	ands	r3, r1
 800155a:	431a      	orrs	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	611a      	str	r2, [r3, #16]
}
 8001560:	bf00      	nop
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr
	...

0800156c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001576:	4b08      	ldr	r3, [pc, #32]	; (8001598 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001578:	695a      	ldr	r2, [r3, #20]
 800157a:	88fb      	ldrh	r3, [r7, #6]
 800157c:	4013      	ands	r3, r2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d006      	beq.n	8001590 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001582:	4a05      	ldr	r2, [pc, #20]	; (8001598 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001584:	88fb      	ldrh	r3, [r7, #6]
 8001586:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001588:	88fb      	ldrh	r3, [r7, #6]
 800158a:	4618      	mov	r0, r3
 800158c:	f000 f806 	bl	800159c <HAL_GPIO_EXTI_Callback>
  }
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40010400 	.word	0x40010400

0800159c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e11f      	b.n	8001802 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d106      	bne.n	80015dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff fb38 	bl	8000c4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2224      	movs	r2, #36	; 0x24
 80015e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f022 0201 	bic.w	r2, r2, #1
 80015f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001602:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001612:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001614:	f001 f90e 	bl	8002834 <HAL_RCC_GetPCLK1Freq>
 8001618:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	4a7b      	ldr	r2, [pc, #492]	; (800180c <HAL_I2C_Init+0x25c>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d807      	bhi.n	8001634 <HAL_I2C_Init+0x84>
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4a7a      	ldr	r2, [pc, #488]	; (8001810 <HAL_I2C_Init+0x260>)
 8001628:	4293      	cmp	r3, r2
 800162a:	bf94      	ite	ls
 800162c:	2301      	movls	r3, #1
 800162e:	2300      	movhi	r3, #0
 8001630:	b2db      	uxtb	r3, r3
 8001632:	e006      	b.n	8001642 <HAL_I2C_Init+0x92>
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4a77      	ldr	r2, [pc, #476]	; (8001814 <HAL_I2C_Init+0x264>)
 8001638:	4293      	cmp	r3, r2
 800163a:	bf94      	ite	ls
 800163c:	2301      	movls	r3, #1
 800163e:	2300      	movhi	r3, #0
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e0db      	b.n	8001802 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	4a72      	ldr	r2, [pc, #456]	; (8001818 <HAL_I2C_Init+0x268>)
 800164e:	fba2 2303 	umull	r2, r3, r2, r3
 8001652:	0c9b      	lsrs	r3, r3, #18
 8001654:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68ba      	ldr	r2, [r7, #8]
 8001666:	430a      	orrs	r2, r1
 8001668:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	4a64      	ldr	r2, [pc, #400]	; (800180c <HAL_I2C_Init+0x25c>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d802      	bhi.n	8001684 <HAL_I2C_Init+0xd4>
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	3301      	adds	r3, #1
 8001682:	e009      	b.n	8001698 <HAL_I2C_Init+0xe8>
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800168a:	fb02 f303 	mul.w	r3, r2, r3
 800168e:	4a63      	ldr	r2, [pc, #396]	; (800181c <HAL_I2C_Init+0x26c>)
 8001690:	fba2 2303 	umull	r2, r3, r2, r3
 8001694:	099b      	lsrs	r3, r3, #6
 8001696:	3301      	adds	r3, #1
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	6812      	ldr	r2, [r2, #0]
 800169c:	430b      	orrs	r3, r1
 800169e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80016aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	4956      	ldr	r1, [pc, #344]	; (800180c <HAL_I2C_Init+0x25c>)
 80016b4:	428b      	cmp	r3, r1
 80016b6:	d80d      	bhi.n	80016d4 <HAL_I2C_Init+0x124>
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	1e59      	subs	r1, r3, #1
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80016c6:	3301      	adds	r3, #1
 80016c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016cc:	2b04      	cmp	r3, #4
 80016ce:	bf38      	it	cc
 80016d0:	2304      	movcc	r3, #4
 80016d2:	e04f      	b.n	8001774 <HAL_I2C_Init+0x1c4>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d111      	bne.n	8001700 <HAL_I2C_Init+0x150>
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	1e58      	subs	r0, r3, #1
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6859      	ldr	r1, [r3, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	440b      	add	r3, r1
 80016ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ee:	3301      	adds	r3, #1
 80016f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	bf0c      	ite	eq
 80016f8:	2301      	moveq	r3, #1
 80016fa:	2300      	movne	r3, #0
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	e012      	b.n	8001726 <HAL_I2C_Init+0x176>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	1e58      	subs	r0, r3, #1
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6859      	ldr	r1, [r3, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	440b      	add	r3, r1
 800170e:	0099      	lsls	r1, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	fbb0 f3f3 	udiv	r3, r0, r3
 8001716:	3301      	adds	r3, #1
 8001718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800171c:	2b00      	cmp	r3, #0
 800171e:	bf0c      	ite	eq
 8001720:	2301      	moveq	r3, #1
 8001722:	2300      	movne	r3, #0
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_I2C_Init+0x17e>
 800172a:	2301      	movs	r3, #1
 800172c:	e022      	b.n	8001774 <HAL_I2C_Init+0x1c4>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10e      	bne.n	8001754 <HAL_I2C_Init+0x1a4>
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	1e58      	subs	r0, r3, #1
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6859      	ldr	r1, [r3, #4]
 800173e:	460b      	mov	r3, r1
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	440b      	add	r3, r1
 8001744:	fbb0 f3f3 	udiv	r3, r0, r3
 8001748:	3301      	adds	r3, #1
 800174a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800174e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001752:	e00f      	b.n	8001774 <HAL_I2C_Init+0x1c4>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	1e58      	subs	r0, r3, #1
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6859      	ldr	r1, [r3, #4]
 800175c:	460b      	mov	r3, r1
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	440b      	add	r3, r1
 8001762:	0099      	lsls	r1, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	fbb0 f3f3 	udiv	r3, r0, r3
 800176a:	3301      	adds	r3, #1
 800176c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001770:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001774:	6879      	ldr	r1, [r7, #4]
 8001776:	6809      	ldr	r1, [r1, #0]
 8001778:	4313      	orrs	r3, r2
 800177a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69da      	ldr	r2, [r3, #28]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	431a      	orrs	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	430a      	orrs	r2, r1
 8001796:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80017a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6911      	ldr	r1, [r2, #16]
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	68d2      	ldr	r2, [r2, #12]
 80017ae:	4311      	orrs	r1, r2
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	6812      	ldr	r2, [r2, #0]
 80017b4:	430b      	orrs	r3, r1
 80017b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	695a      	ldr	r2, [r3, #20]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	431a      	orrs	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f042 0201 	orr.w	r2, r2, #1
 80017e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2220      	movs	r2, #32
 80017ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	000186a0 	.word	0x000186a0
 8001810:	001e847f 	.word	0x001e847f
 8001814:	003d08ff 	.word	0x003d08ff
 8001818:	431bde83 	.word	0x431bde83
 800181c:	10624dd3 	.word	0x10624dd3

08001820 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b088      	sub	sp, #32
 8001824:	af02      	add	r7, sp, #8
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	607a      	str	r2, [r7, #4]
 800182a:	461a      	mov	r2, r3
 800182c:	460b      	mov	r3, r1
 800182e:	817b      	strh	r3, [r7, #10]
 8001830:	4613      	mov	r3, r2
 8001832:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001834:	f7ff fbd4 	bl	8000fe0 <HAL_GetTick>
 8001838:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b20      	cmp	r3, #32
 8001844:	f040 80e0 	bne.w	8001a08 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	2319      	movs	r3, #25
 800184e:	2201      	movs	r2, #1
 8001850:	4970      	ldr	r1, [pc, #448]	; (8001a14 <HAL_I2C_Master_Transmit+0x1f4>)
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f000 fa92 	bl	8001d7c <I2C_WaitOnFlagUntilTimeout>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800185e:	2302      	movs	r3, #2
 8001860:	e0d3      	b.n	8001a0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001868:	2b01      	cmp	r3, #1
 800186a:	d101      	bne.n	8001870 <HAL_I2C_Master_Transmit+0x50>
 800186c:	2302      	movs	r3, #2
 800186e:	e0cc      	b.n	8001a0a <HAL_I2C_Master_Transmit+0x1ea>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b01      	cmp	r3, #1
 8001884:	d007      	beq.n	8001896 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f042 0201 	orr.w	r2, r2, #1
 8001894:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2221      	movs	r2, #33	; 0x21
 80018aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2210      	movs	r2, #16
 80018b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2200      	movs	r2, #0
 80018ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	893a      	ldrh	r2, [r7, #8]
 80018c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	4a50      	ldr	r2, [pc, #320]	; (8001a18 <HAL_I2C_Master_Transmit+0x1f8>)
 80018d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80018d8:	8979      	ldrh	r1, [r7, #10]
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	6a3a      	ldr	r2, [r7, #32]
 80018de:	68f8      	ldr	r0, [r7, #12]
 80018e0:	f000 f9ca 	bl	8001c78 <I2C_MasterRequestWrite>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e08d      	b.n	8001a0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ee:	2300      	movs	r3, #0
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001904:	e066      	b.n	80019d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	6a39      	ldr	r1, [r7, #32]
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f000 fb0c 	bl	8001f28 <I2C_WaitOnTXEFlagUntilTimeout>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00d      	beq.n	8001932 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	2b04      	cmp	r3, #4
 800191c:	d107      	bne.n	800192e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800192c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e06b      	b.n	8001a0a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001936:	781a      	ldrb	r2, [r3, #0]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001942:	1c5a      	adds	r2, r3, #1
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800194c:	b29b      	uxth	r3, r3
 800194e:	3b01      	subs	r3, #1
 8001950:	b29a      	uxth	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800195a:	3b01      	subs	r3, #1
 800195c:	b29a      	uxth	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b04      	cmp	r3, #4
 800196e:	d11b      	bne.n	80019a8 <HAL_I2C_Master_Transmit+0x188>
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001974:	2b00      	cmp	r3, #0
 8001976:	d017      	beq.n	80019a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197c:	781a      	ldrb	r2, [r3, #0]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001992:	b29b      	uxth	r3, r3
 8001994:	3b01      	subs	r3, #1
 8001996:	b29a      	uxth	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a0:	3b01      	subs	r3, #1
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	6a39      	ldr	r1, [r7, #32]
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f000 fafc 	bl	8001faa <I2C_WaitOnBTFFlagUntilTimeout>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00d      	beq.n	80019d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019bc:	2b04      	cmp	r3, #4
 80019be:	d107      	bne.n	80019d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e01a      	b.n	8001a0a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d194      	bne.n	8001906 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2220      	movs	r2, #32
 80019f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a04:	2300      	movs	r3, #0
 8001a06:	e000      	b.n	8001a0a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001a08:	2302      	movs	r3, #2
  }
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	00100002 	.word	0x00100002
 8001a18:	ffff0000 	.word	0xffff0000

08001a1c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08a      	sub	sp, #40	; 0x28
 8001a20:	af02      	add	r7, sp, #8
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	607a      	str	r2, [r7, #4]
 8001a26:	603b      	str	r3, [r7, #0]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001a2c:	f7ff fad8 	bl	8000fe0 <HAL_GetTick>
 8001a30:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001a32:	2301      	movs	r3, #1
 8001a34:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b20      	cmp	r3, #32
 8001a40:	f040 8111 	bne.w	8001c66 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	2319      	movs	r3, #25
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	4988      	ldr	r1, [pc, #544]	; (8001c70 <HAL_I2C_IsDeviceReady+0x254>)
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f000 f994 	bl	8001d7c <I2C_WaitOnFlagUntilTimeout>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	e104      	b.n	8001c68 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d101      	bne.n	8001a6c <HAL_I2C_IsDeviceReady+0x50>
 8001a68:	2302      	movs	r3, #2
 8001a6a:	e0fd      	b.n	8001c68 <HAL_I2C_IsDeviceReady+0x24c>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d007      	beq.n	8001a92 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f042 0201 	orr.w	r2, r2, #1
 8001a90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001aa0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2224      	movs	r2, #36	; 0x24
 8001aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2200      	movs	r2, #0
 8001aae:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4a70      	ldr	r2, [pc, #448]	; (8001c74 <HAL_I2C_IsDeviceReady+0x258>)
 8001ab4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ac4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	f000 f952 	bl	8001d7c <I2C_WaitOnFlagUntilTimeout>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00d      	beq.n	8001afa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001aec:	d103      	bne.n	8001af6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e0b6      	b.n	8001c68 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001afa:	897b      	ldrh	r3, [r7, #10]
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	461a      	mov	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b08:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001b0a:	f7ff fa69 	bl	8000fe0 <HAL_GetTick>
 8001b0e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	bf0c      	ite	eq
 8001b1e:	2301      	moveq	r3, #1
 8001b20:	2300      	movne	r3, #0
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b34:	bf0c      	ite	eq
 8001b36:	2301      	moveq	r3, #1
 8001b38:	2300      	movne	r3, #0
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001b3e:	e025      	b.n	8001b8c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b40:	f7ff fa4e 	bl	8000fe0 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d302      	bcc.n	8001b56 <HAL_I2C_IsDeviceReady+0x13a>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d103      	bne.n	8001b5e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	22a0      	movs	r2, #160	; 0xa0
 8001b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	bf0c      	ite	eq
 8001b6c:	2301      	moveq	r3, #1
 8001b6e:	2300      	movne	r3, #0
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b82:	bf0c      	ite	eq
 8001b84:	2301      	moveq	r3, #1
 8001b86:	2300      	movne	r3, #0
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2ba0      	cmp	r3, #160	; 0xa0
 8001b96:	d005      	beq.n	8001ba4 <HAL_I2C_IsDeviceReady+0x188>
 8001b98:	7dfb      	ldrb	r3, [r7, #23]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d102      	bne.n	8001ba4 <HAL_I2C_IsDeviceReady+0x188>
 8001b9e:	7dbb      	ldrb	r3, [r7, #22]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0cd      	beq.n	8001b40 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2220      	movs	r2, #32
 8001ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d129      	bne.n	8001c0e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bc8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bca:	2300      	movs	r3, #0
 8001bcc:	613b      	str	r3, [r7, #16]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	2319      	movs	r3, #25
 8001be6:	2201      	movs	r2, #1
 8001be8:	4921      	ldr	r1, [pc, #132]	; (8001c70 <HAL_I2C_IsDeviceReady+0x254>)
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f000 f8c6 	bl	8001d7c <I2C_WaitOnFlagUntilTimeout>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e036      	b.n	8001c68 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2220      	movs	r2, #32
 8001bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	e02c      	b.n	8001c68 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c1c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c26:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	2319      	movs	r3, #25
 8001c2e:	2201      	movs	r2, #1
 8001c30:	490f      	ldr	r1, [pc, #60]	; (8001c70 <HAL_I2C_IsDeviceReady+0x254>)
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f000 f8a2 	bl	8001d7c <I2C_WaitOnFlagUntilTimeout>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e012      	b.n	8001c68 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	3301      	adds	r3, #1
 8001c46:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	f4ff af32 	bcc.w	8001ab6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2220      	movs	r2, #32
 8001c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001c66:	2302      	movs	r3, #2
  }
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3720      	adds	r7, #32
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	00100002 	.word	0x00100002
 8001c74:	ffff0000 	.word	0xffff0000

08001c78 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b088      	sub	sp, #32
 8001c7c:	af02      	add	r7, sp, #8
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	607a      	str	r2, [r7, #4]
 8001c82:	603b      	str	r3, [r7, #0]
 8001c84:	460b      	mov	r3, r1
 8001c86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	d006      	beq.n	8001ca2 <I2C_MasterRequestWrite+0x2a>
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d003      	beq.n	8001ca2 <I2C_MasterRequestWrite+0x2a>
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ca0:	d108      	bne.n	8001cb4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	e00b      	b.n	8001ccc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb8:	2b12      	cmp	r3, #18
 8001cba:	d107      	bne.n	8001ccc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	f000 f84f 	bl	8001d7c <I2C_WaitOnFlagUntilTimeout>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d00d      	beq.n	8001d00 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cf2:	d103      	bne.n	8001cfc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cfa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e035      	b.n	8001d6c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d08:	d108      	bne.n	8001d1c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d0a:	897b      	ldrh	r3, [r7, #10]
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	461a      	mov	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d18:	611a      	str	r2, [r3, #16]
 8001d1a:	e01b      	b.n	8001d54 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d1c:	897b      	ldrh	r3, [r7, #10]
 8001d1e:	11db      	asrs	r3, r3, #7
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	f003 0306 	and.w	r3, r3, #6
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	f063 030f 	orn	r3, r3, #15
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	490e      	ldr	r1, [pc, #56]	; (8001d74 <I2C_MasterRequestWrite+0xfc>)
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 f875 	bl	8001e2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e010      	b.n	8001d6c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d4a:	897b      	ldrh	r3, [r7, #10]
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	4907      	ldr	r1, [pc, #28]	; (8001d78 <I2C_MasterRequestWrite+0x100>)
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f000 f865 	bl	8001e2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	00010008 	.word	0x00010008
 8001d78:	00010002 	.word	0x00010002

08001d7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d8c:	e025      	b.n	8001dda <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d94:	d021      	beq.n	8001dda <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d96:	f7ff f923 	bl	8000fe0 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d302      	bcc.n	8001dac <I2C_WaitOnFlagUntilTimeout+0x30>
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d116      	bne.n	8001dda <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2220      	movs	r2, #32
 8001db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	f043 0220 	orr.w	r2, r3, #32
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e023      	b.n	8001e22 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	0c1b      	lsrs	r3, r3, #16
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d10d      	bne.n	8001e00 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	43da      	mvns	r2, r3
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	4013      	ands	r3, r2
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	bf0c      	ite	eq
 8001df6:	2301      	moveq	r3, #1
 8001df8:	2300      	movne	r3, #0
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	e00c      	b.n	8001e1a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	43da      	mvns	r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	bf0c      	ite	eq
 8001e12:	2301      	moveq	r3, #1
 8001e14:	2300      	movne	r3, #0
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	461a      	mov	r2, r3
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d0b6      	beq.n	8001d8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b084      	sub	sp, #16
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	60f8      	str	r0, [r7, #12]
 8001e32:	60b9      	str	r1, [r7, #8]
 8001e34:	607a      	str	r2, [r7, #4]
 8001e36:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e38:	e051      	b.n	8001ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e48:	d123      	bne.n	8001e92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e58:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e62:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2220      	movs	r2, #32
 8001e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	f043 0204 	orr.w	r2, r3, #4
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e046      	b.n	8001f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e98:	d021      	beq.n	8001ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e9a:	f7ff f8a1 	bl	8000fe0 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d302      	bcc.n	8001eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d116      	bne.n	8001ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2220      	movs	r2, #32
 8001eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f043 0220 	orr.w	r2, r3, #32
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e020      	b.n	8001f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	0c1b      	lsrs	r3, r3, #16
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d10c      	bne.n	8001f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	43da      	mvns	r2, r3
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	bf14      	ite	ne
 8001efa:	2301      	movne	r3, #1
 8001efc:	2300      	moveq	r3, #0
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	e00b      	b.n	8001f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	43da      	mvns	r2, r3
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	bf14      	ite	ne
 8001f14:	2301      	movne	r3, #1
 8001f16:	2300      	moveq	r3, #0
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d18d      	bne.n	8001e3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f34:	e02d      	b.n	8001f92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f000 f878 	bl	800202c <I2C_IsAcknowledgeFailed>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e02d      	b.n	8001fa2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f4c:	d021      	beq.n	8001f92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f4e:	f7ff f847 	bl	8000fe0 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	68ba      	ldr	r2, [r7, #8]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d302      	bcc.n	8001f64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d116      	bne.n	8001f92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	f043 0220 	orr.w	r2, r3, #32
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e007      	b.n	8001fa2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f9c:	2b80      	cmp	r3, #128	; 0x80
 8001f9e:	d1ca      	bne.n	8001f36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b084      	sub	sp, #16
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	60f8      	str	r0, [r7, #12]
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001fb6:	e02d      	b.n	8002014 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f000 f837 	bl	800202c <I2C_IsAcknowledgeFailed>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e02d      	b.n	8002024 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fce:	d021      	beq.n	8002014 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fd0:	f7ff f806 	bl	8000fe0 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d302      	bcc.n	8001fe6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d116      	bne.n	8002014 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2220      	movs	r2, #32
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	f043 0220 	orr.w	r2, r3, #32
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e007      	b.n	8002024 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	f003 0304 	and.w	r3, r3, #4
 800201e:	2b04      	cmp	r3, #4
 8002020:	d1ca      	bne.n	8001fb8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800203e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002042:	d11b      	bne.n	800207c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800204c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2220      	movs	r2, #32
 8002058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002068:	f043 0204 	orr.w	r2, r3, #4
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e000      	b.n	800207e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr

08002088 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e26c      	b.n	8002574 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f000 8087 	beq.w	80021b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020a8:	4b92      	ldr	r3, [pc, #584]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 030c 	and.w	r3, r3, #12
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d00c      	beq.n	80020ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020b4:	4b8f      	ldr	r3, [pc, #572]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 030c 	and.w	r3, r3, #12
 80020bc:	2b08      	cmp	r3, #8
 80020be:	d112      	bne.n	80020e6 <HAL_RCC_OscConfig+0x5e>
 80020c0:	4b8c      	ldr	r3, [pc, #560]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020cc:	d10b      	bne.n	80020e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ce:	4b89      	ldr	r3, [pc, #548]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d06c      	beq.n	80021b4 <HAL_RCC_OscConfig+0x12c>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d168      	bne.n	80021b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e246      	b.n	8002574 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ee:	d106      	bne.n	80020fe <HAL_RCC_OscConfig+0x76>
 80020f0:	4b80      	ldr	r3, [pc, #512]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a7f      	ldr	r2, [pc, #508]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 80020f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020fa:	6013      	str	r3, [r2, #0]
 80020fc:	e02e      	b.n	800215c <HAL_RCC_OscConfig+0xd4>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10c      	bne.n	8002120 <HAL_RCC_OscConfig+0x98>
 8002106:	4b7b      	ldr	r3, [pc, #492]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a7a      	ldr	r2, [pc, #488]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 800210c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	4b78      	ldr	r3, [pc, #480]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a77      	ldr	r2, [pc, #476]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 8002118:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	e01d      	b.n	800215c <HAL_RCC_OscConfig+0xd4>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002128:	d10c      	bne.n	8002144 <HAL_RCC_OscConfig+0xbc>
 800212a:	4b72      	ldr	r3, [pc, #456]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a71      	ldr	r2, [pc, #452]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 8002130:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	4b6f      	ldr	r3, [pc, #444]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a6e      	ldr	r2, [pc, #440]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 800213c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	e00b      	b.n	800215c <HAL_RCC_OscConfig+0xd4>
 8002144:	4b6b      	ldr	r3, [pc, #428]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a6a      	ldr	r2, [pc, #424]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 800214a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	4b68      	ldr	r3, [pc, #416]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a67      	ldr	r2, [pc, #412]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 8002156:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800215a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d013      	beq.n	800218c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002164:	f7fe ff3c 	bl	8000fe0 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800216c:	f7fe ff38 	bl	8000fe0 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b64      	cmp	r3, #100	; 0x64
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e1fa      	b.n	8002574 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217e:	4b5d      	ldr	r3, [pc, #372]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCC_OscConfig+0xe4>
 800218a:	e014      	b.n	80021b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218c:	f7fe ff28 	bl	8000fe0 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002194:	f7fe ff24 	bl	8000fe0 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b64      	cmp	r3, #100	; 0x64
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e1e6      	b.n	8002574 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021a6:	4b53      	ldr	r3, [pc, #332]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f0      	bne.n	8002194 <HAL_RCC_OscConfig+0x10c>
 80021b2:	e000      	b.n	80021b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d063      	beq.n	800228a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021c2:	4b4c      	ldr	r3, [pc, #304]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 030c 	and.w	r3, r3, #12
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00b      	beq.n	80021e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021ce:	4b49      	ldr	r3, [pc, #292]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f003 030c 	and.w	r3, r3, #12
 80021d6:	2b08      	cmp	r3, #8
 80021d8:	d11c      	bne.n	8002214 <HAL_RCC_OscConfig+0x18c>
 80021da:	4b46      	ldr	r3, [pc, #280]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d116      	bne.n	8002214 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021e6:	4b43      	ldr	r3, [pc, #268]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d005      	beq.n	80021fe <HAL_RCC_OscConfig+0x176>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d001      	beq.n	80021fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e1ba      	b.n	8002574 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021fe:	4b3d      	ldr	r3, [pc, #244]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4939      	ldr	r1, [pc, #228]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 800220e:	4313      	orrs	r3, r2
 8002210:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002212:	e03a      	b.n	800228a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d020      	beq.n	800225e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800221c:	4b36      	ldr	r3, [pc, #216]	; (80022f8 <HAL_RCC_OscConfig+0x270>)
 800221e:	2201      	movs	r2, #1
 8002220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002222:	f7fe fedd 	bl	8000fe0 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800222a:	f7fe fed9 	bl	8000fe0 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e19b      	b.n	8002574 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223c:	4b2d      	ldr	r3, [pc, #180]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0f0      	beq.n	800222a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002248:	4b2a      	ldr	r3, [pc, #168]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	4927      	ldr	r1, [pc, #156]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 8002258:	4313      	orrs	r3, r2
 800225a:	600b      	str	r3, [r1, #0]
 800225c:	e015      	b.n	800228a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800225e:	4b26      	ldr	r3, [pc, #152]	; (80022f8 <HAL_RCC_OscConfig+0x270>)
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002264:	f7fe febc 	bl	8000fe0 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800226c:	f7fe feb8 	bl	8000fe0 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e17a      	b.n	8002574 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800227e:	4b1d      	ldr	r3, [pc, #116]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0308 	and.w	r3, r3, #8
 8002292:	2b00      	cmp	r3, #0
 8002294:	d03a      	beq.n	800230c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d019      	beq.n	80022d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800229e:	4b17      	ldr	r3, [pc, #92]	; (80022fc <HAL_RCC_OscConfig+0x274>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a4:	f7fe fe9c 	bl	8000fe0 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ac:	f7fe fe98 	bl	8000fe0 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e15a      	b.n	8002574 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022be:	4b0d      	ldr	r3, [pc, #52]	; (80022f4 <HAL_RCC_OscConfig+0x26c>)
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0f0      	beq.n	80022ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022ca:	2001      	movs	r0, #1
 80022cc:	f000 fada 	bl	8002884 <RCC_Delay>
 80022d0:	e01c      	b.n	800230c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022d2:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <HAL_RCC_OscConfig+0x274>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d8:	f7fe fe82 	bl	8000fe0 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022de:	e00f      	b.n	8002300 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e0:	f7fe fe7e 	bl	8000fe0 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d908      	bls.n	8002300 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e140      	b.n	8002574 <HAL_RCC_OscConfig+0x4ec>
 80022f2:	bf00      	nop
 80022f4:	40021000 	.word	0x40021000
 80022f8:	42420000 	.word	0x42420000
 80022fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002300:	4b9e      	ldr	r3, [pc, #632]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1e9      	bne.n	80022e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 80a6 	beq.w	8002466 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800231a:	2300      	movs	r3, #0
 800231c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800231e:	4b97      	ldr	r3, [pc, #604]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10d      	bne.n	8002346 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800232a:	4b94      	ldr	r3, [pc, #592]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	4a93      	ldr	r2, [pc, #588]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 8002330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002334:	61d3      	str	r3, [r2, #28]
 8002336:	4b91      	ldr	r3, [pc, #580]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233e:	60bb      	str	r3, [r7, #8]
 8002340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002342:	2301      	movs	r3, #1
 8002344:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002346:	4b8e      	ldr	r3, [pc, #568]	; (8002580 <HAL_RCC_OscConfig+0x4f8>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234e:	2b00      	cmp	r3, #0
 8002350:	d118      	bne.n	8002384 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002352:	4b8b      	ldr	r3, [pc, #556]	; (8002580 <HAL_RCC_OscConfig+0x4f8>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a8a      	ldr	r2, [pc, #552]	; (8002580 <HAL_RCC_OscConfig+0x4f8>)
 8002358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800235c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800235e:	f7fe fe3f 	bl	8000fe0 <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002364:	e008      	b.n	8002378 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002366:	f7fe fe3b 	bl	8000fe0 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b64      	cmp	r3, #100	; 0x64
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e0fd      	b.n	8002574 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002378:	4b81      	ldr	r3, [pc, #516]	; (8002580 <HAL_RCC_OscConfig+0x4f8>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0f0      	beq.n	8002366 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d106      	bne.n	800239a <HAL_RCC_OscConfig+0x312>
 800238c:	4b7b      	ldr	r3, [pc, #492]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	4a7a      	ldr	r2, [pc, #488]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 8002392:	f043 0301 	orr.w	r3, r3, #1
 8002396:	6213      	str	r3, [r2, #32]
 8002398:	e02d      	b.n	80023f6 <HAL_RCC_OscConfig+0x36e>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10c      	bne.n	80023bc <HAL_RCC_OscConfig+0x334>
 80023a2:	4b76      	ldr	r3, [pc, #472]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	4a75      	ldr	r2, [pc, #468]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 80023a8:	f023 0301 	bic.w	r3, r3, #1
 80023ac:	6213      	str	r3, [r2, #32]
 80023ae:	4b73      	ldr	r3, [pc, #460]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	4a72      	ldr	r2, [pc, #456]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 80023b4:	f023 0304 	bic.w	r3, r3, #4
 80023b8:	6213      	str	r3, [r2, #32]
 80023ba:	e01c      	b.n	80023f6 <HAL_RCC_OscConfig+0x36e>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	2b05      	cmp	r3, #5
 80023c2:	d10c      	bne.n	80023de <HAL_RCC_OscConfig+0x356>
 80023c4:	4b6d      	ldr	r3, [pc, #436]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	4a6c      	ldr	r2, [pc, #432]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 80023ca:	f043 0304 	orr.w	r3, r3, #4
 80023ce:	6213      	str	r3, [r2, #32]
 80023d0:	4b6a      	ldr	r3, [pc, #424]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	4a69      	ldr	r2, [pc, #420]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 80023d6:	f043 0301 	orr.w	r3, r3, #1
 80023da:	6213      	str	r3, [r2, #32]
 80023dc:	e00b      	b.n	80023f6 <HAL_RCC_OscConfig+0x36e>
 80023de:	4b67      	ldr	r3, [pc, #412]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	4a66      	ldr	r2, [pc, #408]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 80023e4:	f023 0301 	bic.w	r3, r3, #1
 80023e8:	6213      	str	r3, [r2, #32]
 80023ea:	4b64      	ldr	r3, [pc, #400]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	4a63      	ldr	r2, [pc, #396]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 80023f0:	f023 0304 	bic.w	r3, r3, #4
 80023f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d015      	beq.n	800242a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023fe:	f7fe fdef 	bl	8000fe0 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002404:	e00a      	b.n	800241c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002406:	f7fe fdeb 	bl	8000fe0 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	f241 3288 	movw	r2, #5000	; 0x1388
 8002414:	4293      	cmp	r3, r2
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e0ab      	b.n	8002574 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800241c:	4b57      	ldr	r3, [pc, #348]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0ee      	beq.n	8002406 <HAL_RCC_OscConfig+0x37e>
 8002428:	e014      	b.n	8002454 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800242a:	f7fe fdd9 	bl	8000fe0 <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002430:	e00a      	b.n	8002448 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002432:	f7fe fdd5 	bl	8000fe0 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002440:	4293      	cmp	r3, r2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e095      	b.n	8002574 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002448:	4b4c      	ldr	r3, [pc, #304]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1ee      	bne.n	8002432 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002454:	7dfb      	ldrb	r3, [r7, #23]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d105      	bne.n	8002466 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800245a:	4b48      	ldr	r3, [pc, #288]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	4a47      	ldr	r2, [pc, #284]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 8002460:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002464:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 8081 	beq.w	8002572 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002470:	4b42      	ldr	r3, [pc, #264]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 030c 	and.w	r3, r3, #12
 8002478:	2b08      	cmp	r3, #8
 800247a:	d061      	beq.n	8002540 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	69db      	ldr	r3, [r3, #28]
 8002480:	2b02      	cmp	r3, #2
 8002482:	d146      	bne.n	8002512 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002484:	4b3f      	ldr	r3, [pc, #252]	; (8002584 <HAL_RCC_OscConfig+0x4fc>)
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248a:	f7fe fda9 	bl	8000fe0 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002492:	f7fe fda5 	bl	8000fe0 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e067      	b.n	8002574 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a4:	4b35      	ldr	r3, [pc, #212]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1f0      	bne.n	8002492 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024b8:	d108      	bne.n	80024cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024ba:	4b30      	ldr	r3, [pc, #192]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	492d      	ldr	r1, [pc, #180]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024cc:	4b2b      	ldr	r3, [pc, #172]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a19      	ldr	r1, [r3, #32]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024dc:	430b      	orrs	r3, r1
 80024de:	4927      	ldr	r1, [pc, #156]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024e4:	4b27      	ldr	r3, [pc, #156]	; (8002584 <HAL_RCC_OscConfig+0x4fc>)
 80024e6:	2201      	movs	r2, #1
 80024e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ea:	f7fe fd79 	bl	8000fe0 <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f2:	f7fe fd75 	bl	8000fe0 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e037      	b.n	8002574 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002504:	4b1d      	ldr	r3, [pc, #116]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0f0      	beq.n	80024f2 <HAL_RCC_OscConfig+0x46a>
 8002510:	e02f      	b.n	8002572 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002512:	4b1c      	ldr	r3, [pc, #112]	; (8002584 <HAL_RCC_OscConfig+0x4fc>)
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002518:	f7fe fd62 	bl	8000fe0 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002520:	f7fe fd5e 	bl	8000fe0 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e020      	b.n	8002574 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002532:	4b12      	ldr	r3, [pc, #72]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0x498>
 800253e:	e018      	b.n	8002572 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	69db      	ldr	r3, [r3, #28]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d101      	bne.n	800254c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e013      	b.n	8002574 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800254c:	4b0b      	ldr	r3, [pc, #44]	; (800257c <HAL_RCC_OscConfig+0x4f4>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	429a      	cmp	r2, r3
 800255e:	d106      	bne.n	800256e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256a:	429a      	cmp	r2, r3
 800256c:	d001      	beq.n	8002572 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40021000 	.word	0x40021000
 8002580:	40007000 	.word	0x40007000
 8002584:	42420060 	.word	0x42420060

08002588 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e0d0      	b.n	800273e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800259c:	4b6a      	ldr	r3, [pc, #424]	; (8002748 <HAL_RCC_ClockConfig+0x1c0>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d910      	bls.n	80025cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025aa:	4b67      	ldr	r3, [pc, #412]	; (8002748 <HAL_RCC_ClockConfig+0x1c0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f023 0207 	bic.w	r2, r3, #7
 80025b2:	4965      	ldr	r1, [pc, #404]	; (8002748 <HAL_RCC_ClockConfig+0x1c0>)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ba:	4b63      	ldr	r3, [pc, #396]	; (8002748 <HAL_RCC_ClockConfig+0x1c0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d001      	beq.n	80025cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0b8      	b.n	800273e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d020      	beq.n	800261a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d005      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025e4:	4b59      	ldr	r3, [pc, #356]	; (800274c <HAL_RCC_ClockConfig+0x1c4>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	4a58      	ldr	r2, [pc, #352]	; (800274c <HAL_RCC_ClockConfig+0x1c4>)
 80025ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0308 	and.w	r3, r3, #8
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025fc:	4b53      	ldr	r3, [pc, #332]	; (800274c <HAL_RCC_ClockConfig+0x1c4>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	4a52      	ldr	r2, [pc, #328]	; (800274c <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002606:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002608:	4b50      	ldr	r3, [pc, #320]	; (800274c <HAL_RCC_ClockConfig+0x1c4>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	494d      	ldr	r1, [pc, #308]	; (800274c <HAL_RCC_ClockConfig+0x1c4>)
 8002616:	4313      	orrs	r3, r2
 8002618:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d040      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d107      	bne.n	800263e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262e:	4b47      	ldr	r3, [pc, #284]	; (800274c <HAL_RCC_ClockConfig+0x1c4>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d115      	bne.n	8002666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e07f      	b.n	800273e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b02      	cmp	r3, #2
 8002644:	d107      	bne.n	8002656 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002646:	4b41      	ldr	r3, [pc, #260]	; (800274c <HAL_RCC_ClockConfig+0x1c4>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d109      	bne.n	8002666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e073      	b.n	800273e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002656:	4b3d      	ldr	r3, [pc, #244]	; (800274c <HAL_RCC_ClockConfig+0x1c4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e06b      	b.n	800273e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002666:	4b39      	ldr	r3, [pc, #228]	; (800274c <HAL_RCC_ClockConfig+0x1c4>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f023 0203 	bic.w	r2, r3, #3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	4936      	ldr	r1, [pc, #216]	; (800274c <HAL_RCC_ClockConfig+0x1c4>)
 8002674:	4313      	orrs	r3, r2
 8002676:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002678:	f7fe fcb2 	bl	8000fe0 <HAL_GetTick>
 800267c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267e:	e00a      	b.n	8002696 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002680:	f7fe fcae 	bl	8000fe0 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	f241 3288 	movw	r2, #5000	; 0x1388
 800268e:	4293      	cmp	r3, r2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e053      	b.n	800273e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002696:	4b2d      	ldr	r3, [pc, #180]	; (800274c <HAL_RCC_ClockConfig+0x1c4>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f003 020c 	and.w	r2, r3, #12
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d1eb      	bne.n	8002680 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026a8:	4b27      	ldr	r3, [pc, #156]	; (8002748 <HAL_RCC_ClockConfig+0x1c0>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d210      	bcs.n	80026d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b6:	4b24      	ldr	r3, [pc, #144]	; (8002748 <HAL_RCC_ClockConfig+0x1c0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f023 0207 	bic.w	r2, r3, #7
 80026be:	4922      	ldr	r1, [pc, #136]	; (8002748 <HAL_RCC_ClockConfig+0x1c0>)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c6:	4b20      	ldr	r3, [pc, #128]	; (8002748 <HAL_RCC_ClockConfig+0x1c0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d001      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e032      	b.n	800273e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d008      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026e4:	4b19      	ldr	r3, [pc, #100]	; (800274c <HAL_RCC_ClockConfig+0x1c4>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	4916      	ldr	r1, [pc, #88]	; (800274c <HAL_RCC_ClockConfig+0x1c4>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d009      	beq.n	8002716 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002702:	4b12      	ldr	r3, [pc, #72]	; (800274c <HAL_RCC_ClockConfig+0x1c4>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	490e      	ldr	r1, [pc, #56]	; (800274c <HAL_RCC_ClockConfig+0x1c4>)
 8002712:	4313      	orrs	r3, r2
 8002714:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002716:	f000 f821 	bl	800275c <HAL_RCC_GetSysClockFreq>
 800271a:	4601      	mov	r1, r0
 800271c:	4b0b      	ldr	r3, [pc, #44]	; (800274c <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	091b      	lsrs	r3, r3, #4
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	4a0a      	ldr	r2, [pc, #40]	; (8002750 <HAL_RCC_ClockConfig+0x1c8>)
 8002728:	5cd3      	ldrb	r3, [r2, r3]
 800272a:	fa21 f303 	lsr.w	r3, r1, r3
 800272e:	4a09      	ldr	r2, [pc, #36]	; (8002754 <HAL_RCC_ClockConfig+0x1cc>)
 8002730:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002732:	4b09      	ldr	r3, [pc, #36]	; (8002758 <HAL_RCC_ClockConfig+0x1d0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f7fe fc10 	bl	8000f5c <HAL_InitTick>

  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40022000 	.word	0x40022000
 800274c:	40021000 	.word	0x40021000
 8002750:	08003cfc 	.word	0x08003cfc
 8002754:	20000044 	.word	0x20000044
 8002758:	20000048 	.word	0x20000048

0800275c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800275c:	b490      	push	{r4, r7}
 800275e:	b08a      	sub	sp, #40	; 0x28
 8002760:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002762:	4b2a      	ldr	r3, [pc, #168]	; (800280c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002764:	1d3c      	adds	r4, r7, #4
 8002766:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002768:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800276c:	4b28      	ldr	r3, [pc, #160]	; (8002810 <HAL_RCC_GetSysClockFreq+0xb4>)
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002772:	2300      	movs	r3, #0
 8002774:	61fb      	str	r3, [r7, #28]
 8002776:	2300      	movs	r3, #0
 8002778:	61bb      	str	r3, [r7, #24]
 800277a:	2300      	movs	r3, #0
 800277c:	627b      	str	r3, [r7, #36]	; 0x24
 800277e:	2300      	movs	r3, #0
 8002780:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002782:	2300      	movs	r3, #0
 8002784:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002786:	4b23      	ldr	r3, [pc, #140]	; (8002814 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	f003 030c 	and.w	r3, r3, #12
 8002792:	2b04      	cmp	r3, #4
 8002794:	d002      	beq.n	800279c <HAL_RCC_GetSysClockFreq+0x40>
 8002796:	2b08      	cmp	r3, #8
 8002798:	d003      	beq.n	80027a2 <HAL_RCC_GetSysClockFreq+0x46>
 800279a:	e02d      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800279c:	4b1e      	ldr	r3, [pc, #120]	; (8002818 <HAL_RCC_GetSysClockFreq+0xbc>)
 800279e:	623b      	str	r3, [r7, #32]
      break;
 80027a0:	e02d      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	0c9b      	lsrs	r3, r3, #18
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027ae:	4413      	add	r3, r2
 80027b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80027b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d013      	beq.n	80027e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027c0:	4b14      	ldr	r3, [pc, #80]	; (8002814 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	0c5b      	lsrs	r3, r3, #17
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027ce:	4413      	add	r3, r2
 80027d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80027d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	4a0f      	ldr	r2, [pc, #60]	; (8002818 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027da:	fb02 f203 	mul.w	r2, r2, r3
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
 80027e6:	e004      	b.n	80027f2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	4a0c      	ldr	r2, [pc, #48]	; (800281c <HAL_RCC_GetSysClockFreq+0xc0>)
 80027ec:	fb02 f303 	mul.w	r3, r2, r3
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	623b      	str	r3, [r7, #32]
      break;
 80027f6:	e002      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027f8:	4b07      	ldr	r3, [pc, #28]	; (8002818 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027fa:	623b      	str	r3, [r7, #32]
      break;
 80027fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027fe:	6a3b      	ldr	r3, [r7, #32]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3728      	adds	r7, #40	; 0x28
 8002804:	46bd      	mov	sp, r7
 8002806:	bc90      	pop	{r4, r7}
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	08003ce8 	.word	0x08003ce8
 8002810:	08003cf8 	.word	0x08003cf8
 8002814:	40021000 	.word	0x40021000
 8002818:	007a1200 	.word	0x007a1200
 800281c:	003d0900 	.word	0x003d0900

08002820 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002824:	4b02      	ldr	r3, [pc, #8]	; (8002830 <HAL_RCC_GetHCLKFreq+0x10>)
 8002826:	681b      	ldr	r3, [r3, #0]
}
 8002828:	4618      	mov	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	20000044 	.word	0x20000044

08002834 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002838:	f7ff fff2 	bl	8002820 <HAL_RCC_GetHCLKFreq>
 800283c:	4601      	mov	r1, r0
 800283e:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	0a1b      	lsrs	r3, r3, #8
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	4a03      	ldr	r2, [pc, #12]	; (8002858 <HAL_RCC_GetPCLK1Freq+0x24>)
 800284a:	5cd3      	ldrb	r3, [r2, r3]
 800284c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002850:	4618      	mov	r0, r3
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40021000 	.word	0x40021000
 8002858:	08003d0c 	.word	0x08003d0c

0800285c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002860:	f7ff ffde 	bl	8002820 <HAL_RCC_GetHCLKFreq>
 8002864:	4601      	mov	r1, r0
 8002866:	4b05      	ldr	r3, [pc, #20]	; (800287c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	0adb      	lsrs	r3, r3, #11
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	4a03      	ldr	r2, [pc, #12]	; (8002880 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002872:	5cd3      	ldrb	r3, [r2, r3]
 8002874:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002878:	4618      	mov	r0, r3
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40021000 	.word	0x40021000
 8002880:	08003d0c 	.word	0x08003d0c

08002884 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800288c:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <RCC_Delay+0x34>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a0a      	ldr	r2, [pc, #40]	; (80028bc <RCC_Delay+0x38>)
 8002892:	fba2 2303 	umull	r2, r3, r2, r3
 8002896:	0a5b      	lsrs	r3, r3, #9
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	fb02 f303 	mul.w	r3, r2, r3
 800289e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028a0:	bf00      	nop
  }
  while (Delay --);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	1e5a      	subs	r2, r3, #1
 80028a6:	60fa      	str	r2, [r7, #12]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1f9      	bne.n	80028a0 <RCC_Delay+0x1c>
}
 80028ac:	bf00      	nop
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	20000044 	.word	0x20000044
 80028bc:	10624dd3 	.word	0x10624dd3

080028c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e03f      	b.n	8002952 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fe f9f0 	bl	8000ccc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2224      	movs	r2, #36	; 0x24
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002902:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f9a7 	bl	8002c58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002918:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	695a      	ldr	r2, [r3, #20]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002928:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002938:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2220      	movs	r2, #32
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2220      	movs	r2, #32
 800294c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b08a      	sub	sp, #40	; 0x28
 800295e:	af02      	add	r7, sp, #8
 8002960:	60f8      	str	r0, [r7, #12]
 8002962:	60b9      	str	r1, [r7, #8]
 8002964:	603b      	str	r3, [r7, #0]
 8002966:	4613      	mov	r3, r2
 8002968:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800296a:	2300      	movs	r3, #0
 800296c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b20      	cmp	r3, #32
 8002978:	d17c      	bne.n	8002a74 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d002      	beq.n	8002986 <HAL_UART_Transmit+0x2c>
 8002980:	88fb      	ldrh	r3, [r7, #6]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e075      	b.n	8002a76 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <HAL_UART_Transmit+0x3e>
 8002994:	2302      	movs	r3, #2
 8002996:	e06e      	b.n	8002a76 <HAL_UART_Transmit+0x11c>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2221      	movs	r2, #33	; 0x21
 80029aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029ae:	f7fe fb17 	bl	8000fe0 <HAL_GetTick>
 80029b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	88fa      	ldrh	r2, [r7, #6]
 80029b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	88fa      	ldrh	r2, [r7, #6]
 80029be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c8:	d108      	bne.n	80029dc <HAL_UART_Transmit+0x82>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d104      	bne.n	80029dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	61bb      	str	r3, [r7, #24]
 80029da:	e003      	b.n	80029e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029e0:	2300      	movs	r3, #0
 80029e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80029ec:	e02a      	b.n	8002a44 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	2200      	movs	r2, #0
 80029f6:	2180      	movs	r1, #128	; 0x80
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f000 f8e2 	bl	8002bc2 <UART_WaitOnFlagUntilTimeout>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e036      	b.n	8002a76 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10b      	bne.n	8002a26 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	461a      	mov	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	3302      	adds	r3, #2
 8002a22:	61bb      	str	r3, [r7, #24]
 8002a24:	e007      	b.n	8002a36 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	781a      	ldrb	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	3301      	adds	r3, #1
 8002a34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1cf      	bne.n	80029ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	2200      	movs	r2, #0
 8002a56:	2140      	movs	r1, #64	; 0x40
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 f8b2 	bl	8002bc2 <UART_WaitOnFlagUntilTimeout>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e006      	b.n	8002a76 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a70:	2300      	movs	r3, #0
 8002a72:	e000      	b.n	8002a76 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a74:	2302      	movs	r3, #2
  }
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3720      	adds	r7, #32
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b08a      	sub	sp, #40	; 0x28
 8002a82:	af02      	add	r7, sp, #8
 8002a84:	60f8      	str	r0, [r7, #12]
 8002a86:	60b9      	str	r1, [r7, #8]
 8002a88:	603b      	str	r3, [r7, #0]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b20      	cmp	r3, #32
 8002a9c:	f040 808c 	bne.w	8002bb8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d002      	beq.n	8002aac <HAL_UART_Receive+0x2e>
 8002aa6:	88fb      	ldrh	r3, [r7, #6]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e084      	b.n	8002bba <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d101      	bne.n	8002abe <HAL_UART_Receive+0x40>
 8002aba:	2302      	movs	r3, #2
 8002abc:	e07d      	b.n	8002bba <HAL_UART_Receive+0x13c>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2222      	movs	r2, #34	; 0x22
 8002ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ada:	f7fe fa81 	bl	8000fe0 <HAL_GetTick>
 8002ade:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	88fa      	ldrh	r2, [r7, #6]
 8002ae4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	88fa      	ldrh	r2, [r7, #6]
 8002aea:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af4:	d108      	bne.n	8002b08 <HAL_UART_Receive+0x8a>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d104      	bne.n	8002b08 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	61bb      	str	r3, [r7, #24]
 8002b06:	e003      	b.n	8002b10 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002b18:	e043      	b.n	8002ba2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	2200      	movs	r2, #0
 8002b22:	2120      	movs	r1, #32
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 f84c 	bl	8002bc2 <UART_WaitOnFlagUntilTimeout>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e042      	b.n	8002bba <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10c      	bne.n	8002b54 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	3302      	adds	r3, #2
 8002b50:	61bb      	str	r3, [r7, #24]
 8002b52:	e01f      	b.n	8002b94 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b5c:	d007      	beq.n	8002b6e <HAL_UART_Receive+0xf0>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10a      	bne.n	8002b7c <HAL_UART_Receive+0xfe>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d106      	bne.n	8002b7c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	701a      	strb	r2, [r3, #0]
 8002b7a:	e008      	b.n	8002b8e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	3301      	adds	r3, #1
 8002b92:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1b6      	bne.n	8002b1a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	e000      	b.n	8002bba <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002bb8:	2302      	movs	r3, #2
  }
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3720      	adds	r7, #32
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b084      	sub	sp, #16
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	60f8      	str	r0, [r7, #12]
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	603b      	str	r3, [r7, #0]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bd2:	e02c      	b.n	8002c2e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bda:	d028      	beq.n	8002c2e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d007      	beq.n	8002bf2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002be2:	f7fe f9fd 	bl	8000fe0 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d21d      	bcs.n	8002c2e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002c00:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695a      	ldr	r2, [r3, #20]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0201 	bic.w	r2, r2, #1
 8002c10:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2220      	movs	r2, #32
 8002c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e00f      	b.n	8002c4e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	4013      	ands	r3, r2
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	bf0c      	ite	eq
 8002c3e:	2301      	moveq	r3, #1
 8002c40:	2300      	movne	r3, #0
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	461a      	mov	r2, r3
 8002c46:	79fb      	ldrb	r3, [r7, #7]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d0c3      	beq.n	8002bd4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68da      	ldr	r2, [r3, #12]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689a      	ldr	r2, [r3, #8]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c92:	f023 030c 	bic.w	r3, r3, #12
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6812      	ldr	r2, [r2, #0]
 8002c9a:	68b9      	ldr	r1, [r7, #8]
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	699a      	ldr	r2, [r3, #24]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a2c      	ldr	r2, [pc, #176]	; (8002d6c <UART_SetConfig+0x114>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d103      	bne.n	8002cc8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002cc0:	f7ff fdcc 	bl	800285c <HAL_RCC_GetPCLK2Freq>
 8002cc4:	60f8      	str	r0, [r7, #12]
 8002cc6:	e002      	b.n	8002cce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002cc8:	f7ff fdb4 	bl	8002834 <HAL_RCC_GetPCLK1Freq>
 8002ccc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	009a      	lsls	r2, r3, #2
 8002cd8:	441a      	add	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce4:	4a22      	ldr	r2, [pc, #136]	; (8002d70 <UART_SetConfig+0x118>)
 8002ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cea:	095b      	lsrs	r3, r3, #5
 8002cec:	0119      	lsls	r1, r3, #4
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	009a      	lsls	r2, r3, #2
 8002cf8:	441a      	add	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d04:	4b1a      	ldr	r3, [pc, #104]	; (8002d70 <UART_SetConfig+0x118>)
 8002d06:	fba3 0302 	umull	r0, r3, r3, r2
 8002d0a:	095b      	lsrs	r3, r3, #5
 8002d0c:	2064      	movs	r0, #100	; 0x64
 8002d0e:	fb00 f303 	mul.w	r3, r0, r3
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	3332      	adds	r3, #50	; 0x32
 8002d18:	4a15      	ldr	r2, [pc, #84]	; (8002d70 <UART_SetConfig+0x118>)
 8002d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d24:	4419      	add	r1, r3
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	009a      	lsls	r2, r3, #2
 8002d30:	441a      	add	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d3c:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <UART_SetConfig+0x118>)
 8002d3e:	fba3 0302 	umull	r0, r3, r3, r2
 8002d42:	095b      	lsrs	r3, r3, #5
 8002d44:	2064      	movs	r0, #100	; 0x64
 8002d46:	fb00 f303 	mul.w	r3, r0, r3
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	011b      	lsls	r3, r3, #4
 8002d4e:	3332      	adds	r3, #50	; 0x32
 8002d50:	4a07      	ldr	r2, [pc, #28]	; (8002d70 <UART_SetConfig+0x118>)
 8002d52:	fba2 2303 	umull	r2, r3, r2, r3
 8002d56:	095b      	lsrs	r3, r3, #5
 8002d58:	f003 020f 	and.w	r2, r3, #15
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	440a      	add	r2, r1
 8002d62:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d64:	bf00      	nop
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40013800 	.word	0x40013800
 8002d70:	51eb851f 	.word	0x51eb851f

08002d74 <__errno>:
 8002d74:	4b01      	ldr	r3, [pc, #4]	; (8002d7c <__errno+0x8>)
 8002d76:	6818      	ldr	r0, [r3, #0]
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	20000050 	.word	0x20000050

08002d80 <__libc_init_array>:
 8002d80:	b570      	push	{r4, r5, r6, lr}
 8002d82:	2500      	movs	r5, #0
 8002d84:	4e0c      	ldr	r6, [pc, #48]	; (8002db8 <__libc_init_array+0x38>)
 8002d86:	4c0d      	ldr	r4, [pc, #52]	; (8002dbc <__libc_init_array+0x3c>)
 8002d88:	1ba4      	subs	r4, r4, r6
 8002d8a:	10a4      	asrs	r4, r4, #2
 8002d8c:	42a5      	cmp	r5, r4
 8002d8e:	d109      	bne.n	8002da4 <__libc_init_array+0x24>
 8002d90:	f000 ff74 	bl	8003c7c <_init>
 8002d94:	2500      	movs	r5, #0
 8002d96:	4e0a      	ldr	r6, [pc, #40]	; (8002dc0 <__libc_init_array+0x40>)
 8002d98:	4c0a      	ldr	r4, [pc, #40]	; (8002dc4 <__libc_init_array+0x44>)
 8002d9a:	1ba4      	subs	r4, r4, r6
 8002d9c:	10a4      	asrs	r4, r4, #2
 8002d9e:	42a5      	cmp	r5, r4
 8002da0:	d105      	bne.n	8002dae <__libc_init_array+0x2e>
 8002da2:	bd70      	pop	{r4, r5, r6, pc}
 8002da4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002da8:	4798      	blx	r3
 8002daa:	3501      	adds	r5, #1
 8002dac:	e7ee      	b.n	8002d8c <__libc_init_array+0xc>
 8002dae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002db2:	4798      	blx	r3
 8002db4:	3501      	adds	r5, #1
 8002db6:	e7f2      	b.n	8002d9e <__libc_init_array+0x1e>
 8002db8:	08003dac 	.word	0x08003dac
 8002dbc:	08003dac 	.word	0x08003dac
 8002dc0:	08003dac 	.word	0x08003dac
 8002dc4:	08003db0 	.word	0x08003db0

08002dc8 <memset>:
 8002dc8:	4603      	mov	r3, r0
 8002dca:	4402      	add	r2, r0
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d100      	bne.n	8002dd2 <memset+0xa>
 8002dd0:	4770      	bx	lr
 8002dd2:	f803 1b01 	strb.w	r1, [r3], #1
 8002dd6:	e7f9      	b.n	8002dcc <memset+0x4>

08002dd8 <iprintf>:
 8002dd8:	b40f      	push	{r0, r1, r2, r3}
 8002dda:	4b0a      	ldr	r3, [pc, #40]	; (8002e04 <iprintf+0x2c>)
 8002ddc:	b513      	push	{r0, r1, r4, lr}
 8002dde:	681c      	ldr	r4, [r3, #0]
 8002de0:	b124      	cbz	r4, 8002dec <iprintf+0x14>
 8002de2:	69a3      	ldr	r3, [r4, #24]
 8002de4:	b913      	cbnz	r3, 8002dec <iprintf+0x14>
 8002de6:	4620      	mov	r0, r4
 8002de8:	f000 fa22 	bl	8003230 <__sinit>
 8002dec:	ab05      	add	r3, sp, #20
 8002dee:	9a04      	ldr	r2, [sp, #16]
 8002df0:	68a1      	ldr	r1, [r4, #8]
 8002df2:	4620      	mov	r0, r4
 8002df4:	9301      	str	r3, [sp, #4]
 8002df6:	f000 fbd7 	bl	80035a8 <_vfiprintf_r>
 8002dfa:	b002      	add	sp, #8
 8002dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e00:	b004      	add	sp, #16
 8002e02:	4770      	bx	lr
 8002e04:	20000050 	.word	0x20000050

08002e08 <_puts_r>:
 8002e08:	b570      	push	{r4, r5, r6, lr}
 8002e0a:	460e      	mov	r6, r1
 8002e0c:	4605      	mov	r5, r0
 8002e0e:	b118      	cbz	r0, 8002e18 <_puts_r+0x10>
 8002e10:	6983      	ldr	r3, [r0, #24]
 8002e12:	b90b      	cbnz	r3, 8002e18 <_puts_r+0x10>
 8002e14:	f000 fa0c 	bl	8003230 <__sinit>
 8002e18:	69ab      	ldr	r3, [r5, #24]
 8002e1a:	68ac      	ldr	r4, [r5, #8]
 8002e1c:	b913      	cbnz	r3, 8002e24 <_puts_r+0x1c>
 8002e1e:	4628      	mov	r0, r5
 8002e20:	f000 fa06 	bl	8003230 <__sinit>
 8002e24:	4b23      	ldr	r3, [pc, #140]	; (8002eb4 <_puts_r+0xac>)
 8002e26:	429c      	cmp	r4, r3
 8002e28:	d117      	bne.n	8002e5a <_puts_r+0x52>
 8002e2a:	686c      	ldr	r4, [r5, #4]
 8002e2c:	89a3      	ldrh	r3, [r4, #12]
 8002e2e:	071b      	lsls	r3, r3, #28
 8002e30:	d51d      	bpl.n	8002e6e <_puts_r+0x66>
 8002e32:	6923      	ldr	r3, [r4, #16]
 8002e34:	b1db      	cbz	r3, 8002e6e <_puts_r+0x66>
 8002e36:	3e01      	subs	r6, #1
 8002e38:	68a3      	ldr	r3, [r4, #8]
 8002e3a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	60a3      	str	r3, [r4, #8]
 8002e42:	b9e9      	cbnz	r1, 8002e80 <_puts_r+0x78>
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	da2e      	bge.n	8002ea6 <_puts_r+0x9e>
 8002e48:	4622      	mov	r2, r4
 8002e4a:	210a      	movs	r1, #10
 8002e4c:	4628      	mov	r0, r5
 8002e4e:	f000 f83f 	bl	8002ed0 <__swbuf_r>
 8002e52:	3001      	adds	r0, #1
 8002e54:	d011      	beq.n	8002e7a <_puts_r+0x72>
 8002e56:	200a      	movs	r0, #10
 8002e58:	e011      	b.n	8002e7e <_puts_r+0x76>
 8002e5a:	4b17      	ldr	r3, [pc, #92]	; (8002eb8 <_puts_r+0xb0>)
 8002e5c:	429c      	cmp	r4, r3
 8002e5e:	d101      	bne.n	8002e64 <_puts_r+0x5c>
 8002e60:	68ac      	ldr	r4, [r5, #8]
 8002e62:	e7e3      	b.n	8002e2c <_puts_r+0x24>
 8002e64:	4b15      	ldr	r3, [pc, #84]	; (8002ebc <_puts_r+0xb4>)
 8002e66:	429c      	cmp	r4, r3
 8002e68:	bf08      	it	eq
 8002e6a:	68ec      	ldreq	r4, [r5, #12]
 8002e6c:	e7de      	b.n	8002e2c <_puts_r+0x24>
 8002e6e:	4621      	mov	r1, r4
 8002e70:	4628      	mov	r0, r5
 8002e72:	f000 f87f 	bl	8002f74 <__swsetup_r>
 8002e76:	2800      	cmp	r0, #0
 8002e78:	d0dd      	beq.n	8002e36 <_puts_r+0x2e>
 8002e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e7e:	bd70      	pop	{r4, r5, r6, pc}
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	da04      	bge.n	8002e8e <_puts_r+0x86>
 8002e84:	69a2      	ldr	r2, [r4, #24]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	dc06      	bgt.n	8002e98 <_puts_r+0x90>
 8002e8a:	290a      	cmp	r1, #10
 8002e8c:	d004      	beq.n	8002e98 <_puts_r+0x90>
 8002e8e:	6823      	ldr	r3, [r4, #0]
 8002e90:	1c5a      	adds	r2, r3, #1
 8002e92:	6022      	str	r2, [r4, #0]
 8002e94:	7019      	strb	r1, [r3, #0]
 8002e96:	e7cf      	b.n	8002e38 <_puts_r+0x30>
 8002e98:	4622      	mov	r2, r4
 8002e9a:	4628      	mov	r0, r5
 8002e9c:	f000 f818 	bl	8002ed0 <__swbuf_r>
 8002ea0:	3001      	adds	r0, #1
 8002ea2:	d1c9      	bne.n	8002e38 <_puts_r+0x30>
 8002ea4:	e7e9      	b.n	8002e7a <_puts_r+0x72>
 8002ea6:	200a      	movs	r0, #10
 8002ea8:	6823      	ldr	r3, [r4, #0]
 8002eaa:	1c5a      	adds	r2, r3, #1
 8002eac:	6022      	str	r2, [r4, #0]
 8002eae:	7018      	strb	r0, [r3, #0]
 8002eb0:	e7e5      	b.n	8002e7e <_puts_r+0x76>
 8002eb2:	bf00      	nop
 8002eb4:	08003d38 	.word	0x08003d38
 8002eb8:	08003d58 	.word	0x08003d58
 8002ebc:	08003d18 	.word	0x08003d18

08002ec0 <puts>:
 8002ec0:	4b02      	ldr	r3, [pc, #8]	; (8002ecc <puts+0xc>)
 8002ec2:	4601      	mov	r1, r0
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	f7ff bf9f 	b.w	8002e08 <_puts_r>
 8002eca:	bf00      	nop
 8002ecc:	20000050 	.word	0x20000050

08002ed0 <__swbuf_r>:
 8002ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed2:	460e      	mov	r6, r1
 8002ed4:	4614      	mov	r4, r2
 8002ed6:	4605      	mov	r5, r0
 8002ed8:	b118      	cbz	r0, 8002ee2 <__swbuf_r+0x12>
 8002eda:	6983      	ldr	r3, [r0, #24]
 8002edc:	b90b      	cbnz	r3, 8002ee2 <__swbuf_r+0x12>
 8002ede:	f000 f9a7 	bl	8003230 <__sinit>
 8002ee2:	4b21      	ldr	r3, [pc, #132]	; (8002f68 <__swbuf_r+0x98>)
 8002ee4:	429c      	cmp	r4, r3
 8002ee6:	d12a      	bne.n	8002f3e <__swbuf_r+0x6e>
 8002ee8:	686c      	ldr	r4, [r5, #4]
 8002eea:	69a3      	ldr	r3, [r4, #24]
 8002eec:	60a3      	str	r3, [r4, #8]
 8002eee:	89a3      	ldrh	r3, [r4, #12]
 8002ef0:	071a      	lsls	r2, r3, #28
 8002ef2:	d52e      	bpl.n	8002f52 <__swbuf_r+0x82>
 8002ef4:	6923      	ldr	r3, [r4, #16]
 8002ef6:	b363      	cbz	r3, 8002f52 <__swbuf_r+0x82>
 8002ef8:	6923      	ldr	r3, [r4, #16]
 8002efa:	6820      	ldr	r0, [r4, #0]
 8002efc:	b2f6      	uxtb	r6, r6
 8002efe:	1ac0      	subs	r0, r0, r3
 8002f00:	6963      	ldr	r3, [r4, #20]
 8002f02:	4637      	mov	r7, r6
 8002f04:	4283      	cmp	r3, r0
 8002f06:	dc04      	bgt.n	8002f12 <__swbuf_r+0x42>
 8002f08:	4621      	mov	r1, r4
 8002f0a:	4628      	mov	r0, r5
 8002f0c:	f000 f926 	bl	800315c <_fflush_r>
 8002f10:	bb28      	cbnz	r0, 8002f5e <__swbuf_r+0x8e>
 8002f12:	68a3      	ldr	r3, [r4, #8]
 8002f14:	3001      	adds	r0, #1
 8002f16:	3b01      	subs	r3, #1
 8002f18:	60a3      	str	r3, [r4, #8]
 8002f1a:	6823      	ldr	r3, [r4, #0]
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	6022      	str	r2, [r4, #0]
 8002f20:	701e      	strb	r6, [r3, #0]
 8002f22:	6963      	ldr	r3, [r4, #20]
 8002f24:	4283      	cmp	r3, r0
 8002f26:	d004      	beq.n	8002f32 <__swbuf_r+0x62>
 8002f28:	89a3      	ldrh	r3, [r4, #12]
 8002f2a:	07db      	lsls	r3, r3, #31
 8002f2c:	d519      	bpl.n	8002f62 <__swbuf_r+0x92>
 8002f2e:	2e0a      	cmp	r6, #10
 8002f30:	d117      	bne.n	8002f62 <__swbuf_r+0x92>
 8002f32:	4621      	mov	r1, r4
 8002f34:	4628      	mov	r0, r5
 8002f36:	f000 f911 	bl	800315c <_fflush_r>
 8002f3a:	b190      	cbz	r0, 8002f62 <__swbuf_r+0x92>
 8002f3c:	e00f      	b.n	8002f5e <__swbuf_r+0x8e>
 8002f3e:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <__swbuf_r+0x9c>)
 8002f40:	429c      	cmp	r4, r3
 8002f42:	d101      	bne.n	8002f48 <__swbuf_r+0x78>
 8002f44:	68ac      	ldr	r4, [r5, #8]
 8002f46:	e7d0      	b.n	8002eea <__swbuf_r+0x1a>
 8002f48:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <__swbuf_r+0xa0>)
 8002f4a:	429c      	cmp	r4, r3
 8002f4c:	bf08      	it	eq
 8002f4e:	68ec      	ldreq	r4, [r5, #12]
 8002f50:	e7cb      	b.n	8002eea <__swbuf_r+0x1a>
 8002f52:	4621      	mov	r1, r4
 8002f54:	4628      	mov	r0, r5
 8002f56:	f000 f80d 	bl	8002f74 <__swsetup_r>
 8002f5a:	2800      	cmp	r0, #0
 8002f5c:	d0cc      	beq.n	8002ef8 <__swbuf_r+0x28>
 8002f5e:	f04f 37ff 	mov.w	r7, #4294967295
 8002f62:	4638      	mov	r0, r7
 8002f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f66:	bf00      	nop
 8002f68:	08003d38 	.word	0x08003d38
 8002f6c:	08003d58 	.word	0x08003d58
 8002f70:	08003d18 	.word	0x08003d18

08002f74 <__swsetup_r>:
 8002f74:	4b32      	ldr	r3, [pc, #200]	; (8003040 <__swsetup_r+0xcc>)
 8002f76:	b570      	push	{r4, r5, r6, lr}
 8002f78:	681d      	ldr	r5, [r3, #0]
 8002f7a:	4606      	mov	r6, r0
 8002f7c:	460c      	mov	r4, r1
 8002f7e:	b125      	cbz	r5, 8002f8a <__swsetup_r+0x16>
 8002f80:	69ab      	ldr	r3, [r5, #24]
 8002f82:	b913      	cbnz	r3, 8002f8a <__swsetup_r+0x16>
 8002f84:	4628      	mov	r0, r5
 8002f86:	f000 f953 	bl	8003230 <__sinit>
 8002f8a:	4b2e      	ldr	r3, [pc, #184]	; (8003044 <__swsetup_r+0xd0>)
 8002f8c:	429c      	cmp	r4, r3
 8002f8e:	d10f      	bne.n	8002fb0 <__swsetup_r+0x3c>
 8002f90:	686c      	ldr	r4, [r5, #4]
 8002f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	0715      	lsls	r5, r2, #28
 8002f9a:	d42c      	bmi.n	8002ff6 <__swsetup_r+0x82>
 8002f9c:	06d0      	lsls	r0, r2, #27
 8002f9e:	d411      	bmi.n	8002fc4 <__swsetup_r+0x50>
 8002fa0:	2209      	movs	r2, #9
 8002fa2:	6032      	str	r2, [r6, #0]
 8002fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fa8:	81a3      	strh	r3, [r4, #12]
 8002faa:	f04f 30ff 	mov.w	r0, #4294967295
 8002fae:	e03e      	b.n	800302e <__swsetup_r+0xba>
 8002fb0:	4b25      	ldr	r3, [pc, #148]	; (8003048 <__swsetup_r+0xd4>)
 8002fb2:	429c      	cmp	r4, r3
 8002fb4:	d101      	bne.n	8002fba <__swsetup_r+0x46>
 8002fb6:	68ac      	ldr	r4, [r5, #8]
 8002fb8:	e7eb      	b.n	8002f92 <__swsetup_r+0x1e>
 8002fba:	4b24      	ldr	r3, [pc, #144]	; (800304c <__swsetup_r+0xd8>)
 8002fbc:	429c      	cmp	r4, r3
 8002fbe:	bf08      	it	eq
 8002fc0:	68ec      	ldreq	r4, [r5, #12]
 8002fc2:	e7e6      	b.n	8002f92 <__swsetup_r+0x1e>
 8002fc4:	0751      	lsls	r1, r2, #29
 8002fc6:	d512      	bpl.n	8002fee <__swsetup_r+0x7a>
 8002fc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fca:	b141      	cbz	r1, 8002fde <__swsetup_r+0x6a>
 8002fcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002fd0:	4299      	cmp	r1, r3
 8002fd2:	d002      	beq.n	8002fda <__swsetup_r+0x66>
 8002fd4:	4630      	mov	r0, r6
 8002fd6:	f000 fa19 	bl	800340c <_free_r>
 8002fda:	2300      	movs	r3, #0
 8002fdc:	6363      	str	r3, [r4, #52]	; 0x34
 8002fde:	89a3      	ldrh	r3, [r4, #12]
 8002fe0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002fe4:	81a3      	strh	r3, [r4, #12]
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	6063      	str	r3, [r4, #4]
 8002fea:	6923      	ldr	r3, [r4, #16]
 8002fec:	6023      	str	r3, [r4, #0]
 8002fee:	89a3      	ldrh	r3, [r4, #12]
 8002ff0:	f043 0308 	orr.w	r3, r3, #8
 8002ff4:	81a3      	strh	r3, [r4, #12]
 8002ff6:	6923      	ldr	r3, [r4, #16]
 8002ff8:	b94b      	cbnz	r3, 800300e <__swsetup_r+0x9a>
 8002ffa:	89a3      	ldrh	r3, [r4, #12]
 8002ffc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003004:	d003      	beq.n	800300e <__swsetup_r+0x9a>
 8003006:	4621      	mov	r1, r4
 8003008:	4630      	mov	r0, r6
 800300a:	f000 f9bf 	bl	800338c <__smakebuf_r>
 800300e:	89a2      	ldrh	r2, [r4, #12]
 8003010:	f012 0301 	ands.w	r3, r2, #1
 8003014:	d00c      	beq.n	8003030 <__swsetup_r+0xbc>
 8003016:	2300      	movs	r3, #0
 8003018:	60a3      	str	r3, [r4, #8]
 800301a:	6963      	ldr	r3, [r4, #20]
 800301c:	425b      	negs	r3, r3
 800301e:	61a3      	str	r3, [r4, #24]
 8003020:	6923      	ldr	r3, [r4, #16]
 8003022:	b953      	cbnz	r3, 800303a <__swsetup_r+0xc6>
 8003024:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003028:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800302c:	d1ba      	bne.n	8002fa4 <__swsetup_r+0x30>
 800302e:	bd70      	pop	{r4, r5, r6, pc}
 8003030:	0792      	lsls	r2, r2, #30
 8003032:	bf58      	it	pl
 8003034:	6963      	ldrpl	r3, [r4, #20]
 8003036:	60a3      	str	r3, [r4, #8]
 8003038:	e7f2      	b.n	8003020 <__swsetup_r+0xac>
 800303a:	2000      	movs	r0, #0
 800303c:	e7f7      	b.n	800302e <__swsetup_r+0xba>
 800303e:	bf00      	nop
 8003040:	20000050 	.word	0x20000050
 8003044:	08003d38 	.word	0x08003d38
 8003048:	08003d58 	.word	0x08003d58
 800304c:	08003d18 	.word	0x08003d18

08003050 <__sflush_r>:
 8003050:	898a      	ldrh	r2, [r1, #12]
 8003052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003056:	4605      	mov	r5, r0
 8003058:	0710      	lsls	r0, r2, #28
 800305a:	460c      	mov	r4, r1
 800305c:	d458      	bmi.n	8003110 <__sflush_r+0xc0>
 800305e:	684b      	ldr	r3, [r1, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	dc05      	bgt.n	8003070 <__sflush_r+0x20>
 8003064:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003066:	2b00      	cmp	r3, #0
 8003068:	dc02      	bgt.n	8003070 <__sflush_r+0x20>
 800306a:	2000      	movs	r0, #0
 800306c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003070:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003072:	2e00      	cmp	r6, #0
 8003074:	d0f9      	beq.n	800306a <__sflush_r+0x1a>
 8003076:	2300      	movs	r3, #0
 8003078:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800307c:	682f      	ldr	r7, [r5, #0]
 800307e:	6a21      	ldr	r1, [r4, #32]
 8003080:	602b      	str	r3, [r5, #0]
 8003082:	d032      	beq.n	80030ea <__sflush_r+0x9a>
 8003084:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003086:	89a3      	ldrh	r3, [r4, #12]
 8003088:	075a      	lsls	r2, r3, #29
 800308a:	d505      	bpl.n	8003098 <__sflush_r+0x48>
 800308c:	6863      	ldr	r3, [r4, #4]
 800308e:	1ac0      	subs	r0, r0, r3
 8003090:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003092:	b10b      	cbz	r3, 8003098 <__sflush_r+0x48>
 8003094:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003096:	1ac0      	subs	r0, r0, r3
 8003098:	2300      	movs	r3, #0
 800309a:	4602      	mov	r2, r0
 800309c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800309e:	6a21      	ldr	r1, [r4, #32]
 80030a0:	4628      	mov	r0, r5
 80030a2:	47b0      	blx	r6
 80030a4:	1c43      	adds	r3, r0, #1
 80030a6:	89a3      	ldrh	r3, [r4, #12]
 80030a8:	d106      	bne.n	80030b8 <__sflush_r+0x68>
 80030aa:	6829      	ldr	r1, [r5, #0]
 80030ac:	291d      	cmp	r1, #29
 80030ae:	d848      	bhi.n	8003142 <__sflush_r+0xf2>
 80030b0:	4a29      	ldr	r2, [pc, #164]	; (8003158 <__sflush_r+0x108>)
 80030b2:	40ca      	lsrs	r2, r1
 80030b4:	07d6      	lsls	r6, r2, #31
 80030b6:	d544      	bpl.n	8003142 <__sflush_r+0xf2>
 80030b8:	2200      	movs	r2, #0
 80030ba:	6062      	str	r2, [r4, #4]
 80030bc:	6922      	ldr	r2, [r4, #16]
 80030be:	04d9      	lsls	r1, r3, #19
 80030c0:	6022      	str	r2, [r4, #0]
 80030c2:	d504      	bpl.n	80030ce <__sflush_r+0x7e>
 80030c4:	1c42      	adds	r2, r0, #1
 80030c6:	d101      	bne.n	80030cc <__sflush_r+0x7c>
 80030c8:	682b      	ldr	r3, [r5, #0]
 80030ca:	b903      	cbnz	r3, 80030ce <__sflush_r+0x7e>
 80030cc:	6560      	str	r0, [r4, #84]	; 0x54
 80030ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030d0:	602f      	str	r7, [r5, #0]
 80030d2:	2900      	cmp	r1, #0
 80030d4:	d0c9      	beq.n	800306a <__sflush_r+0x1a>
 80030d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80030da:	4299      	cmp	r1, r3
 80030dc:	d002      	beq.n	80030e4 <__sflush_r+0x94>
 80030de:	4628      	mov	r0, r5
 80030e0:	f000 f994 	bl	800340c <_free_r>
 80030e4:	2000      	movs	r0, #0
 80030e6:	6360      	str	r0, [r4, #52]	; 0x34
 80030e8:	e7c0      	b.n	800306c <__sflush_r+0x1c>
 80030ea:	2301      	movs	r3, #1
 80030ec:	4628      	mov	r0, r5
 80030ee:	47b0      	blx	r6
 80030f0:	1c41      	adds	r1, r0, #1
 80030f2:	d1c8      	bne.n	8003086 <__sflush_r+0x36>
 80030f4:	682b      	ldr	r3, [r5, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0c5      	beq.n	8003086 <__sflush_r+0x36>
 80030fa:	2b1d      	cmp	r3, #29
 80030fc:	d001      	beq.n	8003102 <__sflush_r+0xb2>
 80030fe:	2b16      	cmp	r3, #22
 8003100:	d101      	bne.n	8003106 <__sflush_r+0xb6>
 8003102:	602f      	str	r7, [r5, #0]
 8003104:	e7b1      	b.n	800306a <__sflush_r+0x1a>
 8003106:	89a3      	ldrh	r3, [r4, #12]
 8003108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800310c:	81a3      	strh	r3, [r4, #12]
 800310e:	e7ad      	b.n	800306c <__sflush_r+0x1c>
 8003110:	690f      	ldr	r7, [r1, #16]
 8003112:	2f00      	cmp	r7, #0
 8003114:	d0a9      	beq.n	800306a <__sflush_r+0x1a>
 8003116:	0793      	lsls	r3, r2, #30
 8003118:	bf18      	it	ne
 800311a:	2300      	movne	r3, #0
 800311c:	680e      	ldr	r6, [r1, #0]
 800311e:	bf08      	it	eq
 8003120:	694b      	ldreq	r3, [r1, #20]
 8003122:	eba6 0807 	sub.w	r8, r6, r7
 8003126:	600f      	str	r7, [r1, #0]
 8003128:	608b      	str	r3, [r1, #8]
 800312a:	f1b8 0f00 	cmp.w	r8, #0
 800312e:	dd9c      	ble.n	800306a <__sflush_r+0x1a>
 8003130:	4643      	mov	r3, r8
 8003132:	463a      	mov	r2, r7
 8003134:	6a21      	ldr	r1, [r4, #32]
 8003136:	4628      	mov	r0, r5
 8003138:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800313a:	47b0      	blx	r6
 800313c:	2800      	cmp	r0, #0
 800313e:	dc06      	bgt.n	800314e <__sflush_r+0xfe>
 8003140:	89a3      	ldrh	r3, [r4, #12]
 8003142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003146:	81a3      	strh	r3, [r4, #12]
 8003148:	f04f 30ff 	mov.w	r0, #4294967295
 800314c:	e78e      	b.n	800306c <__sflush_r+0x1c>
 800314e:	4407      	add	r7, r0
 8003150:	eba8 0800 	sub.w	r8, r8, r0
 8003154:	e7e9      	b.n	800312a <__sflush_r+0xda>
 8003156:	bf00      	nop
 8003158:	20400001 	.word	0x20400001

0800315c <_fflush_r>:
 800315c:	b538      	push	{r3, r4, r5, lr}
 800315e:	690b      	ldr	r3, [r1, #16]
 8003160:	4605      	mov	r5, r0
 8003162:	460c      	mov	r4, r1
 8003164:	b1db      	cbz	r3, 800319e <_fflush_r+0x42>
 8003166:	b118      	cbz	r0, 8003170 <_fflush_r+0x14>
 8003168:	6983      	ldr	r3, [r0, #24]
 800316a:	b90b      	cbnz	r3, 8003170 <_fflush_r+0x14>
 800316c:	f000 f860 	bl	8003230 <__sinit>
 8003170:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <_fflush_r+0x48>)
 8003172:	429c      	cmp	r4, r3
 8003174:	d109      	bne.n	800318a <_fflush_r+0x2e>
 8003176:	686c      	ldr	r4, [r5, #4]
 8003178:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800317c:	b17b      	cbz	r3, 800319e <_fflush_r+0x42>
 800317e:	4621      	mov	r1, r4
 8003180:	4628      	mov	r0, r5
 8003182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003186:	f7ff bf63 	b.w	8003050 <__sflush_r>
 800318a:	4b07      	ldr	r3, [pc, #28]	; (80031a8 <_fflush_r+0x4c>)
 800318c:	429c      	cmp	r4, r3
 800318e:	d101      	bne.n	8003194 <_fflush_r+0x38>
 8003190:	68ac      	ldr	r4, [r5, #8]
 8003192:	e7f1      	b.n	8003178 <_fflush_r+0x1c>
 8003194:	4b05      	ldr	r3, [pc, #20]	; (80031ac <_fflush_r+0x50>)
 8003196:	429c      	cmp	r4, r3
 8003198:	bf08      	it	eq
 800319a:	68ec      	ldreq	r4, [r5, #12]
 800319c:	e7ec      	b.n	8003178 <_fflush_r+0x1c>
 800319e:	2000      	movs	r0, #0
 80031a0:	bd38      	pop	{r3, r4, r5, pc}
 80031a2:	bf00      	nop
 80031a4:	08003d38 	.word	0x08003d38
 80031a8:	08003d58 	.word	0x08003d58
 80031ac:	08003d18 	.word	0x08003d18

080031b0 <std>:
 80031b0:	2300      	movs	r3, #0
 80031b2:	b510      	push	{r4, lr}
 80031b4:	4604      	mov	r4, r0
 80031b6:	e9c0 3300 	strd	r3, r3, [r0]
 80031ba:	6083      	str	r3, [r0, #8]
 80031bc:	8181      	strh	r1, [r0, #12]
 80031be:	6643      	str	r3, [r0, #100]	; 0x64
 80031c0:	81c2      	strh	r2, [r0, #14]
 80031c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80031c6:	6183      	str	r3, [r0, #24]
 80031c8:	4619      	mov	r1, r3
 80031ca:	2208      	movs	r2, #8
 80031cc:	305c      	adds	r0, #92	; 0x5c
 80031ce:	f7ff fdfb 	bl	8002dc8 <memset>
 80031d2:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <std+0x38>)
 80031d4:	6224      	str	r4, [r4, #32]
 80031d6:	6263      	str	r3, [r4, #36]	; 0x24
 80031d8:	4b04      	ldr	r3, [pc, #16]	; (80031ec <std+0x3c>)
 80031da:	62a3      	str	r3, [r4, #40]	; 0x28
 80031dc:	4b04      	ldr	r3, [pc, #16]	; (80031f0 <std+0x40>)
 80031de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80031e0:	4b04      	ldr	r3, [pc, #16]	; (80031f4 <std+0x44>)
 80031e2:	6323      	str	r3, [r4, #48]	; 0x30
 80031e4:	bd10      	pop	{r4, pc}
 80031e6:	bf00      	nop
 80031e8:	08003b05 	.word	0x08003b05
 80031ec:	08003b27 	.word	0x08003b27
 80031f0:	08003b5f 	.word	0x08003b5f
 80031f4:	08003b83 	.word	0x08003b83

080031f8 <_cleanup_r>:
 80031f8:	4901      	ldr	r1, [pc, #4]	; (8003200 <_cleanup_r+0x8>)
 80031fa:	f000 b885 	b.w	8003308 <_fwalk_reent>
 80031fe:	bf00      	nop
 8003200:	0800315d 	.word	0x0800315d

08003204 <__sfmoreglue>:
 8003204:	b570      	push	{r4, r5, r6, lr}
 8003206:	2568      	movs	r5, #104	; 0x68
 8003208:	1e4a      	subs	r2, r1, #1
 800320a:	4355      	muls	r5, r2
 800320c:	460e      	mov	r6, r1
 800320e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003212:	f000 f947 	bl	80034a4 <_malloc_r>
 8003216:	4604      	mov	r4, r0
 8003218:	b140      	cbz	r0, 800322c <__sfmoreglue+0x28>
 800321a:	2100      	movs	r1, #0
 800321c:	e9c0 1600 	strd	r1, r6, [r0]
 8003220:	300c      	adds	r0, #12
 8003222:	60a0      	str	r0, [r4, #8]
 8003224:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003228:	f7ff fdce 	bl	8002dc8 <memset>
 800322c:	4620      	mov	r0, r4
 800322e:	bd70      	pop	{r4, r5, r6, pc}

08003230 <__sinit>:
 8003230:	6983      	ldr	r3, [r0, #24]
 8003232:	b510      	push	{r4, lr}
 8003234:	4604      	mov	r4, r0
 8003236:	bb33      	cbnz	r3, 8003286 <__sinit+0x56>
 8003238:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800323c:	6503      	str	r3, [r0, #80]	; 0x50
 800323e:	4b12      	ldr	r3, [pc, #72]	; (8003288 <__sinit+0x58>)
 8003240:	4a12      	ldr	r2, [pc, #72]	; (800328c <__sinit+0x5c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6282      	str	r2, [r0, #40]	; 0x28
 8003246:	4298      	cmp	r0, r3
 8003248:	bf04      	itt	eq
 800324a:	2301      	moveq	r3, #1
 800324c:	6183      	streq	r3, [r0, #24]
 800324e:	f000 f81f 	bl	8003290 <__sfp>
 8003252:	6060      	str	r0, [r4, #4]
 8003254:	4620      	mov	r0, r4
 8003256:	f000 f81b 	bl	8003290 <__sfp>
 800325a:	60a0      	str	r0, [r4, #8]
 800325c:	4620      	mov	r0, r4
 800325e:	f000 f817 	bl	8003290 <__sfp>
 8003262:	2200      	movs	r2, #0
 8003264:	60e0      	str	r0, [r4, #12]
 8003266:	2104      	movs	r1, #4
 8003268:	6860      	ldr	r0, [r4, #4]
 800326a:	f7ff ffa1 	bl	80031b0 <std>
 800326e:	2201      	movs	r2, #1
 8003270:	2109      	movs	r1, #9
 8003272:	68a0      	ldr	r0, [r4, #8]
 8003274:	f7ff ff9c 	bl	80031b0 <std>
 8003278:	2202      	movs	r2, #2
 800327a:	2112      	movs	r1, #18
 800327c:	68e0      	ldr	r0, [r4, #12]
 800327e:	f7ff ff97 	bl	80031b0 <std>
 8003282:	2301      	movs	r3, #1
 8003284:	61a3      	str	r3, [r4, #24]
 8003286:	bd10      	pop	{r4, pc}
 8003288:	08003d14 	.word	0x08003d14
 800328c:	080031f9 	.word	0x080031f9

08003290 <__sfp>:
 8003290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003292:	4b1b      	ldr	r3, [pc, #108]	; (8003300 <__sfp+0x70>)
 8003294:	4607      	mov	r7, r0
 8003296:	681e      	ldr	r6, [r3, #0]
 8003298:	69b3      	ldr	r3, [r6, #24]
 800329a:	b913      	cbnz	r3, 80032a2 <__sfp+0x12>
 800329c:	4630      	mov	r0, r6
 800329e:	f7ff ffc7 	bl	8003230 <__sinit>
 80032a2:	3648      	adds	r6, #72	; 0x48
 80032a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80032a8:	3b01      	subs	r3, #1
 80032aa:	d503      	bpl.n	80032b4 <__sfp+0x24>
 80032ac:	6833      	ldr	r3, [r6, #0]
 80032ae:	b133      	cbz	r3, 80032be <__sfp+0x2e>
 80032b0:	6836      	ldr	r6, [r6, #0]
 80032b2:	e7f7      	b.n	80032a4 <__sfp+0x14>
 80032b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80032b8:	b16d      	cbz	r5, 80032d6 <__sfp+0x46>
 80032ba:	3468      	adds	r4, #104	; 0x68
 80032bc:	e7f4      	b.n	80032a8 <__sfp+0x18>
 80032be:	2104      	movs	r1, #4
 80032c0:	4638      	mov	r0, r7
 80032c2:	f7ff ff9f 	bl	8003204 <__sfmoreglue>
 80032c6:	6030      	str	r0, [r6, #0]
 80032c8:	2800      	cmp	r0, #0
 80032ca:	d1f1      	bne.n	80032b0 <__sfp+0x20>
 80032cc:	230c      	movs	r3, #12
 80032ce:	4604      	mov	r4, r0
 80032d0:	603b      	str	r3, [r7, #0]
 80032d2:	4620      	mov	r0, r4
 80032d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032d6:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <__sfp+0x74>)
 80032d8:	6665      	str	r5, [r4, #100]	; 0x64
 80032da:	e9c4 5500 	strd	r5, r5, [r4]
 80032de:	60a5      	str	r5, [r4, #8]
 80032e0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80032e4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80032e8:	2208      	movs	r2, #8
 80032ea:	4629      	mov	r1, r5
 80032ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80032f0:	f7ff fd6a 	bl	8002dc8 <memset>
 80032f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80032f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80032fc:	e7e9      	b.n	80032d2 <__sfp+0x42>
 80032fe:	bf00      	nop
 8003300:	08003d14 	.word	0x08003d14
 8003304:	ffff0001 	.word	0xffff0001

08003308 <_fwalk_reent>:
 8003308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800330c:	4680      	mov	r8, r0
 800330e:	4689      	mov	r9, r1
 8003310:	2600      	movs	r6, #0
 8003312:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003316:	b914      	cbnz	r4, 800331e <_fwalk_reent+0x16>
 8003318:	4630      	mov	r0, r6
 800331a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800331e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003322:	3f01      	subs	r7, #1
 8003324:	d501      	bpl.n	800332a <_fwalk_reent+0x22>
 8003326:	6824      	ldr	r4, [r4, #0]
 8003328:	e7f5      	b.n	8003316 <_fwalk_reent+0xe>
 800332a:	89ab      	ldrh	r3, [r5, #12]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d907      	bls.n	8003340 <_fwalk_reent+0x38>
 8003330:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003334:	3301      	adds	r3, #1
 8003336:	d003      	beq.n	8003340 <_fwalk_reent+0x38>
 8003338:	4629      	mov	r1, r5
 800333a:	4640      	mov	r0, r8
 800333c:	47c8      	blx	r9
 800333e:	4306      	orrs	r6, r0
 8003340:	3568      	adds	r5, #104	; 0x68
 8003342:	e7ee      	b.n	8003322 <_fwalk_reent+0x1a>

08003344 <__swhatbuf_r>:
 8003344:	b570      	push	{r4, r5, r6, lr}
 8003346:	460e      	mov	r6, r1
 8003348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800334c:	b096      	sub	sp, #88	; 0x58
 800334e:	2900      	cmp	r1, #0
 8003350:	4614      	mov	r4, r2
 8003352:	461d      	mov	r5, r3
 8003354:	da07      	bge.n	8003366 <__swhatbuf_r+0x22>
 8003356:	2300      	movs	r3, #0
 8003358:	602b      	str	r3, [r5, #0]
 800335a:	89b3      	ldrh	r3, [r6, #12]
 800335c:	061a      	lsls	r2, r3, #24
 800335e:	d410      	bmi.n	8003382 <__swhatbuf_r+0x3e>
 8003360:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003364:	e00e      	b.n	8003384 <__swhatbuf_r+0x40>
 8003366:	466a      	mov	r2, sp
 8003368:	f000 fc32 	bl	8003bd0 <_fstat_r>
 800336c:	2800      	cmp	r0, #0
 800336e:	dbf2      	blt.n	8003356 <__swhatbuf_r+0x12>
 8003370:	9a01      	ldr	r2, [sp, #4]
 8003372:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003376:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800337a:	425a      	negs	r2, r3
 800337c:	415a      	adcs	r2, r3
 800337e:	602a      	str	r2, [r5, #0]
 8003380:	e7ee      	b.n	8003360 <__swhatbuf_r+0x1c>
 8003382:	2340      	movs	r3, #64	; 0x40
 8003384:	2000      	movs	r0, #0
 8003386:	6023      	str	r3, [r4, #0]
 8003388:	b016      	add	sp, #88	; 0x58
 800338a:	bd70      	pop	{r4, r5, r6, pc}

0800338c <__smakebuf_r>:
 800338c:	898b      	ldrh	r3, [r1, #12]
 800338e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003390:	079d      	lsls	r5, r3, #30
 8003392:	4606      	mov	r6, r0
 8003394:	460c      	mov	r4, r1
 8003396:	d507      	bpl.n	80033a8 <__smakebuf_r+0x1c>
 8003398:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800339c:	6023      	str	r3, [r4, #0]
 800339e:	6123      	str	r3, [r4, #16]
 80033a0:	2301      	movs	r3, #1
 80033a2:	6163      	str	r3, [r4, #20]
 80033a4:	b002      	add	sp, #8
 80033a6:	bd70      	pop	{r4, r5, r6, pc}
 80033a8:	ab01      	add	r3, sp, #4
 80033aa:	466a      	mov	r2, sp
 80033ac:	f7ff ffca 	bl	8003344 <__swhatbuf_r>
 80033b0:	9900      	ldr	r1, [sp, #0]
 80033b2:	4605      	mov	r5, r0
 80033b4:	4630      	mov	r0, r6
 80033b6:	f000 f875 	bl	80034a4 <_malloc_r>
 80033ba:	b948      	cbnz	r0, 80033d0 <__smakebuf_r+0x44>
 80033bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033c0:	059a      	lsls	r2, r3, #22
 80033c2:	d4ef      	bmi.n	80033a4 <__smakebuf_r+0x18>
 80033c4:	f023 0303 	bic.w	r3, r3, #3
 80033c8:	f043 0302 	orr.w	r3, r3, #2
 80033cc:	81a3      	strh	r3, [r4, #12]
 80033ce:	e7e3      	b.n	8003398 <__smakebuf_r+0xc>
 80033d0:	4b0d      	ldr	r3, [pc, #52]	; (8003408 <__smakebuf_r+0x7c>)
 80033d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80033d4:	89a3      	ldrh	r3, [r4, #12]
 80033d6:	6020      	str	r0, [r4, #0]
 80033d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033dc:	81a3      	strh	r3, [r4, #12]
 80033de:	9b00      	ldr	r3, [sp, #0]
 80033e0:	6120      	str	r0, [r4, #16]
 80033e2:	6163      	str	r3, [r4, #20]
 80033e4:	9b01      	ldr	r3, [sp, #4]
 80033e6:	b15b      	cbz	r3, 8003400 <__smakebuf_r+0x74>
 80033e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033ec:	4630      	mov	r0, r6
 80033ee:	f000 fc01 	bl	8003bf4 <_isatty_r>
 80033f2:	b128      	cbz	r0, 8003400 <__smakebuf_r+0x74>
 80033f4:	89a3      	ldrh	r3, [r4, #12]
 80033f6:	f023 0303 	bic.w	r3, r3, #3
 80033fa:	f043 0301 	orr.w	r3, r3, #1
 80033fe:	81a3      	strh	r3, [r4, #12]
 8003400:	89a3      	ldrh	r3, [r4, #12]
 8003402:	431d      	orrs	r5, r3
 8003404:	81a5      	strh	r5, [r4, #12]
 8003406:	e7cd      	b.n	80033a4 <__smakebuf_r+0x18>
 8003408:	080031f9 	.word	0x080031f9

0800340c <_free_r>:
 800340c:	b538      	push	{r3, r4, r5, lr}
 800340e:	4605      	mov	r5, r0
 8003410:	2900      	cmp	r1, #0
 8003412:	d043      	beq.n	800349c <_free_r+0x90>
 8003414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003418:	1f0c      	subs	r4, r1, #4
 800341a:	2b00      	cmp	r3, #0
 800341c:	bfb8      	it	lt
 800341e:	18e4      	addlt	r4, r4, r3
 8003420:	f000 fc18 	bl	8003c54 <__malloc_lock>
 8003424:	4a1e      	ldr	r2, [pc, #120]	; (80034a0 <_free_r+0x94>)
 8003426:	6813      	ldr	r3, [r2, #0]
 8003428:	4610      	mov	r0, r2
 800342a:	b933      	cbnz	r3, 800343a <_free_r+0x2e>
 800342c:	6063      	str	r3, [r4, #4]
 800342e:	6014      	str	r4, [r2, #0]
 8003430:	4628      	mov	r0, r5
 8003432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003436:	f000 bc0e 	b.w	8003c56 <__malloc_unlock>
 800343a:	42a3      	cmp	r3, r4
 800343c:	d90b      	bls.n	8003456 <_free_r+0x4a>
 800343e:	6821      	ldr	r1, [r4, #0]
 8003440:	1862      	adds	r2, r4, r1
 8003442:	4293      	cmp	r3, r2
 8003444:	bf01      	itttt	eq
 8003446:	681a      	ldreq	r2, [r3, #0]
 8003448:	685b      	ldreq	r3, [r3, #4]
 800344a:	1852      	addeq	r2, r2, r1
 800344c:	6022      	streq	r2, [r4, #0]
 800344e:	6063      	str	r3, [r4, #4]
 8003450:	6004      	str	r4, [r0, #0]
 8003452:	e7ed      	b.n	8003430 <_free_r+0x24>
 8003454:	4613      	mov	r3, r2
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	b10a      	cbz	r2, 800345e <_free_r+0x52>
 800345a:	42a2      	cmp	r2, r4
 800345c:	d9fa      	bls.n	8003454 <_free_r+0x48>
 800345e:	6819      	ldr	r1, [r3, #0]
 8003460:	1858      	adds	r0, r3, r1
 8003462:	42a0      	cmp	r0, r4
 8003464:	d10b      	bne.n	800347e <_free_r+0x72>
 8003466:	6820      	ldr	r0, [r4, #0]
 8003468:	4401      	add	r1, r0
 800346a:	1858      	adds	r0, r3, r1
 800346c:	4282      	cmp	r2, r0
 800346e:	6019      	str	r1, [r3, #0]
 8003470:	d1de      	bne.n	8003430 <_free_r+0x24>
 8003472:	6810      	ldr	r0, [r2, #0]
 8003474:	6852      	ldr	r2, [r2, #4]
 8003476:	4401      	add	r1, r0
 8003478:	6019      	str	r1, [r3, #0]
 800347a:	605a      	str	r2, [r3, #4]
 800347c:	e7d8      	b.n	8003430 <_free_r+0x24>
 800347e:	d902      	bls.n	8003486 <_free_r+0x7a>
 8003480:	230c      	movs	r3, #12
 8003482:	602b      	str	r3, [r5, #0]
 8003484:	e7d4      	b.n	8003430 <_free_r+0x24>
 8003486:	6820      	ldr	r0, [r4, #0]
 8003488:	1821      	adds	r1, r4, r0
 800348a:	428a      	cmp	r2, r1
 800348c:	bf01      	itttt	eq
 800348e:	6811      	ldreq	r1, [r2, #0]
 8003490:	6852      	ldreq	r2, [r2, #4]
 8003492:	1809      	addeq	r1, r1, r0
 8003494:	6021      	streq	r1, [r4, #0]
 8003496:	6062      	str	r2, [r4, #4]
 8003498:	605c      	str	r4, [r3, #4]
 800349a:	e7c9      	b.n	8003430 <_free_r+0x24>
 800349c:	bd38      	pop	{r3, r4, r5, pc}
 800349e:	bf00      	nop
 80034a0:	200000d8 	.word	0x200000d8

080034a4 <_malloc_r>:
 80034a4:	b570      	push	{r4, r5, r6, lr}
 80034a6:	1ccd      	adds	r5, r1, #3
 80034a8:	f025 0503 	bic.w	r5, r5, #3
 80034ac:	3508      	adds	r5, #8
 80034ae:	2d0c      	cmp	r5, #12
 80034b0:	bf38      	it	cc
 80034b2:	250c      	movcc	r5, #12
 80034b4:	2d00      	cmp	r5, #0
 80034b6:	4606      	mov	r6, r0
 80034b8:	db01      	blt.n	80034be <_malloc_r+0x1a>
 80034ba:	42a9      	cmp	r1, r5
 80034bc:	d903      	bls.n	80034c6 <_malloc_r+0x22>
 80034be:	230c      	movs	r3, #12
 80034c0:	6033      	str	r3, [r6, #0]
 80034c2:	2000      	movs	r0, #0
 80034c4:	bd70      	pop	{r4, r5, r6, pc}
 80034c6:	f000 fbc5 	bl	8003c54 <__malloc_lock>
 80034ca:	4a21      	ldr	r2, [pc, #132]	; (8003550 <_malloc_r+0xac>)
 80034cc:	6814      	ldr	r4, [r2, #0]
 80034ce:	4621      	mov	r1, r4
 80034d0:	b991      	cbnz	r1, 80034f8 <_malloc_r+0x54>
 80034d2:	4c20      	ldr	r4, [pc, #128]	; (8003554 <_malloc_r+0xb0>)
 80034d4:	6823      	ldr	r3, [r4, #0]
 80034d6:	b91b      	cbnz	r3, 80034e0 <_malloc_r+0x3c>
 80034d8:	4630      	mov	r0, r6
 80034da:	f000 fb03 	bl	8003ae4 <_sbrk_r>
 80034de:	6020      	str	r0, [r4, #0]
 80034e0:	4629      	mov	r1, r5
 80034e2:	4630      	mov	r0, r6
 80034e4:	f000 fafe 	bl	8003ae4 <_sbrk_r>
 80034e8:	1c43      	adds	r3, r0, #1
 80034ea:	d124      	bne.n	8003536 <_malloc_r+0x92>
 80034ec:	230c      	movs	r3, #12
 80034ee:	4630      	mov	r0, r6
 80034f0:	6033      	str	r3, [r6, #0]
 80034f2:	f000 fbb0 	bl	8003c56 <__malloc_unlock>
 80034f6:	e7e4      	b.n	80034c2 <_malloc_r+0x1e>
 80034f8:	680b      	ldr	r3, [r1, #0]
 80034fa:	1b5b      	subs	r3, r3, r5
 80034fc:	d418      	bmi.n	8003530 <_malloc_r+0x8c>
 80034fe:	2b0b      	cmp	r3, #11
 8003500:	d90f      	bls.n	8003522 <_malloc_r+0x7e>
 8003502:	600b      	str	r3, [r1, #0]
 8003504:	18cc      	adds	r4, r1, r3
 8003506:	50cd      	str	r5, [r1, r3]
 8003508:	4630      	mov	r0, r6
 800350a:	f000 fba4 	bl	8003c56 <__malloc_unlock>
 800350e:	f104 000b 	add.w	r0, r4, #11
 8003512:	1d23      	adds	r3, r4, #4
 8003514:	f020 0007 	bic.w	r0, r0, #7
 8003518:	1ac3      	subs	r3, r0, r3
 800351a:	d0d3      	beq.n	80034c4 <_malloc_r+0x20>
 800351c:	425a      	negs	r2, r3
 800351e:	50e2      	str	r2, [r4, r3]
 8003520:	e7d0      	b.n	80034c4 <_malloc_r+0x20>
 8003522:	684b      	ldr	r3, [r1, #4]
 8003524:	428c      	cmp	r4, r1
 8003526:	bf16      	itet	ne
 8003528:	6063      	strne	r3, [r4, #4]
 800352a:	6013      	streq	r3, [r2, #0]
 800352c:	460c      	movne	r4, r1
 800352e:	e7eb      	b.n	8003508 <_malloc_r+0x64>
 8003530:	460c      	mov	r4, r1
 8003532:	6849      	ldr	r1, [r1, #4]
 8003534:	e7cc      	b.n	80034d0 <_malloc_r+0x2c>
 8003536:	1cc4      	adds	r4, r0, #3
 8003538:	f024 0403 	bic.w	r4, r4, #3
 800353c:	42a0      	cmp	r0, r4
 800353e:	d005      	beq.n	800354c <_malloc_r+0xa8>
 8003540:	1a21      	subs	r1, r4, r0
 8003542:	4630      	mov	r0, r6
 8003544:	f000 face 	bl	8003ae4 <_sbrk_r>
 8003548:	3001      	adds	r0, #1
 800354a:	d0cf      	beq.n	80034ec <_malloc_r+0x48>
 800354c:	6025      	str	r5, [r4, #0]
 800354e:	e7db      	b.n	8003508 <_malloc_r+0x64>
 8003550:	200000d8 	.word	0x200000d8
 8003554:	200000dc 	.word	0x200000dc

08003558 <__sfputc_r>:
 8003558:	6893      	ldr	r3, [r2, #8]
 800355a:	b410      	push	{r4}
 800355c:	3b01      	subs	r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	6093      	str	r3, [r2, #8]
 8003562:	da07      	bge.n	8003574 <__sfputc_r+0x1c>
 8003564:	6994      	ldr	r4, [r2, #24]
 8003566:	42a3      	cmp	r3, r4
 8003568:	db01      	blt.n	800356e <__sfputc_r+0x16>
 800356a:	290a      	cmp	r1, #10
 800356c:	d102      	bne.n	8003574 <__sfputc_r+0x1c>
 800356e:	bc10      	pop	{r4}
 8003570:	f7ff bcae 	b.w	8002ed0 <__swbuf_r>
 8003574:	6813      	ldr	r3, [r2, #0]
 8003576:	1c58      	adds	r0, r3, #1
 8003578:	6010      	str	r0, [r2, #0]
 800357a:	7019      	strb	r1, [r3, #0]
 800357c:	4608      	mov	r0, r1
 800357e:	bc10      	pop	{r4}
 8003580:	4770      	bx	lr

08003582 <__sfputs_r>:
 8003582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003584:	4606      	mov	r6, r0
 8003586:	460f      	mov	r7, r1
 8003588:	4614      	mov	r4, r2
 800358a:	18d5      	adds	r5, r2, r3
 800358c:	42ac      	cmp	r4, r5
 800358e:	d101      	bne.n	8003594 <__sfputs_r+0x12>
 8003590:	2000      	movs	r0, #0
 8003592:	e007      	b.n	80035a4 <__sfputs_r+0x22>
 8003594:	463a      	mov	r2, r7
 8003596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800359a:	4630      	mov	r0, r6
 800359c:	f7ff ffdc 	bl	8003558 <__sfputc_r>
 80035a0:	1c43      	adds	r3, r0, #1
 80035a2:	d1f3      	bne.n	800358c <__sfputs_r+0xa>
 80035a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080035a8 <_vfiprintf_r>:
 80035a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035ac:	460c      	mov	r4, r1
 80035ae:	b09d      	sub	sp, #116	; 0x74
 80035b0:	4617      	mov	r7, r2
 80035b2:	461d      	mov	r5, r3
 80035b4:	4606      	mov	r6, r0
 80035b6:	b118      	cbz	r0, 80035c0 <_vfiprintf_r+0x18>
 80035b8:	6983      	ldr	r3, [r0, #24]
 80035ba:	b90b      	cbnz	r3, 80035c0 <_vfiprintf_r+0x18>
 80035bc:	f7ff fe38 	bl	8003230 <__sinit>
 80035c0:	4b7c      	ldr	r3, [pc, #496]	; (80037b4 <_vfiprintf_r+0x20c>)
 80035c2:	429c      	cmp	r4, r3
 80035c4:	d158      	bne.n	8003678 <_vfiprintf_r+0xd0>
 80035c6:	6874      	ldr	r4, [r6, #4]
 80035c8:	89a3      	ldrh	r3, [r4, #12]
 80035ca:	0718      	lsls	r0, r3, #28
 80035cc:	d55e      	bpl.n	800368c <_vfiprintf_r+0xe4>
 80035ce:	6923      	ldr	r3, [r4, #16]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d05b      	beq.n	800368c <_vfiprintf_r+0xe4>
 80035d4:	2300      	movs	r3, #0
 80035d6:	9309      	str	r3, [sp, #36]	; 0x24
 80035d8:	2320      	movs	r3, #32
 80035da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035de:	2330      	movs	r3, #48	; 0x30
 80035e0:	f04f 0b01 	mov.w	fp, #1
 80035e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035e8:	9503      	str	r5, [sp, #12]
 80035ea:	46b8      	mov	r8, r7
 80035ec:	4645      	mov	r5, r8
 80035ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80035f2:	b10b      	cbz	r3, 80035f8 <_vfiprintf_r+0x50>
 80035f4:	2b25      	cmp	r3, #37	; 0x25
 80035f6:	d154      	bne.n	80036a2 <_vfiprintf_r+0xfa>
 80035f8:	ebb8 0a07 	subs.w	sl, r8, r7
 80035fc:	d00b      	beq.n	8003616 <_vfiprintf_r+0x6e>
 80035fe:	4653      	mov	r3, sl
 8003600:	463a      	mov	r2, r7
 8003602:	4621      	mov	r1, r4
 8003604:	4630      	mov	r0, r6
 8003606:	f7ff ffbc 	bl	8003582 <__sfputs_r>
 800360a:	3001      	adds	r0, #1
 800360c:	f000 80c2 	beq.w	8003794 <_vfiprintf_r+0x1ec>
 8003610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003612:	4453      	add	r3, sl
 8003614:	9309      	str	r3, [sp, #36]	; 0x24
 8003616:	f898 3000 	ldrb.w	r3, [r8]
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 80ba 	beq.w	8003794 <_vfiprintf_r+0x1ec>
 8003620:	2300      	movs	r3, #0
 8003622:	f04f 32ff 	mov.w	r2, #4294967295
 8003626:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800362a:	9304      	str	r3, [sp, #16]
 800362c:	9307      	str	r3, [sp, #28]
 800362e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003632:	931a      	str	r3, [sp, #104]	; 0x68
 8003634:	46a8      	mov	r8, r5
 8003636:	2205      	movs	r2, #5
 8003638:	f818 1b01 	ldrb.w	r1, [r8], #1
 800363c:	485e      	ldr	r0, [pc, #376]	; (80037b8 <_vfiprintf_r+0x210>)
 800363e:	f000 fafb 	bl	8003c38 <memchr>
 8003642:	9b04      	ldr	r3, [sp, #16]
 8003644:	bb78      	cbnz	r0, 80036a6 <_vfiprintf_r+0xfe>
 8003646:	06d9      	lsls	r1, r3, #27
 8003648:	bf44      	itt	mi
 800364a:	2220      	movmi	r2, #32
 800364c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003650:	071a      	lsls	r2, r3, #28
 8003652:	bf44      	itt	mi
 8003654:	222b      	movmi	r2, #43	; 0x2b
 8003656:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800365a:	782a      	ldrb	r2, [r5, #0]
 800365c:	2a2a      	cmp	r2, #42	; 0x2a
 800365e:	d02a      	beq.n	80036b6 <_vfiprintf_r+0x10e>
 8003660:	46a8      	mov	r8, r5
 8003662:	2000      	movs	r0, #0
 8003664:	250a      	movs	r5, #10
 8003666:	9a07      	ldr	r2, [sp, #28]
 8003668:	4641      	mov	r1, r8
 800366a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800366e:	3b30      	subs	r3, #48	; 0x30
 8003670:	2b09      	cmp	r3, #9
 8003672:	d969      	bls.n	8003748 <_vfiprintf_r+0x1a0>
 8003674:	b360      	cbz	r0, 80036d0 <_vfiprintf_r+0x128>
 8003676:	e024      	b.n	80036c2 <_vfiprintf_r+0x11a>
 8003678:	4b50      	ldr	r3, [pc, #320]	; (80037bc <_vfiprintf_r+0x214>)
 800367a:	429c      	cmp	r4, r3
 800367c:	d101      	bne.n	8003682 <_vfiprintf_r+0xda>
 800367e:	68b4      	ldr	r4, [r6, #8]
 8003680:	e7a2      	b.n	80035c8 <_vfiprintf_r+0x20>
 8003682:	4b4f      	ldr	r3, [pc, #316]	; (80037c0 <_vfiprintf_r+0x218>)
 8003684:	429c      	cmp	r4, r3
 8003686:	bf08      	it	eq
 8003688:	68f4      	ldreq	r4, [r6, #12]
 800368a:	e79d      	b.n	80035c8 <_vfiprintf_r+0x20>
 800368c:	4621      	mov	r1, r4
 800368e:	4630      	mov	r0, r6
 8003690:	f7ff fc70 	bl	8002f74 <__swsetup_r>
 8003694:	2800      	cmp	r0, #0
 8003696:	d09d      	beq.n	80035d4 <_vfiprintf_r+0x2c>
 8003698:	f04f 30ff 	mov.w	r0, #4294967295
 800369c:	b01d      	add	sp, #116	; 0x74
 800369e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036a2:	46a8      	mov	r8, r5
 80036a4:	e7a2      	b.n	80035ec <_vfiprintf_r+0x44>
 80036a6:	4a44      	ldr	r2, [pc, #272]	; (80037b8 <_vfiprintf_r+0x210>)
 80036a8:	4645      	mov	r5, r8
 80036aa:	1a80      	subs	r0, r0, r2
 80036ac:	fa0b f000 	lsl.w	r0, fp, r0
 80036b0:	4318      	orrs	r0, r3
 80036b2:	9004      	str	r0, [sp, #16]
 80036b4:	e7be      	b.n	8003634 <_vfiprintf_r+0x8c>
 80036b6:	9a03      	ldr	r2, [sp, #12]
 80036b8:	1d11      	adds	r1, r2, #4
 80036ba:	6812      	ldr	r2, [r2, #0]
 80036bc:	9103      	str	r1, [sp, #12]
 80036be:	2a00      	cmp	r2, #0
 80036c0:	db01      	blt.n	80036c6 <_vfiprintf_r+0x11e>
 80036c2:	9207      	str	r2, [sp, #28]
 80036c4:	e004      	b.n	80036d0 <_vfiprintf_r+0x128>
 80036c6:	4252      	negs	r2, r2
 80036c8:	f043 0302 	orr.w	r3, r3, #2
 80036cc:	9207      	str	r2, [sp, #28]
 80036ce:	9304      	str	r3, [sp, #16]
 80036d0:	f898 3000 	ldrb.w	r3, [r8]
 80036d4:	2b2e      	cmp	r3, #46	; 0x2e
 80036d6:	d10e      	bne.n	80036f6 <_vfiprintf_r+0x14e>
 80036d8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80036dc:	2b2a      	cmp	r3, #42	; 0x2a
 80036de:	d138      	bne.n	8003752 <_vfiprintf_r+0x1aa>
 80036e0:	9b03      	ldr	r3, [sp, #12]
 80036e2:	f108 0802 	add.w	r8, r8, #2
 80036e6:	1d1a      	adds	r2, r3, #4
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	9203      	str	r2, [sp, #12]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	bfb8      	it	lt
 80036f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80036f4:	9305      	str	r3, [sp, #20]
 80036f6:	4d33      	ldr	r5, [pc, #204]	; (80037c4 <_vfiprintf_r+0x21c>)
 80036f8:	2203      	movs	r2, #3
 80036fa:	f898 1000 	ldrb.w	r1, [r8]
 80036fe:	4628      	mov	r0, r5
 8003700:	f000 fa9a 	bl	8003c38 <memchr>
 8003704:	b140      	cbz	r0, 8003718 <_vfiprintf_r+0x170>
 8003706:	2340      	movs	r3, #64	; 0x40
 8003708:	1b40      	subs	r0, r0, r5
 800370a:	fa03 f000 	lsl.w	r0, r3, r0
 800370e:	9b04      	ldr	r3, [sp, #16]
 8003710:	f108 0801 	add.w	r8, r8, #1
 8003714:	4303      	orrs	r3, r0
 8003716:	9304      	str	r3, [sp, #16]
 8003718:	f898 1000 	ldrb.w	r1, [r8]
 800371c:	2206      	movs	r2, #6
 800371e:	482a      	ldr	r0, [pc, #168]	; (80037c8 <_vfiprintf_r+0x220>)
 8003720:	f108 0701 	add.w	r7, r8, #1
 8003724:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003728:	f000 fa86 	bl	8003c38 <memchr>
 800372c:	2800      	cmp	r0, #0
 800372e:	d037      	beq.n	80037a0 <_vfiprintf_r+0x1f8>
 8003730:	4b26      	ldr	r3, [pc, #152]	; (80037cc <_vfiprintf_r+0x224>)
 8003732:	bb1b      	cbnz	r3, 800377c <_vfiprintf_r+0x1d4>
 8003734:	9b03      	ldr	r3, [sp, #12]
 8003736:	3307      	adds	r3, #7
 8003738:	f023 0307 	bic.w	r3, r3, #7
 800373c:	3308      	adds	r3, #8
 800373e:	9303      	str	r3, [sp, #12]
 8003740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003742:	444b      	add	r3, r9
 8003744:	9309      	str	r3, [sp, #36]	; 0x24
 8003746:	e750      	b.n	80035ea <_vfiprintf_r+0x42>
 8003748:	fb05 3202 	mla	r2, r5, r2, r3
 800374c:	2001      	movs	r0, #1
 800374e:	4688      	mov	r8, r1
 8003750:	e78a      	b.n	8003668 <_vfiprintf_r+0xc0>
 8003752:	2300      	movs	r3, #0
 8003754:	250a      	movs	r5, #10
 8003756:	4619      	mov	r1, r3
 8003758:	f108 0801 	add.w	r8, r8, #1
 800375c:	9305      	str	r3, [sp, #20]
 800375e:	4640      	mov	r0, r8
 8003760:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003764:	3a30      	subs	r2, #48	; 0x30
 8003766:	2a09      	cmp	r2, #9
 8003768:	d903      	bls.n	8003772 <_vfiprintf_r+0x1ca>
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0c3      	beq.n	80036f6 <_vfiprintf_r+0x14e>
 800376e:	9105      	str	r1, [sp, #20]
 8003770:	e7c1      	b.n	80036f6 <_vfiprintf_r+0x14e>
 8003772:	fb05 2101 	mla	r1, r5, r1, r2
 8003776:	2301      	movs	r3, #1
 8003778:	4680      	mov	r8, r0
 800377a:	e7f0      	b.n	800375e <_vfiprintf_r+0x1b6>
 800377c:	ab03      	add	r3, sp, #12
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	4622      	mov	r2, r4
 8003782:	4b13      	ldr	r3, [pc, #76]	; (80037d0 <_vfiprintf_r+0x228>)
 8003784:	a904      	add	r1, sp, #16
 8003786:	4630      	mov	r0, r6
 8003788:	f3af 8000 	nop.w
 800378c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003790:	4681      	mov	r9, r0
 8003792:	d1d5      	bne.n	8003740 <_vfiprintf_r+0x198>
 8003794:	89a3      	ldrh	r3, [r4, #12]
 8003796:	065b      	lsls	r3, r3, #25
 8003798:	f53f af7e 	bmi.w	8003698 <_vfiprintf_r+0xf0>
 800379c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800379e:	e77d      	b.n	800369c <_vfiprintf_r+0xf4>
 80037a0:	ab03      	add	r3, sp, #12
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	4622      	mov	r2, r4
 80037a6:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <_vfiprintf_r+0x228>)
 80037a8:	a904      	add	r1, sp, #16
 80037aa:	4630      	mov	r0, r6
 80037ac:	f000 f888 	bl	80038c0 <_printf_i>
 80037b0:	e7ec      	b.n	800378c <_vfiprintf_r+0x1e4>
 80037b2:	bf00      	nop
 80037b4:	08003d38 	.word	0x08003d38
 80037b8:	08003d78 	.word	0x08003d78
 80037bc:	08003d58 	.word	0x08003d58
 80037c0:	08003d18 	.word	0x08003d18
 80037c4:	08003d7e 	.word	0x08003d7e
 80037c8:	08003d82 	.word	0x08003d82
 80037cc:	00000000 	.word	0x00000000
 80037d0:	08003583 	.word	0x08003583

080037d4 <_printf_common>:
 80037d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037d8:	4691      	mov	r9, r2
 80037da:	461f      	mov	r7, r3
 80037dc:	688a      	ldr	r2, [r1, #8]
 80037de:	690b      	ldr	r3, [r1, #16]
 80037e0:	4606      	mov	r6, r0
 80037e2:	4293      	cmp	r3, r2
 80037e4:	bfb8      	it	lt
 80037e6:	4613      	movlt	r3, r2
 80037e8:	f8c9 3000 	str.w	r3, [r9]
 80037ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037f0:	460c      	mov	r4, r1
 80037f2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037f6:	b112      	cbz	r2, 80037fe <_printf_common+0x2a>
 80037f8:	3301      	adds	r3, #1
 80037fa:	f8c9 3000 	str.w	r3, [r9]
 80037fe:	6823      	ldr	r3, [r4, #0]
 8003800:	0699      	lsls	r1, r3, #26
 8003802:	bf42      	ittt	mi
 8003804:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003808:	3302      	addmi	r3, #2
 800380a:	f8c9 3000 	strmi.w	r3, [r9]
 800380e:	6825      	ldr	r5, [r4, #0]
 8003810:	f015 0506 	ands.w	r5, r5, #6
 8003814:	d107      	bne.n	8003826 <_printf_common+0x52>
 8003816:	f104 0a19 	add.w	sl, r4, #25
 800381a:	68e3      	ldr	r3, [r4, #12]
 800381c:	f8d9 2000 	ldr.w	r2, [r9]
 8003820:	1a9b      	subs	r3, r3, r2
 8003822:	42ab      	cmp	r3, r5
 8003824:	dc29      	bgt.n	800387a <_printf_common+0xa6>
 8003826:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800382a:	6822      	ldr	r2, [r4, #0]
 800382c:	3300      	adds	r3, #0
 800382e:	bf18      	it	ne
 8003830:	2301      	movne	r3, #1
 8003832:	0692      	lsls	r2, r2, #26
 8003834:	d42e      	bmi.n	8003894 <_printf_common+0xc0>
 8003836:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800383a:	4639      	mov	r1, r7
 800383c:	4630      	mov	r0, r6
 800383e:	47c0      	blx	r8
 8003840:	3001      	adds	r0, #1
 8003842:	d021      	beq.n	8003888 <_printf_common+0xb4>
 8003844:	6823      	ldr	r3, [r4, #0]
 8003846:	68e5      	ldr	r5, [r4, #12]
 8003848:	f003 0306 	and.w	r3, r3, #6
 800384c:	2b04      	cmp	r3, #4
 800384e:	bf18      	it	ne
 8003850:	2500      	movne	r5, #0
 8003852:	f8d9 2000 	ldr.w	r2, [r9]
 8003856:	f04f 0900 	mov.w	r9, #0
 800385a:	bf08      	it	eq
 800385c:	1aad      	subeq	r5, r5, r2
 800385e:	68a3      	ldr	r3, [r4, #8]
 8003860:	6922      	ldr	r2, [r4, #16]
 8003862:	bf08      	it	eq
 8003864:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003868:	4293      	cmp	r3, r2
 800386a:	bfc4      	itt	gt
 800386c:	1a9b      	subgt	r3, r3, r2
 800386e:	18ed      	addgt	r5, r5, r3
 8003870:	341a      	adds	r4, #26
 8003872:	454d      	cmp	r5, r9
 8003874:	d11a      	bne.n	80038ac <_printf_common+0xd8>
 8003876:	2000      	movs	r0, #0
 8003878:	e008      	b.n	800388c <_printf_common+0xb8>
 800387a:	2301      	movs	r3, #1
 800387c:	4652      	mov	r2, sl
 800387e:	4639      	mov	r1, r7
 8003880:	4630      	mov	r0, r6
 8003882:	47c0      	blx	r8
 8003884:	3001      	adds	r0, #1
 8003886:	d103      	bne.n	8003890 <_printf_common+0xbc>
 8003888:	f04f 30ff 	mov.w	r0, #4294967295
 800388c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003890:	3501      	adds	r5, #1
 8003892:	e7c2      	b.n	800381a <_printf_common+0x46>
 8003894:	2030      	movs	r0, #48	; 0x30
 8003896:	18e1      	adds	r1, r4, r3
 8003898:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800389c:	1c5a      	adds	r2, r3, #1
 800389e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038a2:	4422      	add	r2, r4
 80038a4:	3302      	adds	r3, #2
 80038a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038aa:	e7c4      	b.n	8003836 <_printf_common+0x62>
 80038ac:	2301      	movs	r3, #1
 80038ae:	4622      	mov	r2, r4
 80038b0:	4639      	mov	r1, r7
 80038b2:	4630      	mov	r0, r6
 80038b4:	47c0      	blx	r8
 80038b6:	3001      	adds	r0, #1
 80038b8:	d0e6      	beq.n	8003888 <_printf_common+0xb4>
 80038ba:	f109 0901 	add.w	r9, r9, #1
 80038be:	e7d8      	b.n	8003872 <_printf_common+0x9e>

080038c0 <_printf_i>:
 80038c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80038c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80038c8:	460c      	mov	r4, r1
 80038ca:	7e09      	ldrb	r1, [r1, #24]
 80038cc:	b085      	sub	sp, #20
 80038ce:	296e      	cmp	r1, #110	; 0x6e
 80038d0:	4617      	mov	r7, r2
 80038d2:	4606      	mov	r6, r0
 80038d4:	4698      	mov	r8, r3
 80038d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80038d8:	f000 80b3 	beq.w	8003a42 <_printf_i+0x182>
 80038dc:	d822      	bhi.n	8003924 <_printf_i+0x64>
 80038de:	2963      	cmp	r1, #99	; 0x63
 80038e0:	d036      	beq.n	8003950 <_printf_i+0x90>
 80038e2:	d80a      	bhi.n	80038fa <_printf_i+0x3a>
 80038e4:	2900      	cmp	r1, #0
 80038e6:	f000 80b9 	beq.w	8003a5c <_printf_i+0x19c>
 80038ea:	2958      	cmp	r1, #88	; 0x58
 80038ec:	f000 8083 	beq.w	80039f6 <_printf_i+0x136>
 80038f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80038f8:	e032      	b.n	8003960 <_printf_i+0xa0>
 80038fa:	2964      	cmp	r1, #100	; 0x64
 80038fc:	d001      	beq.n	8003902 <_printf_i+0x42>
 80038fe:	2969      	cmp	r1, #105	; 0x69
 8003900:	d1f6      	bne.n	80038f0 <_printf_i+0x30>
 8003902:	6820      	ldr	r0, [r4, #0]
 8003904:	6813      	ldr	r3, [r2, #0]
 8003906:	0605      	lsls	r5, r0, #24
 8003908:	f103 0104 	add.w	r1, r3, #4
 800390c:	d52a      	bpl.n	8003964 <_printf_i+0xa4>
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6011      	str	r1, [r2, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	da03      	bge.n	800391e <_printf_i+0x5e>
 8003916:	222d      	movs	r2, #45	; 0x2d
 8003918:	425b      	negs	r3, r3
 800391a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800391e:	486f      	ldr	r0, [pc, #444]	; (8003adc <_printf_i+0x21c>)
 8003920:	220a      	movs	r2, #10
 8003922:	e039      	b.n	8003998 <_printf_i+0xd8>
 8003924:	2973      	cmp	r1, #115	; 0x73
 8003926:	f000 809d 	beq.w	8003a64 <_printf_i+0x1a4>
 800392a:	d808      	bhi.n	800393e <_printf_i+0x7e>
 800392c:	296f      	cmp	r1, #111	; 0x6f
 800392e:	d020      	beq.n	8003972 <_printf_i+0xb2>
 8003930:	2970      	cmp	r1, #112	; 0x70
 8003932:	d1dd      	bne.n	80038f0 <_printf_i+0x30>
 8003934:	6823      	ldr	r3, [r4, #0]
 8003936:	f043 0320 	orr.w	r3, r3, #32
 800393a:	6023      	str	r3, [r4, #0]
 800393c:	e003      	b.n	8003946 <_printf_i+0x86>
 800393e:	2975      	cmp	r1, #117	; 0x75
 8003940:	d017      	beq.n	8003972 <_printf_i+0xb2>
 8003942:	2978      	cmp	r1, #120	; 0x78
 8003944:	d1d4      	bne.n	80038f0 <_printf_i+0x30>
 8003946:	2378      	movs	r3, #120	; 0x78
 8003948:	4865      	ldr	r0, [pc, #404]	; (8003ae0 <_printf_i+0x220>)
 800394a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800394e:	e055      	b.n	80039fc <_printf_i+0x13c>
 8003950:	6813      	ldr	r3, [r2, #0]
 8003952:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003956:	1d19      	adds	r1, r3, #4
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6011      	str	r1, [r2, #0]
 800395c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003960:	2301      	movs	r3, #1
 8003962:	e08c      	b.n	8003a7e <_printf_i+0x1be>
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f010 0f40 	tst.w	r0, #64	; 0x40
 800396a:	6011      	str	r1, [r2, #0]
 800396c:	bf18      	it	ne
 800396e:	b21b      	sxthne	r3, r3
 8003970:	e7cf      	b.n	8003912 <_printf_i+0x52>
 8003972:	6813      	ldr	r3, [r2, #0]
 8003974:	6825      	ldr	r5, [r4, #0]
 8003976:	1d18      	adds	r0, r3, #4
 8003978:	6010      	str	r0, [r2, #0]
 800397a:	0628      	lsls	r0, r5, #24
 800397c:	d501      	bpl.n	8003982 <_printf_i+0xc2>
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	e002      	b.n	8003988 <_printf_i+0xc8>
 8003982:	0668      	lsls	r0, r5, #25
 8003984:	d5fb      	bpl.n	800397e <_printf_i+0xbe>
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	296f      	cmp	r1, #111	; 0x6f
 800398a:	bf14      	ite	ne
 800398c:	220a      	movne	r2, #10
 800398e:	2208      	moveq	r2, #8
 8003990:	4852      	ldr	r0, [pc, #328]	; (8003adc <_printf_i+0x21c>)
 8003992:	2100      	movs	r1, #0
 8003994:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003998:	6865      	ldr	r5, [r4, #4]
 800399a:	2d00      	cmp	r5, #0
 800399c:	60a5      	str	r5, [r4, #8]
 800399e:	f2c0 8095 	blt.w	8003acc <_printf_i+0x20c>
 80039a2:	6821      	ldr	r1, [r4, #0]
 80039a4:	f021 0104 	bic.w	r1, r1, #4
 80039a8:	6021      	str	r1, [r4, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d13d      	bne.n	8003a2a <_printf_i+0x16a>
 80039ae:	2d00      	cmp	r5, #0
 80039b0:	f040 808e 	bne.w	8003ad0 <_printf_i+0x210>
 80039b4:	4665      	mov	r5, ip
 80039b6:	2a08      	cmp	r2, #8
 80039b8:	d10b      	bne.n	80039d2 <_printf_i+0x112>
 80039ba:	6823      	ldr	r3, [r4, #0]
 80039bc:	07db      	lsls	r3, r3, #31
 80039be:	d508      	bpl.n	80039d2 <_printf_i+0x112>
 80039c0:	6923      	ldr	r3, [r4, #16]
 80039c2:	6862      	ldr	r2, [r4, #4]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	bfde      	ittt	le
 80039c8:	2330      	movle	r3, #48	; 0x30
 80039ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80039d2:	ebac 0305 	sub.w	r3, ip, r5
 80039d6:	6123      	str	r3, [r4, #16]
 80039d8:	f8cd 8000 	str.w	r8, [sp]
 80039dc:	463b      	mov	r3, r7
 80039de:	aa03      	add	r2, sp, #12
 80039e0:	4621      	mov	r1, r4
 80039e2:	4630      	mov	r0, r6
 80039e4:	f7ff fef6 	bl	80037d4 <_printf_common>
 80039e8:	3001      	adds	r0, #1
 80039ea:	d14d      	bne.n	8003a88 <_printf_i+0x1c8>
 80039ec:	f04f 30ff 	mov.w	r0, #4294967295
 80039f0:	b005      	add	sp, #20
 80039f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80039f6:	4839      	ldr	r0, [pc, #228]	; (8003adc <_printf_i+0x21c>)
 80039f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80039fc:	6813      	ldr	r3, [r2, #0]
 80039fe:	6821      	ldr	r1, [r4, #0]
 8003a00:	1d1d      	adds	r5, r3, #4
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6015      	str	r5, [r2, #0]
 8003a06:	060a      	lsls	r2, r1, #24
 8003a08:	d50b      	bpl.n	8003a22 <_printf_i+0x162>
 8003a0a:	07ca      	lsls	r2, r1, #31
 8003a0c:	bf44      	itt	mi
 8003a0e:	f041 0120 	orrmi.w	r1, r1, #32
 8003a12:	6021      	strmi	r1, [r4, #0]
 8003a14:	b91b      	cbnz	r3, 8003a1e <_printf_i+0x15e>
 8003a16:	6822      	ldr	r2, [r4, #0]
 8003a18:	f022 0220 	bic.w	r2, r2, #32
 8003a1c:	6022      	str	r2, [r4, #0]
 8003a1e:	2210      	movs	r2, #16
 8003a20:	e7b7      	b.n	8003992 <_printf_i+0xd2>
 8003a22:	064d      	lsls	r5, r1, #25
 8003a24:	bf48      	it	mi
 8003a26:	b29b      	uxthmi	r3, r3
 8003a28:	e7ef      	b.n	8003a0a <_printf_i+0x14a>
 8003a2a:	4665      	mov	r5, ip
 8003a2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a30:	fb02 3311 	mls	r3, r2, r1, r3
 8003a34:	5cc3      	ldrb	r3, [r0, r3]
 8003a36:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	2900      	cmp	r1, #0
 8003a3e:	d1f5      	bne.n	8003a2c <_printf_i+0x16c>
 8003a40:	e7b9      	b.n	80039b6 <_printf_i+0xf6>
 8003a42:	6813      	ldr	r3, [r2, #0]
 8003a44:	6825      	ldr	r5, [r4, #0]
 8003a46:	1d18      	adds	r0, r3, #4
 8003a48:	6961      	ldr	r1, [r4, #20]
 8003a4a:	6010      	str	r0, [r2, #0]
 8003a4c:	0628      	lsls	r0, r5, #24
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	d501      	bpl.n	8003a56 <_printf_i+0x196>
 8003a52:	6019      	str	r1, [r3, #0]
 8003a54:	e002      	b.n	8003a5c <_printf_i+0x19c>
 8003a56:	066a      	lsls	r2, r5, #25
 8003a58:	d5fb      	bpl.n	8003a52 <_printf_i+0x192>
 8003a5a:	8019      	strh	r1, [r3, #0]
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	4665      	mov	r5, ip
 8003a60:	6123      	str	r3, [r4, #16]
 8003a62:	e7b9      	b.n	80039d8 <_printf_i+0x118>
 8003a64:	6813      	ldr	r3, [r2, #0]
 8003a66:	1d19      	adds	r1, r3, #4
 8003a68:	6011      	str	r1, [r2, #0]
 8003a6a:	681d      	ldr	r5, [r3, #0]
 8003a6c:	6862      	ldr	r2, [r4, #4]
 8003a6e:	2100      	movs	r1, #0
 8003a70:	4628      	mov	r0, r5
 8003a72:	f000 f8e1 	bl	8003c38 <memchr>
 8003a76:	b108      	cbz	r0, 8003a7c <_printf_i+0x1bc>
 8003a78:	1b40      	subs	r0, r0, r5
 8003a7a:	6060      	str	r0, [r4, #4]
 8003a7c:	6863      	ldr	r3, [r4, #4]
 8003a7e:	6123      	str	r3, [r4, #16]
 8003a80:	2300      	movs	r3, #0
 8003a82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a86:	e7a7      	b.n	80039d8 <_printf_i+0x118>
 8003a88:	6923      	ldr	r3, [r4, #16]
 8003a8a:	462a      	mov	r2, r5
 8003a8c:	4639      	mov	r1, r7
 8003a8e:	4630      	mov	r0, r6
 8003a90:	47c0      	blx	r8
 8003a92:	3001      	adds	r0, #1
 8003a94:	d0aa      	beq.n	80039ec <_printf_i+0x12c>
 8003a96:	6823      	ldr	r3, [r4, #0]
 8003a98:	079b      	lsls	r3, r3, #30
 8003a9a:	d413      	bmi.n	8003ac4 <_printf_i+0x204>
 8003a9c:	68e0      	ldr	r0, [r4, #12]
 8003a9e:	9b03      	ldr	r3, [sp, #12]
 8003aa0:	4298      	cmp	r0, r3
 8003aa2:	bfb8      	it	lt
 8003aa4:	4618      	movlt	r0, r3
 8003aa6:	e7a3      	b.n	80039f0 <_printf_i+0x130>
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	464a      	mov	r2, r9
 8003aac:	4639      	mov	r1, r7
 8003aae:	4630      	mov	r0, r6
 8003ab0:	47c0      	blx	r8
 8003ab2:	3001      	adds	r0, #1
 8003ab4:	d09a      	beq.n	80039ec <_printf_i+0x12c>
 8003ab6:	3501      	adds	r5, #1
 8003ab8:	68e3      	ldr	r3, [r4, #12]
 8003aba:	9a03      	ldr	r2, [sp, #12]
 8003abc:	1a9b      	subs	r3, r3, r2
 8003abe:	42ab      	cmp	r3, r5
 8003ac0:	dcf2      	bgt.n	8003aa8 <_printf_i+0x1e8>
 8003ac2:	e7eb      	b.n	8003a9c <_printf_i+0x1dc>
 8003ac4:	2500      	movs	r5, #0
 8003ac6:	f104 0919 	add.w	r9, r4, #25
 8003aca:	e7f5      	b.n	8003ab8 <_printf_i+0x1f8>
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1ac      	bne.n	8003a2a <_printf_i+0x16a>
 8003ad0:	7803      	ldrb	r3, [r0, #0]
 8003ad2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ad6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ada:	e76c      	b.n	80039b6 <_printf_i+0xf6>
 8003adc:	08003d89 	.word	0x08003d89
 8003ae0:	08003d9a 	.word	0x08003d9a

08003ae4 <_sbrk_r>:
 8003ae4:	b538      	push	{r3, r4, r5, lr}
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	4c05      	ldr	r4, [pc, #20]	; (8003b00 <_sbrk_r+0x1c>)
 8003aea:	4605      	mov	r5, r0
 8003aec:	4608      	mov	r0, r1
 8003aee:	6023      	str	r3, [r4, #0]
 8003af0:	f7fd f9c6 	bl	8000e80 <_sbrk>
 8003af4:	1c43      	adds	r3, r0, #1
 8003af6:	d102      	bne.n	8003afe <_sbrk_r+0x1a>
 8003af8:	6823      	ldr	r3, [r4, #0]
 8003afa:	b103      	cbz	r3, 8003afe <_sbrk_r+0x1a>
 8003afc:	602b      	str	r3, [r5, #0]
 8003afe:	bd38      	pop	{r3, r4, r5, pc}
 8003b00:	200001bc 	.word	0x200001bc

08003b04 <__sread>:
 8003b04:	b510      	push	{r4, lr}
 8003b06:	460c      	mov	r4, r1
 8003b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b0c:	f000 f8a4 	bl	8003c58 <_read_r>
 8003b10:	2800      	cmp	r0, #0
 8003b12:	bfab      	itete	ge
 8003b14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003b16:	89a3      	ldrhlt	r3, [r4, #12]
 8003b18:	181b      	addge	r3, r3, r0
 8003b1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003b1e:	bfac      	ite	ge
 8003b20:	6563      	strge	r3, [r4, #84]	; 0x54
 8003b22:	81a3      	strhlt	r3, [r4, #12]
 8003b24:	bd10      	pop	{r4, pc}

08003b26 <__swrite>:
 8003b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b2a:	461f      	mov	r7, r3
 8003b2c:	898b      	ldrh	r3, [r1, #12]
 8003b2e:	4605      	mov	r5, r0
 8003b30:	05db      	lsls	r3, r3, #23
 8003b32:	460c      	mov	r4, r1
 8003b34:	4616      	mov	r6, r2
 8003b36:	d505      	bpl.n	8003b44 <__swrite+0x1e>
 8003b38:	2302      	movs	r3, #2
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b40:	f000 f868 	bl	8003c14 <_lseek_r>
 8003b44:	89a3      	ldrh	r3, [r4, #12]
 8003b46:	4632      	mov	r2, r6
 8003b48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b4c:	81a3      	strh	r3, [r4, #12]
 8003b4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b52:	463b      	mov	r3, r7
 8003b54:	4628      	mov	r0, r5
 8003b56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b5a:	f000 b817 	b.w	8003b8c <_write_r>

08003b5e <__sseek>:
 8003b5e:	b510      	push	{r4, lr}
 8003b60:	460c      	mov	r4, r1
 8003b62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b66:	f000 f855 	bl	8003c14 <_lseek_r>
 8003b6a:	1c43      	adds	r3, r0, #1
 8003b6c:	89a3      	ldrh	r3, [r4, #12]
 8003b6e:	bf15      	itete	ne
 8003b70:	6560      	strne	r0, [r4, #84]	; 0x54
 8003b72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003b76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003b7a:	81a3      	strheq	r3, [r4, #12]
 8003b7c:	bf18      	it	ne
 8003b7e:	81a3      	strhne	r3, [r4, #12]
 8003b80:	bd10      	pop	{r4, pc}

08003b82 <__sclose>:
 8003b82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b86:	f000 b813 	b.w	8003bb0 <_close_r>
	...

08003b8c <_write_r>:
 8003b8c:	b538      	push	{r3, r4, r5, lr}
 8003b8e:	4605      	mov	r5, r0
 8003b90:	4608      	mov	r0, r1
 8003b92:	4611      	mov	r1, r2
 8003b94:	2200      	movs	r2, #0
 8003b96:	4c05      	ldr	r4, [pc, #20]	; (8003bac <_write_r+0x20>)
 8003b98:	6022      	str	r2, [r4, #0]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	f7fd f923 	bl	8000de6 <_write>
 8003ba0:	1c43      	adds	r3, r0, #1
 8003ba2:	d102      	bne.n	8003baa <_write_r+0x1e>
 8003ba4:	6823      	ldr	r3, [r4, #0]
 8003ba6:	b103      	cbz	r3, 8003baa <_write_r+0x1e>
 8003ba8:	602b      	str	r3, [r5, #0]
 8003baa:	bd38      	pop	{r3, r4, r5, pc}
 8003bac:	200001bc 	.word	0x200001bc

08003bb0 <_close_r>:
 8003bb0:	b538      	push	{r3, r4, r5, lr}
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	4c05      	ldr	r4, [pc, #20]	; (8003bcc <_close_r+0x1c>)
 8003bb6:	4605      	mov	r5, r0
 8003bb8:	4608      	mov	r0, r1
 8003bba:	6023      	str	r3, [r4, #0]
 8003bbc:	f7fd f92f 	bl	8000e1e <_close>
 8003bc0:	1c43      	adds	r3, r0, #1
 8003bc2:	d102      	bne.n	8003bca <_close_r+0x1a>
 8003bc4:	6823      	ldr	r3, [r4, #0]
 8003bc6:	b103      	cbz	r3, 8003bca <_close_r+0x1a>
 8003bc8:	602b      	str	r3, [r5, #0]
 8003bca:	bd38      	pop	{r3, r4, r5, pc}
 8003bcc:	200001bc 	.word	0x200001bc

08003bd0 <_fstat_r>:
 8003bd0:	b538      	push	{r3, r4, r5, lr}
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	4c06      	ldr	r4, [pc, #24]	; (8003bf0 <_fstat_r+0x20>)
 8003bd6:	4605      	mov	r5, r0
 8003bd8:	4608      	mov	r0, r1
 8003bda:	4611      	mov	r1, r2
 8003bdc:	6023      	str	r3, [r4, #0]
 8003bde:	f7fd f929 	bl	8000e34 <_fstat>
 8003be2:	1c43      	adds	r3, r0, #1
 8003be4:	d102      	bne.n	8003bec <_fstat_r+0x1c>
 8003be6:	6823      	ldr	r3, [r4, #0]
 8003be8:	b103      	cbz	r3, 8003bec <_fstat_r+0x1c>
 8003bea:	602b      	str	r3, [r5, #0]
 8003bec:	bd38      	pop	{r3, r4, r5, pc}
 8003bee:	bf00      	nop
 8003bf0:	200001bc 	.word	0x200001bc

08003bf4 <_isatty_r>:
 8003bf4:	b538      	push	{r3, r4, r5, lr}
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	4c05      	ldr	r4, [pc, #20]	; (8003c10 <_isatty_r+0x1c>)
 8003bfa:	4605      	mov	r5, r0
 8003bfc:	4608      	mov	r0, r1
 8003bfe:	6023      	str	r3, [r4, #0]
 8003c00:	f7fd f927 	bl	8000e52 <_isatty>
 8003c04:	1c43      	adds	r3, r0, #1
 8003c06:	d102      	bne.n	8003c0e <_isatty_r+0x1a>
 8003c08:	6823      	ldr	r3, [r4, #0]
 8003c0a:	b103      	cbz	r3, 8003c0e <_isatty_r+0x1a>
 8003c0c:	602b      	str	r3, [r5, #0]
 8003c0e:	bd38      	pop	{r3, r4, r5, pc}
 8003c10:	200001bc 	.word	0x200001bc

08003c14 <_lseek_r>:
 8003c14:	b538      	push	{r3, r4, r5, lr}
 8003c16:	4605      	mov	r5, r0
 8003c18:	4608      	mov	r0, r1
 8003c1a:	4611      	mov	r1, r2
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	4c05      	ldr	r4, [pc, #20]	; (8003c34 <_lseek_r+0x20>)
 8003c20:	6022      	str	r2, [r4, #0]
 8003c22:	461a      	mov	r2, r3
 8003c24:	f7fd f91f 	bl	8000e66 <_lseek>
 8003c28:	1c43      	adds	r3, r0, #1
 8003c2a:	d102      	bne.n	8003c32 <_lseek_r+0x1e>
 8003c2c:	6823      	ldr	r3, [r4, #0]
 8003c2e:	b103      	cbz	r3, 8003c32 <_lseek_r+0x1e>
 8003c30:	602b      	str	r3, [r5, #0]
 8003c32:	bd38      	pop	{r3, r4, r5, pc}
 8003c34:	200001bc 	.word	0x200001bc

08003c38 <memchr>:
 8003c38:	b510      	push	{r4, lr}
 8003c3a:	b2c9      	uxtb	r1, r1
 8003c3c:	4402      	add	r2, r0
 8003c3e:	4290      	cmp	r0, r2
 8003c40:	4603      	mov	r3, r0
 8003c42:	d101      	bne.n	8003c48 <memchr+0x10>
 8003c44:	2300      	movs	r3, #0
 8003c46:	e003      	b.n	8003c50 <memchr+0x18>
 8003c48:	781c      	ldrb	r4, [r3, #0]
 8003c4a:	3001      	adds	r0, #1
 8003c4c:	428c      	cmp	r4, r1
 8003c4e:	d1f6      	bne.n	8003c3e <memchr+0x6>
 8003c50:	4618      	mov	r0, r3
 8003c52:	bd10      	pop	{r4, pc}

08003c54 <__malloc_lock>:
 8003c54:	4770      	bx	lr

08003c56 <__malloc_unlock>:
 8003c56:	4770      	bx	lr

08003c58 <_read_r>:
 8003c58:	b538      	push	{r3, r4, r5, lr}
 8003c5a:	4605      	mov	r5, r0
 8003c5c:	4608      	mov	r0, r1
 8003c5e:	4611      	mov	r1, r2
 8003c60:	2200      	movs	r2, #0
 8003c62:	4c05      	ldr	r4, [pc, #20]	; (8003c78 <_read_r+0x20>)
 8003c64:	6022      	str	r2, [r4, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	f7fd f8a0 	bl	8000dac <_read>
 8003c6c:	1c43      	adds	r3, r0, #1
 8003c6e:	d102      	bne.n	8003c76 <_read_r+0x1e>
 8003c70:	6823      	ldr	r3, [r4, #0]
 8003c72:	b103      	cbz	r3, 8003c76 <_read_r+0x1e>
 8003c74:	602b      	str	r3, [r5, #0]
 8003c76:	bd38      	pop	{r3, r4, r5, pc}
 8003c78:	200001bc 	.word	0x200001bc

08003c7c <_init>:
 8003c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7e:	bf00      	nop
 8003c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c82:	bc08      	pop	{r3}
 8003c84:	469e      	mov	lr, r3
 8003c86:	4770      	bx	lr

08003c88 <_fini>:
 8003c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8a:	bf00      	nop
 8003c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c8e:	bc08      	pop	{r3}
 8003c90:	469e      	mov	lr, r3
 8003c92:	4770      	bx	lr
