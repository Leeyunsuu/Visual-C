
a14-07-vs100-uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036b0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  080037bc  080037bc  000137bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003968  08003968  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003968  08003968  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003968  08003968  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003968  08003968  00013968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800396c  0800396c  0001396c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003970  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000070  080039e0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  080039e0  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba4b  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ab5  00000000  00000000  0002bae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c30  00000000  00000000  0002d5a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b88  00000000  00000000  0002e1d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000186f3  00000000  00000000  0002ed58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000090e9  00000000  00000000  0004744b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b724  00000000  00000000  00050534  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dbc58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a10  00000000  00000000  000dbcd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080037a4 	.word	0x080037a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080037a4 	.word	0x080037a4

0800014c <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

PUTCHAR_PROTOTYPE
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800015a:	2201      	movs	r2, #1
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <__io_putchar+0x20>)
 800015e:	f002 fa32 	bl	80025c6 <HAL_UART_Transmit>

  return ch;
 8000162:	687b      	ldr	r3, [r7, #4]
}
 8000164:	4618      	mov	r0, r3
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	200001c8 	.word	0x200001c8

08000170 <HAL_TIM_PeriodElapsedCallback>:

//----- timer callback ----------------------------------------------------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim2.Instance){
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	681a      	ldr	r2, [r3, #0]
 800017c:	4ba1      	ldr	r3, [pc, #644]	; (8000404 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	429a      	cmp	r2, r3
 8000182:	f040 81c2 	bne.w	800050a <HAL_TIM_PeriodElapsedCallback+0x39a>
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
		if('y' == Uart_Tx_flag){
 8000186:	4ba0      	ldr	r3, [pc, #640]	; (8000408 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000188:	781b      	ldrb	r3, [r3, #0]
 800018a:	2b79      	cmp	r3, #121	; 0x79
 800018c:	d115      	bne.n	80001ba <HAL_TIM_PeriodElapsedCallback+0x4a>
			tim2_base_cnt += 1;
 800018e:	4b9f      	ldr	r3, [pc, #636]	; (800040c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	3301      	adds	r3, #1
 8000194:	4a9d      	ldr	r2, [pc, #628]	; (800040c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000196:	6013      	str	r3, [r2, #0]
			if((tim2_base_cnt % 4) == 0){
 8000198:	4b9c      	ldr	r3, [pc, #624]	; (800040c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	f003 0303 	and.w	r3, r3, #3
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d10a      	bne.n	80001ba <HAL_TIM_PeriodElapsedCallback+0x4a>
				txBit_cnt += 1;
 80001a4:	4b9a      	ldr	r3, [pc, #616]	; (8000410 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	3301      	adds	r3, #1
 80001aa:	4a99      	ldr	r2, [pc, #612]	; (8000410 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80001ac:	6013      	str	r3, [r2, #0]
				Uart_Tx_trigger = 'y';
 80001ae:	4b99      	ldr	r3, [pc, #612]	; (8000414 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80001b0:	2279      	movs	r2, #121	; 0x79
 80001b2:	701a      	strb	r2, [r3, #0]
				tim2_base_cnt = 0;
 80001b4:	4b95      	ldr	r3, [pc, #596]	; (800040c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80001b6:	2200      	movs	r2, #0
 80001b8:	601a      	str	r2, [r3, #0]
			}

		}
		if('y' == Uart_Rx_flag){
 80001ba:	4b97      	ldr	r3, [pc, #604]	; (8000418 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80001bc:	781b      	ldrb	r3, [r3, #0]
 80001be:	2b79      	cmp	r3, #121	; 0x79
 80001c0:	f040 81a3 	bne.w	800050a <HAL_TIM_PeriodElapsedCallback+0x39a>
			if('n' == Uart_Rx_active){
 80001c4:	4b95      	ldr	r3, [pc, #596]	; (800041c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80001c6:	781b      	ldrb	r3, [r3, #0]
 80001c8:	2b6e      	cmp	r3, #110	; 0x6e
 80001ca:	d155      	bne.n	8000278 <HAL_TIM_PeriodElapsedCallback+0x108>
				Uart_Rx_Temp <<= 1;
 80001cc:	4b94      	ldr	r3, [pc, #592]	; (8000420 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	005b      	lsls	r3, r3, #1
 80001d2:	b2da      	uxtb	r2, r3
 80001d4:	4b92      	ldr	r3, [pc, #584]	; (8000420 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80001d6:	701a      	strb	r2, [r3, #0]
				if(GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)){
 80001d8:	2101      	movs	r1, #1
 80001da:	4892      	ldr	r0, [pc, #584]	; (8000424 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80001dc:	f001 f932 	bl	8001444 <HAL_GPIO_ReadPin>
 80001e0:	4603      	mov	r3, r0
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	d105      	bne.n	80001f2 <HAL_TIM_PeriodElapsedCallback+0x82>
					Uart_Rx_Temp += 1;
 80001e6:	4b8e      	ldr	r3, [pc, #568]	; (8000420 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80001e8:	781b      	ldrb	r3, [r3, #0]
 80001ea:	3301      	adds	r3, #1
 80001ec:	b2da      	uxtb	r2, r3
 80001ee:	4b8c      	ldr	r3, [pc, #560]	; (8000420 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80001f0:	701a      	strb	r2, [r3, #0]
				}
				if((Uart_Rx_Temp & 0x0f) == 0x0c){
 80001f2:	4b8b      	ldr	r3, [pc, #556]	; (8000420 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80001f4:	781b      	ldrb	r3, [r3, #0]
 80001f6:	f003 030f 	and.w	r3, r3, #15
 80001fa:	2b0c      	cmp	r3, #12
 80001fc:	f040 8185 	bne.w	800050a <HAL_TIM_PeriodElapsedCallback+0x39a>
					Uart_Rx_active = 'y';
 8000200:	4b86      	ldr	r3, [pc, #536]	; (800041c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000202:	2279      	movs	r2, #121	; 0x79
 8000204:	701a      	strb	r2, [r3, #0]
					Uart_Rx_Temp = 0x00;
 8000206:	4b86      	ldr	r3, [pc, #536]	; (8000420 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000208:	2200      	movs	r2, #0
 800020a:	701a      	strb	r2, [r3, #0]
					rxByte_cnt += 1;
 800020c:	4b86      	ldr	r3, [pc, #536]	; (8000428 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	3301      	adds	r3, #1
 8000212:	4a85      	ldr	r2, [pc, #532]	; (8000428 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000214:	6013      	str	r3, [r2, #0]
					UartRxData[rxByte_cnt].start = 'y';
 8000216:	4b84      	ldr	r3, [pc, #528]	; (8000428 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4a84      	ldr	r2, [pc, #528]	; (800042c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800021c:	2179      	movs	r1, #121	; 0x79
 800021e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
					UartRxData[rxByte_cnt].data = 0x00;
 8000222:	4b81      	ldr	r3, [pc, #516]	; (8000428 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a81      	ldr	r2, [pc, #516]	; (800042c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000228:	009b      	lsls	r3, r3, #2
 800022a:	4413      	add	r3, r2
 800022c:	2200      	movs	r2, #0
 800022e:	705a      	strb	r2, [r3, #1]
					UartRxData[rxByte_cnt].parity = 'n';
 8000230:	4b7d      	ldr	r3, [pc, #500]	; (8000428 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a7d      	ldr	r2, [pc, #500]	; (800042c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000236:	009b      	lsls	r3, r3, #2
 8000238:	4413      	add	r3, r2
 800023a:	226e      	movs	r2, #110	; 0x6e
 800023c:	709a      	strb	r2, [r3, #2]
					UartRxData[rxByte_cnt].stop = 'x';
 800023e:	4b7a      	ldr	r3, [pc, #488]	; (8000428 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	4a7a      	ldr	r2, [pc, #488]	; (800042c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000244:	009b      	lsls	r3, r3, #2
 8000246:	4413      	add	r3, r2
 8000248:	2278      	movs	r2, #120	; 0x78
 800024a:	70da      	strb	r2, [r3, #3]
					rxBit_cnt = 0;
 800024c:	4b78      	ldr	r3, [pc, #480]	; (8000430 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
					rxSamp_cnt = 0;
 8000252:	4b78      	ldr	r3, [pc, #480]	; (8000434 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000254:	2200      	movs	r2, #0
 8000256:	601a      	str	r2, [r3, #0]
					rxParity_bit = 0;
 8000258:	4b77      	ldr	r3, [pc, #476]	; (8000438 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
					Uart_Rx_trigger = 'n';
 800025e:	4b77      	ldr	r3, [pc, #476]	; (800043c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000260:	226e      	movs	r2, #110	; 0x6e
 8000262:	701a      	strb	r2, [r3, #0]
					Uart_Rx_data = 'n';
 8000264:	4b76      	ldr	r3, [pc, #472]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000266:	226e      	movs	r2, #110	; 0x6e
 8000268:	701a      	strb	r2, [r3, #0]
					Uart_Rx_parity = 'n';
 800026a:	4b76      	ldr	r3, [pc, #472]	; (8000444 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800026c:	226e      	movs	r2, #110	; 0x6e
 800026e:	701a      	strb	r2, [r3, #0]
					Uart_Rx_stop = 'n';
 8000270:	4b75      	ldr	r3, [pc, #468]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000272:	226e      	movs	r2, #110	; 0x6e
 8000274:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
	}
}
 8000276:	e148      	b.n	800050a <HAL_TIM_PeriodElapsedCallback+0x39a>
				Uart_Rx_trigger = 'n';
 8000278:	4b70      	ldr	r3, [pc, #448]	; (800043c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800027a:	226e      	movs	r2, #110	; 0x6e
 800027c:	701a      	strb	r2, [r3, #0]
				rxSamp_cnt += 1;
 800027e:	4b6d      	ldr	r3, [pc, #436]	; (8000434 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	3301      	adds	r3, #1
 8000284:	4a6b      	ldr	r2, [pc, #428]	; (8000434 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000286:	6013      	str	r3, [r2, #0]
				if((rxSamp_cnt % 4) == 0){
 8000288:	4b6a      	ldr	r3, [pc, #424]	; (8000434 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	f003 0303 	and.w	r3, r3, #3
 8000290:	2b00      	cmp	r3, #0
 8000292:	d14d      	bne.n	8000330 <HAL_TIM_PeriodElapsedCallback+0x1c0>
					Uart_Rx_trigger = 'y';
 8000294:	4b69      	ldr	r3, [pc, #420]	; (800043c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000296:	2279      	movs	r2, #121	; 0x79
 8000298:	701a      	strb	r2, [r3, #0]
					if(GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)){
 800029a:	2101      	movs	r1, #1
 800029c:	4861      	ldr	r0, [pc, #388]	; (8000424 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800029e:	f001 f8d1 	bl	8001444 <HAL_GPIO_ReadPin>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d103      	bne.n	80002b0 <HAL_TIM_PeriodElapsedCallback+0x140>
						rxBit_value = 1;
 80002a8:	4b68      	ldr	r3, [pc, #416]	; (800044c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80002aa:	2201      	movs	r2, #1
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	e002      	b.n	80002b6 <HAL_TIM_PeriodElapsedCallback+0x146>
						rxBit_value = 0;
 80002b0:	4b66      	ldr	r3, [pc, #408]	; (800044c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
					rxBit_cnt += 1;
 80002b6:	4b5e      	ldr	r3, [pc, #376]	; (8000430 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	3301      	adds	r3, #1
 80002bc:	4a5c      	ldr	r2, [pc, #368]	; (8000430 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80002be:	6013      	str	r3, [r2, #0]
					if((1 <= rxBit_cnt) && (rxBit_cnt <= 8)){
 80002c0:	4b5b      	ldr	r3, [pc, #364]	; (8000430 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	dd07      	ble.n	80002d8 <HAL_TIM_PeriodElapsedCallback+0x168>
 80002c8:	4b59      	ldr	r3, [pc, #356]	; (8000430 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	2b08      	cmp	r3, #8
 80002ce:	dc03      	bgt.n	80002d8 <HAL_TIM_PeriodElapsedCallback+0x168>
						Uart_Rx_data = 'y';
 80002d0:	4b5b      	ldr	r3, [pc, #364]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80002d2:	2279      	movs	r2, #121	; 0x79
 80002d4:	701a      	strb	r2, [r3, #0]
 80002d6:	e02b      	b.n	8000330 <HAL_TIM_PeriodElapsedCallback+0x1c0>
					}else if(9 == rxBit_cnt){
 80002d8:	4b55      	ldr	r3, [pc, #340]	; (8000430 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	2b09      	cmp	r3, #9
 80002de:	d11d      	bne.n	800031c <HAL_TIM_PeriodElapsedCallback+0x1ac>
						Uart_Rx_data = 'n';
 80002e0:	4b57      	ldr	r3, [pc, #348]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80002e2:	226e      	movs	r2, #110	; 0x6e
 80002e4:	701a      	strb	r2, [r3, #0]
						if('n' == Uart_Rx_Parity_Mode){
 80002e6:	4b5a      	ldr	r3, [pc, #360]	; (8000450 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	2b6e      	cmp	r3, #110	; 0x6e
 80002ec:	d106      	bne.n	80002fc <HAL_TIM_PeriodElapsedCallback+0x18c>
							Uart_Rx_parity = 'n';
 80002ee:	4b55      	ldr	r3, [pc, #340]	; (8000444 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80002f0:	226e      	movs	r2, #110	; 0x6e
 80002f2:	701a      	strb	r2, [r3, #0]
							Uart_Rx_stop = 'y';
 80002f4:	4b54      	ldr	r3, [pc, #336]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80002f6:	2279      	movs	r2, #121	; 0x79
 80002f8:	701a      	strb	r2, [r3, #0]
 80002fa:	e019      	b.n	8000330 <HAL_TIM_PeriodElapsedCallback+0x1c0>
						}else if('e' == Uart_Rx_Parity_Mode){
 80002fc:	4b54      	ldr	r3, [pc, #336]	; (8000450 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b65      	cmp	r3, #101	; 0x65
 8000302:	d103      	bne.n	800030c <HAL_TIM_PeriodElapsedCallback+0x19c>
							Uart_Rx_parity = 'y';
 8000304:	4b4f      	ldr	r3, [pc, #316]	; (8000444 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000306:	2279      	movs	r2, #121	; 0x79
 8000308:	701a      	strb	r2, [r3, #0]
 800030a:	e011      	b.n	8000330 <HAL_TIM_PeriodElapsedCallback+0x1c0>
						}else if('o' == Uart_Rx_Parity_Mode){
 800030c:	4b50      	ldr	r3, [pc, #320]	; (8000450 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	2b6f      	cmp	r3, #111	; 0x6f
 8000312:	d10d      	bne.n	8000330 <HAL_TIM_PeriodElapsedCallback+0x1c0>
							Uart_Rx_parity = 'y';
 8000314:	4b4b      	ldr	r3, [pc, #300]	; (8000444 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000316:	2279      	movs	r2, #121	; 0x79
 8000318:	701a      	strb	r2, [r3, #0]
 800031a:	e009      	b.n	8000330 <HAL_TIM_PeriodElapsedCallback+0x1c0>
					}else if(10 == rxBit_cnt){
 800031c:	4b44      	ldr	r3, [pc, #272]	; (8000430 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2b0a      	cmp	r3, #10
 8000322:	d105      	bne.n	8000330 <HAL_TIM_PeriodElapsedCallback+0x1c0>
						Uart_Rx_parity = 'n';
 8000324:	4b47      	ldr	r3, [pc, #284]	; (8000444 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000326:	226e      	movs	r2, #110	; 0x6e
 8000328:	701a      	strb	r2, [r3, #0]
						Uart_Rx_stop = 'y';
 800032a:	4b47      	ldr	r3, [pc, #284]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800032c:	2279      	movs	r2, #121	; 0x79
 800032e:	701a      	strb	r2, [r3, #0]
				if(('y' == Uart_Rx_trigger) && ('y' == Uart_Rx_data)){
 8000330:	4b42      	ldr	r3, [pc, #264]	; (800043c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	2b79      	cmp	r3, #121	; 0x79
 8000336:	d12d      	bne.n	8000394 <HAL_TIM_PeriodElapsedCallback+0x224>
 8000338:	4b41      	ldr	r3, [pc, #260]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	2b79      	cmp	r3, #121	; 0x79
 800033e:	d129      	bne.n	8000394 <HAL_TIM_PeriodElapsedCallback+0x224>
					Uart_Rx_trigger = 'n';
 8000340:	4b3e      	ldr	r3, [pc, #248]	; (800043c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000342:	226e      	movs	r2, #110	; 0x6e
 8000344:	701a      	strb	r2, [r3, #0]
					UartRxData[rxByte_cnt].data >>= 1;
 8000346:	4b38      	ldr	r3, [pc, #224]	; (8000428 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4a38      	ldr	r2, [pc, #224]	; (800042c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800034c:	009b      	lsls	r3, r3, #2
 800034e:	4413      	add	r3, r2
 8000350:	785a      	ldrb	r2, [r3, #1]
 8000352:	4b35      	ldr	r3, [pc, #212]	; (8000428 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	0852      	lsrs	r2, r2, #1
 8000358:	b2d1      	uxtb	r1, r2
 800035a:	4a34      	ldr	r2, [pc, #208]	; (800042c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800035c:	009b      	lsls	r3, r3, #2
 800035e:	4413      	add	r3, r2
 8000360:	460a      	mov	r2, r1
 8000362:	705a      	strb	r2, [r3, #1]
					if(1 == rxBit_value){
 8000364:	4b39      	ldr	r3, [pc, #228]	; (800044c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	2b01      	cmp	r3, #1
 800036a:	d113      	bne.n	8000394 <HAL_TIM_PeriodElapsedCallback+0x224>
						UartRxData[rxByte_cnt].data += 0x80;
 800036c:	4b2e      	ldr	r3, [pc, #184]	; (8000428 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a2e      	ldr	r2, [pc, #184]	; (800042c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000372:	009b      	lsls	r3, r3, #2
 8000374:	4413      	add	r3, r2
 8000376:	785a      	ldrb	r2, [r3, #1]
 8000378:	4b2b      	ldr	r3, [pc, #172]	; (8000428 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	3a80      	subs	r2, #128	; 0x80
 800037e:	b2d1      	uxtb	r1, r2
 8000380:	4a2a      	ldr	r2, [pc, #168]	; (800042c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000382:	009b      	lsls	r3, r3, #2
 8000384:	4413      	add	r3, r2
 8000386:	460a      	mov	r2, r1
 8000388:	705a      	strb	r2, [r3, #1]
						rxParity_bit += 1;
 800038a:	4b2b      	ldr	r3, [pc, #172]	; (8000438 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	3301      	adds	r3, #1
 8000390:	4a29      	ldr	r2, [pc, #164]	; (8000438 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000392:	6013      	str	r3, [r2, #0]
				if(('y' == Uart_Rx_trigger) && ('y' == Uart_Rx_parity)){
 8000394:	4b29      	ldr	r3, [pc, #164]	; (800043c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	2b79      	cmp	r3, #121	; 0x79
 800039a:	f040 8095 	bne.w	80004c8 <HAL_TIM_PeriodElapsedCallback+0x358>
 800039e:	4b29      	ldr	r3, [pc, #164]	; (8000444 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	2b79      	cmp	r3, #121	; 0x79
 80003a4:	f040 8090 	bne.w	80004c8 <HAL_TIM_PeriodElapsedCallback+0x358>
					Uart_Rx_trigger = 'n';
 80003a8:	4b24      	ldr	r3, [pc, #144]	; (800043c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80003aa:	226e      	movs	r2, #110	; 0x6e
 80003ac:	701a      	strb	r2, [r3, #0]
					if('e' == Uart_Rx_Parity_Mode){
 80003ae:	4b28      	ldr	r3, [pc, #160]	; (8000450 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	2b65      	cmp	r3, #101	; 0x65
 80003b4:	d156      	bne.n	8000464 <HAL_TIM_PeriodElapsedCallback+0x2f4>
						if(((rxParity_bit % 2) == 0) && (0 == rxBit_value)){
 80003b6:	4b20      	ldr	r3, [pc, #128]	; (8000438 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f003 0301 	and.w	r3, r3, #1
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d10b      	bne.n	80003da <HAL_TIM_PeriodElapsedCallback+0x26a>
 80003c2:	4b22      	ldr	r3, [pc, #136]	; (800044c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d107      	bne.n	80003da <HAL_TIM_PeriodElapsedCallback+0x26a>
							UartRxData[rxByte_cnt].parity = 'e';
 80003ca:	4b17      	ldr	r3, [pc, #92]	; (8000428 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4a17      	ldr	r2, [pc, #92]	; (800042c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80003d0:	009b      	lsls	r3, r3, #2
 80003d2:	4413      	add	r3, r2
 80003d4:	2265      	movs	r2, #101	; 0x65
 80003d6:	709a      	strb	r2, [r3, #2]
 80003d8:	e076      	b.n	80004c8 <HAL_TIM_PeriodElapsedCallback+0x358>
						}else if(((rxParity_bit % 2) == 1) && (1 == rxBit_value)){
 80003da:	4b17      	ldr	r3, [pc, #92]	; (8000438 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	f003 0301 	and.w	r3, r3, #1
 80003e4:	bfb8      	it	lt
 80003e6:	425b      	neglt	r3, r3
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	d133      	bne.n	8000454 <HAL_TIM_PeriodElapsedCallback+0x2e4>
 80003ec:	4b17      	ldr	r3, [pc, #92]	; (800044c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	d12f      	bne.n	8000454 <HAL_TIM_PeriodElapsedCallback+0x2e4>
							UartRxData[rxByte_cnt].parity = 'e';
 80003f4:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a0c      	ldr	r2, [pc, #48]	; (800042c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80003fa:	009b      	lsls	r3, r3, #2
 80003fc:	4413      	add	r3, r2
 80003fe:	2265      	movs	r2, #101	; 0x65
 8000400:	709a      	strb	r2, [r3, #2]
 8000402:	e061      	b.n	80004c8 <HAL_TIM_PeriodElapsedCallback+0x358>
 8000404:	20000160 	.word	0x20000160
 8000408:	20000154 	.word	0x20000154
 800040c:	2000013c 	.word	0x2000013c
 8000410:	2000009c 	.word	0x2000009c
 8000414:	20000140 	.word	0x20000140
 8000418:	2000012d 	.word	0x2000012d
 800041c:	2000012f 	.word	0x2000012f
 8000420:	2000020c 	.word	0x2000020c
 8000424:	40011000 	.word	0x40011000
 8000428:	20000158 	.word	0x20000158
 800042c:	200000a0 	.word	0x200000a0
 8000430:	20000134 	.word	0x20000134
 8000434:	20000138 	.word	0x20000138
 8000438:	20000128 	.word	0x20000128
 800043c:	2000015c 	.word	0x2000015c
 8000440:	20000130 	.word	0x20000130
 8000444:	2000012c 	.word	0x2000012c
 8000448:	20000098 	.word	0x20000098
 800044c:	20000220 	.word	0x20000220
 8000450:	2000012e 	.word	0x2000012e
							UartRxData[rxByte_cnt].parity = 'f';
 8000454:	4b2f      	ldr	r3, [pc, #188]	; (8000514 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a2f      	ldr	r2, [pc, #188]	; (8000518 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 800045a:	009b      	lsls	r3, r3, #2
 800045c:	4413      	add	r3, r2
 800045e:	2266      	movs	r2, #102	; 0x66
 8000460:	709a      	strb	r2, [r3, #2]
 8000462:	e031      	b.n	80004c8 <HAL_TIM_PeriodElapsedCallback+0x358>
					}else if('o' == Uart_Rx_Parity_Mode){
 8000464:	4b2d      	ldr	r3, [pc, #180]	; (800051c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b6f      	cmp	r3, #111	; 0x6f
 800046a:	d12d      	bne.n	80004c8 <HAL_TIM_PeriodElapsedCallback+0x358>
						if(((rxParity_bit % 2) == 0) && (1 == rxBit_value)){
 800046c:	4b2c      	ldr	r3, [pc, #176]	; (8000520 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	f003 0301 	and.w	r3, r3, #1
 8000474:	2b00      	cmp	r3, #0
 8000476:	d10b      	bne.n	8000490 <HAL_TIM_PeriodElapsedCallback+0x320>
 8000478:	4b2a      	ldr	r3, [pc, #168]	; (8000524 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2b01      	cmp	r3, #1
 800047e:	d107      	bne.n	8000490 <HAL_TIM_PeriodElapsedCallback+0x320>
							UartRxData[rxByte_cnt].parity = 'o';
 8000480:	4b24      	ldr	r3, [pc, #144]	; (8000514 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a24      	ldr	r2, [pc, #144]	; (8000518 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8000486:	009b      	lsls	r3, r3, #2
 8000488:	4413      	add	r3, r2
 800048a:	226f      	movs	r2, #111	; 0x6f
 800048c:	709a      	strb	r2, [r3, #2]
 800048e:	e01b      	b.n	80004c8 <HAL_TIM_PeriodElapsedCallback+0x358>
						}else if(((rxParity_bit % 2) == 1) && (0 == rxBit_value)){
 8000490:	4b23      	ldr	r3, [pc, #140]	; (8000520 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	2b00      	cmp	r3, #0
 8000496:	f003 0301 	and.w	r3, r3, #1
 800049a:	bfb8      	it	lt
 800049c:	425b      	neglt	r3, r3
 800049e:	2b01      	cmp	r3, #1
 80004a0:	d10b      	bne.n	80004ba <HAL_TIM_PeriodElapsedCallback+0x34a>
 80004a2:	4b20      	ldr	r3, [pc, #128]	; (8000524 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d107      	bne.n	80004ba <HAL_TIM_PeriodElapsedCallback+0x34a>
							UartRxData[rxByte_cnt].parity = 'o';
 80004aa:	4b1a      	ldr	r3, [pc, #104]	; (8000514 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a1a      	ldr	r2, [pc, #104]	; (8000518 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 80004b0:	009b      	lsls	r3, r3, #2
 80004b2:	4413      	add	r3, r2
 80004b4:	226f      	movs	r2, #111	; 0x6f
 80004b6:	709a      	strb	r2, [r3, #2]
 80004b8:	e006      	b.n	80004c8 <HAL_TIM_PeriodElapsedCallback+0x358>
							UartRxData[rxByte_cnt].parity = 'f';
 80004ba:	4b16      	ldr	r3, [pc, #88]	; (8000514 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4a16      	ldr	r2, [pc, #88]	; (8000518 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 80004c0:	009b      	lsls	r3, r3, #2
 80004c2:	4413      	add	r3, r2
 80004c4:	2266      	movs	r2, #102	; 0x66
 80004c6:	709a      	strb	r2, [r3, #2]
				if(('y' == Uart_Rx_trigger) && ('y' == Uart_Rx_stop)){
 80004c8:	4b17      	ldr	r3, [pc, #92]	; (8000528 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	2b79      	cmp	r3, #121	; 0x79
 80004ce:	d11c      	bne.n	800050a <HAL_TIM_PeriodElapsedCallback+0x39a>
 80004d0:	4b16      	ldr	r3, [pc, #88]	; (800052c <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2b79      	cmp	r3, #121	; 0x79
 80004d6:	d118      	bne.n	800050a <HAL_TIM_PeriodElapsedCallback+0x39a>
					Uart_Rx_trigger = 'n';
 80004d8:	4b13      	ldr	r3, [pc, #76]	; (8000528 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 80004da:	226e      	movs	r2, #110	; 0x6e
 80004dc:	701a      	strb	r2, [r3, #0]
					Uart_Rx_active = 'n';
 80004de:	4b14      	ldr	r3, [pc, #80]	; (8000530 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 80004e0:	226e      	movs	r2, #110	; 0x6e
 80004e2:	701a      	strb	r2, [r3, #0]
					if(1 == rxBit_value){
 80004e4:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	2b01      	cmp	r3, #1
 80004ea:	d107      	bne.n	80004fc <HAL_TIM_PeriodElapsedCallback+0x38c>
						UartRxData[rxByte_cnt].stop = 'y';
 80004ec:	4b09      	ldr	r3, [pc, #36]	; (8000514 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a09      	ldr	r2, [pc, #36]	; (8000518 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 80004f2:	009b      	lsls	r3, r3, #2
 80004f4:	4413      	add	r3, r2
 80004f6:	2279      	movs	r2, #121	; 0x79
 80004f8:	70da      	strb	r2, [r3, #3]
}
 80004fa:	e006      	b.n	800050a <HAL_TIM_PeriodElapsedCallback+0x39a>
						UartRxData[rxByte_cnt].stop = 'n';
 80004fc:	4b05      	ldr	r3, [pc, #20]	; (8000514 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a05      	ldr	r2, [pc, #20]	; (8000518 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	4413      	add	r3, r2
 8000506:	226e      	movs	r2, #110	; 0x6e
 8000508:	70da      	strb	r2, [r3, #3]
}
 800050a:	bf00      	nop
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000158 	.word	0x20000158
 8000518:	200000a0 	.word	0x200000a0
 800051c:	2000012e 	.word	0x2000012e
 8000520:	20000128 	.word	0x20000128
 8000524:	20000220 	.word	0x20000220
 8000528:	2000015c 	.word	0x2000015c
 800052c:	20000098 	.word	0x20000098
 8000530:	2000012f 	.word	0x2000012f

08000534 <Uart_Tx_Byte>:
//----- timer callback ----------------------------------------------------------------------------

//----- uart tx mode ------------------------------------------------------------------------------
void Uart_Tx_Byte(char TxData, char Parity)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	460a      	mov	r2, r1
 800053e:	71fb      	strb	r3, [r7, #7]
 8000540:	4613      	mov	r3, r2
 8000542:	71bb      	strb	r3, [r7, #6]
	char chExit = 'n';
 8000544:	236e      	movs	r3, #110	; 0x6e
 8000546:	73fb      	strb	r3, [r7, #15]
	char chComp = 0x01;
 8000548:	2301      	movs	r3, #1
 800054a:	73bb      	strb	r3, [r7, #14]
	int ParityBit_cnt = 0;
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]

	txBit_cnt = 0;
 8000550:	4b5c      	ldr	r3, [pc, #368]	; (80006c4 <Uart_Tx_Byte+0x190>)
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
	Uart_Tx_flag = 'y';
 8000556:	4b5c      	ldr	r3, [pc, #368]	; (80006c8 <Uart_Tx_Byte+0x194>)
 8000558:	2279      	movs	r2, #121	; 0x79
 800055a:	701a      	strb	r2, [r3, #0]
	Uart_Tx_trigger = 'n';
 800055c:	4b5b      	ldr	r3, [pc, #364]	; (80006cc <Uart_Tx_Byte+0x198>)
 800055e:	226e      	movs	r2, #110	; 0x6e
 8000560:	701a      	strb	r2, [r3, #0]

	while(1){
		if(('y' == Uart_Tx_trigger) && (txBit_cnt == 1)){ // idle
 8000562:	4b5a      	ldr	r3, [pc, #360]	; (80006cc <Uart_Tx_Byte+0x198>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	2b79      	cmp	r3, #121	; 0x79
 8000568:	d10c      	bne.n	8000584 <Uart_Tx_Byte+0x50>
 800056a:	4b56      	ldr	r3, [pc, #344]	; (80006c4 <Uart_Tx_Byte+0x190>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	2b01      	cmp	r3, #1
 8000570:	d108      	bne.n	8000584 <Uart_Tx_Byte+0x50>
			Uart_Tx_trigger = 'n';
 8000572:	4b56      	ldr	r3, [pc, #344]	; (80006cc <Uart_Tx_Byte+0x198>)
 8000574:	226e      	movs	r2, #110	; 0x6e
 8000576:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000578:	2201      	movs	r2, #1
 800057a:	2101      	movs	r1, #1
 800057c:	4854      	ldr	r0, [pc, #336]	; (80006d0 <Uart_Tx_Byte+0x19c>)
 800057e:	f000 ff78 	bl	8001472 <HAL_GPIO_WritePin>
 8000582:	e08a      	b.n	800069a <Uart_Tx_Byte+0x166>
		}else if(('y' == Uart_Tx_trigger) && (txBit_cnt == 2)){ // start
 8000584:	4b51      	ldr	r3, [pc, #324]	; (80006cc <Uart_Tx_Byte+0x198>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b79      	cmp	r3, #121	; 0x79
 800058a:	d10c      	bne.n	80005a6 <Uart_Tx_Byte+0x72>
 800058c:	4b4d      	ldr	r3, [pc, #308]	; (80006c4 <Uart_Tx_Byte+0x190>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2b02      	cmp	r3, #2
 8000592:	d108      	bne.n	80005a6 <Uart_Tx_Byte+0x72>
			Uart_Tx_trigger = 'n';
 8000594:	4b4d      	ldr	r3, [pc, #308]	; (80006cc <Uart_Tx_Byte+0x198>)
 8000596:	226e      	movs	r2, #110	; 0x6e
 8000598:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	2101      	movs	r1, #1
 800059e:	484c      	ldr	r0, [pc, #304]	; (80006d0 <Uart_Tx_Byte+0x19c>)
 80005a0:	f000 ff67 	bl	8001472 <HAL_GPIO_WritePin>
 80005a4:	e079      	b.n	800069a <Uart_Tx_Byte+0x166>
		}else if(('y' == Uart_Tx_trigger) && ((txBit_cnt >= 3) && (txBit_cnt <= 10))){ // bit 0~7
 80005a6:	4b49      	ldr	r3, [pc, #292]	; (80006cc <Uart_Tx_Byte+0x198>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b79      	cmp	r3, #121	; 0x79
 80005ac:	d123      	bne.n	80005f6 <Uart_Tx_Byte+0xc2>
 80005ae:	4b45      	ldr	r3, [pc, #276]	; (80006c4 <Uart_Tx_Byte+0x190>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2b02      	cmp	r3, #2
 80005b4:	dd1f      	ble.n	80005f6 <Uart_Tx_Byte+0xc2>
 80005b6:	4b43      	ldr	r3, [pc, #268]	; (80006c4 <Uart_Tx_Byte+0x190>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2b0a      	cmp	r3, #10
 80005bc:	dc1b      	bgt.n	80005f6 <Uart_Tx_Byte+0xc2>
			Uart_Tx_trigger = 'n';
 80005be:	4b43      	ldr	r3, [pc, #268]	; (80006cc <Uart_Tx_Byte+0x198>)
 80005c0:	226e      	movs	r2, #110	; 0x6e
 80005c2:	701a      	strb	r2, [r3, #0]
			if((TxData & chComp) == chComp){
 80005c4:	79fa      	ldrb	r2, [r7, #7]
 80005c6:	7bbb      	ldrb	r3, [r7, #14]
 80005c8:	4013      	ands	r3, r2
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	7bba      	ldrb	r2, [r7, #14]
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d108      	bne.n	80005e4 <Uart_Tx_Byte+0xb0>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	2101      	movs	r1, #1
 80005d6:	483e      	ldr	r0, [pc, #248]	; (80006d0 <Uart_Tx_Byte+0x19c>)
 80005d8:	f000 ff4b 	bl	8001472 <HAL_GPIO_WritePin>
				ParityBit_cnt += 1;
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	3301      	adds	r3, #1
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	e004      	b.n	80005ee <Uart_Tx_Byte+0xba>
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2101      	movs	r1, #1
 80005e8:	4839      	ldr	r0, [pc, #228]	; (80006d0 <Uart_Tx_Byte+0x19c>)
 80005ea:	f000 ff42 	bl	8001472 <HAL_GPIO_WritePin>
			}
			chComp <<= 1;
 80005ee:	7bbb      	ldrb	r3, [r7, #14]
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	73bb      	strb	r3, [r7, #14]
 80005f4:	e051      	b.n	800069a <Uart_Tx_Byte+0x166>
		}else if(('y' == Uart_Tx_trigger) && (txBit_cnt == 11)){ // [parity : none/even/odd] or [stop]
 80005f6:	4b35      	ldr	r3, [pc, #212]	; (80006cc <Uart_Tx_Byte+0x198>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b79      	cmp	r3, #121	; 0x79
 80005fc:	d139      	bne.n	8000672 <Uart_Tx_Byte+0x13e>
 80005fe:	4b31      	ldr	r3, [pc, #196]	; (80006c4 <Uart_Tx_Byte+0x190>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2b0b      	cmp	r3, #11
 8000604:	d135      	bne.n	8000672 <Uart_Tx_Byte+0x13e>
			Uart_Tx_trigger = 'n';
 8000606:	4b31      	ldr	r3, [pc, #196]	; (80006cc <Uart_Tx_Byte+0x198>)
 8000608:	226e      	movs	r2, #110	; 0x6e
 800060a:	701a      	strb	r2, [r3, #0]
			if('n' == Parity){	// stop
 800060c:	79bb      	ldrb	r3, [r7, #6]
 800060e:	2b6e      	cmp	r3, #110	; 0x6e
 8000610:	d107      	bne.n	8000622 <Uart_Tx_Byte+0xee>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000612:	2201      	movs	r2, #1
 8000614:	2101      	movs	r1, #1
 8000616:	482e      	ldr	r0, [pc, #184]	; (80006d0 <Uart_Tx_Byte+0x19c>)
 8000618:	f000 ff2b 	bl	8001472 <HAL_GPIO_WritePin>
				chExit = 'y';
 800061c:	2379      	movs	r3, #121	; 0x79
 800061e:	73fb      	strb	r3, [r7, #15]
			if('n' == Parity){	// stop
 8000620:	e03a      	b.n	8000698 <Uart_Tx_Byte+0x164>
			}else if('e' == Parity){
 8000622:	79bb      	ldrb	r3, [r7, #6]
 8000624:	2b65      	cmp	r3, #101	; 0x65
 8000626:	d110      	bne.n	800064a <Uart_Tx_Byte+0x116>
				if((ParityBit_cnt % 2) == 0){
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	2b00      	cmp	r3, #0
 8000630:	d105      	bne.n	800063e <Uart_Tx_Byte+0x10a>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	2101      	movs	r1, #1
 8000636:	4826      	ldr	r0, [pc, #152]	; (80006d0 <Uart_Tx_Byte+0x19c>)
 8000638:	f000 ff1b 	bl	8001472 <HAL_GPIO_WritePin>
			if('n' == Parity){	// stop
 800063c:	e02c      	b.n	8000698 <Uart_Tx_Byte+0x164>
				}else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800063e:	2201      	movs	r2, #1
 8000640:	2101      	movs	r1, #1
 8000642:	4823      	ldr	r0, [pc, #140]	; (80006d0 <Uart_Tx_Byte+0x19c>)
 8000644:	f000 ff15 	bl	8001472 <HAL_GPIO_WritePin>
			if('n' == Parity){	// stop
 8000648:	e026      	b.n	8000698 <Uart_Tx_Byte+0x164>
				}
			}else if('o' == Parity){
 800064a:	79bb      	ldrb	r3, [r7, #6]
 800064c:	2b6f      	cmp	r3, #111	; 0x6f
 800064e:	d123      	bne.n	8000698 <Uart_Tx_Byte+0x164>
				if((ParityBit_cnt % 2) == 0){
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	2b00      	cmp	r3, #0
 8000658:	d105      	bne.n	8000666 <Uart_Tx_Byte+0x132>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800065a:	2201      	movs	r2, #1
 800065c:	2101      	movs	r1, #1
 800065e:	481c      	ldr	r0, [pc, #112]	; (80006d0 <Uart_Tx_Byte+0x19c>)
 8000660:	f000 ff07 	bl	8001472 <HAL_GPIO_WritePin>
			if('n' == Parity){	// stop
 8000664:	e018      	b.n	8000698 <Uart_Tx_Byte+0x164>
				}else{
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	2101      	movs	r1, #1
 800066a:	4819      	ldr	r0, [pc, #100]	; (80006d0 <Uart_Tx_Byte+0x19c>)
 800066c:	f000 ff01 	bl	8001472 <HAL_GPIO_WritePin>
			if('n' == Parity){	// stop
 8000670:	e012      	b.n	8000698 <Uart_Tx_Byte+0x164>
				}
			}
		}else if(('y' == Uart_Tx_trigger) && (txBit_cnt == 12)){ // stop
 8000672:	4b16      	ldr	r3, [pc, #88]	; (80006cc <Uart_Tx_Byte+0x198>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b79      	cmp	r3, #121	; 0x79
 8000678:	d10f      	bne.n	800069a <Uart_Tx_Byte+0x166>
 800067a:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <Uart_Tx_Byte+0x190>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2b0c      	cmp	r3, #12
 8000680:	d10b      	bne.n	800069a <Uart_Tx_Byte+0x166>
			Uart_Tx_trigger = 'n';
 8000682:	4b12      	ldr	r3, [pc, #72]	; (80006cc <Uart_Tx_Byte+0x198>)
 8000684:	226e      	movs	r2, #110	; 0x6e
 8000686:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000688:	2201      	movs	r2, #1
 800068a:	2101      	movs	r1, #1
 800068c:	4810      	ldr	r0, [pc, #64]	; (80006d0 <Uart_Tx_Byte+0x19c>)
 800068e:	f000 fef0 	bl	8001472 <HAL_GPIO_WritePin>
			chExit = 'y';
 8000692:	2379      	movs	r3, #121	; 0x79
 8000694:	73fb      	strb	r3, [r7, #15]
 8000696:	e000      	b.n	800069a <Uart_Tx_Byte+0x166>
			if('n' == Parity){	// stop
 8000698:	bf00      	nop
		}
		if(('y' == Uart_Tx_trigger) && ('y' == chExit)){
 800069a:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <Uart_Tx_Byte+0x198>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b79      	cmp	r3, #121	; 0x79
 80006a0:	f47f af5f 	bne.w	8000562 <Uart_Tx_Byte+0x2e>
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	2b79      	cmp	r3, #121	; 0x79
 80006a8:	f47f af5b 	bne.w	8000562 <Uart_Tx_Byte+0x2e>
			Uart_Tx_trigger = 'n';
 80006ac:	4b07      	ldr	r3, [pc, #28]	; (80006cc <Uart_Tx_Byte+0x198>)
 80006ae:	226e      	movs	r2, #110	; 0x6e
 80006b0:	701a      	strb	r2, [r3, #0]
			Uart_Tx_flag = 'n';
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <Uart_Tx_Byte+0x194>)
 80006b4:	226e      	movs	r2, #110	; 0x6e
 80006b6:	701a      	strb	r2, [r3, #0]
			break;
 80006b8:	bf00      	nop
		}
	}
}
 80006ba:	bf00      	nop
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	2000009c 	.word	0x2000009c
 80006c8:	20000154 	.word	0x20000154
 80006cc:	20000140 	.word	0x20000140
 80006d0:	40010800 	.word	0x40010800

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006da:	f000 fbc7 	bl	8000e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006de:	f000 f8fb 	bl	80008d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e2:	f000 f9b1 	bl	8000a48 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006e6:	f000 f985 	bl	80009f4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80006ea:	f000 f937 	bl	800095c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  printf("---uc100 uart : gpio---\r\n");
 80006ee:	4860      	ldr	r0, [pc, #384]	; (8000870 <main+0x19c>)
 80006f0:	f002 f97a 	bl	80029e8 <puts>

  //----- timer2 -----------------------------------------------------------------------------------
  tim2_base_cnt = 0;
 80006f4:	4b5f      	ldr	r3, [pc, #380]	; (8000874 <main+0x1a0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80006fa:	2201      	movs	r2, #1
 80006fc:	2101      	movs	r1, #1
 80006fe:	485e      	ldr	r0, [pc, #376]	; (8000878 <main+0x1a4>)
 8000700:	f000 feb7 	bl	8001472 <HAL_GPIO_WritePin>

  tim2_it_start = HAL_TIM_Base_Start_IT(&htim2);
 8000704:	485d      	ldr	r0, [pc, #372]	; (800087c <main+0x1a8>)
 8000706:	f001 fb73 	bl	8001df0 <HAL_TIM_Base_Start_IT>
 800070a:	4603      	mov	r3, r0
 800070c:	70fb      	strb	r3, [r7, #3]
  if(HAL_OK == tim2_it_start){
 800070e:	78fb      	ldrb	r3, [r7, #3]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d103      	bne.n	800071c <main+0x48>
	  printf("HAL_TIM_Base_Start_IT OK\r\n");
 8000714:	485a      	ldr	r0, [pc, #360]	; (8000880 <main+0x1ac>)
 8000716:	f002 f967 	bl	80029e8 <puts>
 800071a:	e002      	b.n	8000722 <main+0x4e>
  }else{
	  printf("HAL_TIM_Base_Start_IT error\r\n");
 800071c:	4859      	ldr	r0, [pc, #356]	; (8000884 <main+0x1b0>)
 800071e:	f002 f963 	bl	80029e8 <puts>
  }
  //----- timer2 -----------------------------------------------------------------------------------

  //----- uart tx mode ------------------------------------------------------------------------------
  Uart_Tx_Parity_Mode = 'n'; // 'n':none, 'e':even, 'o':odd
 8000722:	4b59      	ldr	r3, [pc, #356]	; (8000888 <main+0x1b4>)
 8000724:	226e      	movs	r2, #110	; 0x6e
 8000726:	701a      	strb	r2, [r3, #0]
  txBit_cnt = 0;
 8000728:	4b58      	ldr	r3, [pc, #352]	; (800088c <main+0x1b8>)
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
  Uart_Tx_flag = 'n';
 800072e:	4b58      	ldr	r3, [pc, #352]	; (8000890 <main+0x1bc>)
 8000730:	226e      	movs	r2, #110	; 0x6e
 8000732:	701a      	strb	r2, [r3, #0]
  Uart_Tx_trigger = 'n';
 8000734:	4b57      	ldr	r3, [pc, #348]	; (8000894 <main+0x1c0>)
 8000736:	226e      	movs	r2, #110	; 0x6e
 8000738:	701a      	strb	r2, [r3, #0]

  UartTxData[0] = 'a';
 800073a:	4b57      	ldr	r3, [pc, #348]	; (8000898 <main+0x1c4>)
 800073c:	2261      	movs	r2, #97	; 0x61
 800073e:	701a      	strb	r2, [r3, #0]
  //----- uart tx mode ------------------------------------------------------------------------------

  //----- uart rx mode ------------------------------------------------------------------------------
  Uart_Rx_Parity_Mode = 'n'; // 'n':none, 'e':even, 'o':odd
 8000740:	4b56      	ldr	r3, [pc, #344]	; (800089c <main+0x1c8>)
 8000742:	226e      	movs	r2, #110	; 0x6e
 8000744:	701a      	strb	r2, [r3, #0]
  rxByte_cnt = 0;
 8000746:	4b56      	ldr	r3, [pc, #344]	; (80008a0 <main+0x1cc>)
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
  rxBit_cnt = 0;
 800074c:	4b55      	ldr	r3, [pc, #340]	; (80008a4 <main+0x1d0>)
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
  rxSamp_cnt = 0;
 8000752:	4b55      	ldr	r3, [pc, #340]	; (80008a8 <main+0x1d4>)
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
  Uart_Rx_flag = 'n';
 8000758:	4b54      	ldr	r3, [pc, #336]	; (80008ac <main+0x1d8>)
 800075a:	226e      	movs	r2, #110	; 0x6e
 800075c:	701a      	strb	r2, [r3, #0]
  Uart_Rx_active = 'n';
 800075e:	4b54      	ldr	r3, [pc, #336]	; (80008b0 <main+0x1dc>)
 8000760:	226e      	movs	r2, #110	; 0x6e
 8000762:	701a      	strb	r2, [r3, #0]
  Uart_Rx_Temp = 0x00;
 8000764:	4b53      	ldr	r3, [pc, #332]	; (80008b4 <main+0x1e0>)
 8000766:	2200      	movs	r2, #0
 8000768:	701a      	strb	r2, [r3, #0]

  //-----uart rx mode : start-----
  Uart_Rx_flag = 'y';
 800076a:	4b50      	ldr	r3, [pc, #320]	; (80008ac <main+0x1d8>)
 800076c:	2279      	movs	r2, #121	; 0x79
 800076e:	701a      	strb	r2, [r3, #0]
  Uart_Rx_active = 'n';
 8000770:	4b4f      	ldr	r3, [pc, #316]	; (80008b0 <main+0x1dc>)
 8000772:	226e      	movs	r2, #110	; 0x6e
 8000774:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  HAL_Delay(1000);
 8000776:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800077a:	f000 fbd9 	bl	8000f30 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800077e:	2120      	movs	r1, #32
 8000780:	483d      	ldr	r0, [pc, #244]	; (8000878 <main+0x1a4>)
 8000782:	f000 fe8e 	bl	80014a2 <HAL_GPIO_TogglePin>

	  //----- distance -----
	  Uart_Tx_Byte(0x55, 'n');
 8000786:	216e      	movs	r1, #110	; 0x6e
 8000788:	2055      	movs	r0, #85	; 0x55
 800078a:	f7ff fed3 	bl	8000534 <Uart_Tx_Byte>
	  //printf("Uart_Tx_Byte(Distance)\r\n");
	  HAL_Delay(100);
 800078e:	2064      	movs	r0, #100	; 0x64
 8000790:	f000 fbce 	bl	8000f30 <HAL_Delay>
	  if(('n' == Uart_Rx_active) && (2 <= rxByte_cnt)){
 8000794:	4b46      	ldr	r3, [pc, #280]	; (80008b0 <main+0x1dc>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b6e      	cmp	r3, #110	; 0x6e
 800079a:	d128      	bne.n	80007ee <main+0x11a>
 800079c:	4b40      	ldr	r3, [pc, #256]	; (80008a0 <main+0x1cc>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	dd24      	ble.n	80007ee <main+0x11a>
		  for(m = 1; m <= rxByte_cnt; m++){
 80007a4:	2301      	movs	r3, #1
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	e002      	b.n	80007b0 <main+0xdc>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	3301      	adds	r3, #1
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	4b3b      	ldr	r3, [pc, #236]	; (80008a0 <main+0x1cc>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	ddf7      	ble.n	80007aa <main+0xd6>
			  //printf("---rx:%c---data[%d]=0x%02x,parity=%c,stop=%c\r\n",Uart_Rx_Parity_Mode,m,UartRxData[m].data,UartRxData[m].parity,UartRxData[m].stop);
		  }
		  if(2 == rxByte_cnt){
 80007ba:	4b39      	ldr	r3, [pc, #228]	; (80008a0 <main+0x1cc>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2b02      	cmp	r3, #2
 80007c0:	d111      	bne.n	80007e6 <main+0x112>
			  Distance = (UartRxData[1].data << 8) + UartRxData[2].data;
 80007c2:	4b3d      	ldr	r3, [pc, #244]	; (80008b8 <main+0x1e4>)
 80007c4:	795b      	ldrb	r3, [r3, #5]
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	021b      	lsls	r3, r3, #8
 80007ca:	b29a      	uxth	r2, r3
 80007cc:	4b3a      	ldr	r3, [pc, #232]	; (80008b8 <main+0x1e4>)
 80007ce:	7a5b      	ldrb	r3, [r3, #9]
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	4413      	add	r3, r2
 80007d4:	b29a      	uxth	r2, r3
 80007d6:	4b39      	ldr	r3, [pc, #228]	; (80008bc <main+0x1e8>)
 80007d8:	801a      	strh	r2, [r3, #0]
			  printf("---UC-100 : Distance = %d---\r\n",Distance);
 80007da:	4b38      	ldr	r3, [pc, #224]	; (80008bc <main+0x1e8>)
 80007dc:	881b      	ldrh	r3, [r3, #0]
 80007de:	4619      	mov	r1, r3
 80007e0:	4837      	ldr	r0, [pc, #220]	; (80008c0 <main+0x1ec>)
 80007e2:	f002 f88d 	bl	8002900 <iprintf>
		  }
		  rxByte_cnt = 0;
 80007e6:	4b2e      	ldr	r3, [pc, #184]	; (80008a0 <main+0x1cc>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	e002      	b.n	80007f4 <main+0x120>
	  }else{
		  printf("--Uart_Rx_Byte error(distance)\r\n");
 80007ee:	4835      	ldr	r0, [pc, #212]	; (80008c4 <main+0x1f0>)
 80007f0:	f002 f8fa 	bl	80029e8 <puts>
	  }
	  //----- distance -----

	  HAL_Delay(1000);
 80007f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007f8:	f000 fb9a 	bl	8000f30 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80007fc:	2120      	movs	r1, #32
 80007fe:	481e      	ldr	r0, [pc, #120]	; (8000878 <main+0x1a4>)
 8000800:	f000 fe4f 	bl	80014a2 <HAL_GPIO_TogglePin>

	  //----- temperature -----
	  Uart_Tx_Byte(0x50, 'n');
 8000804:	216e      	movs	r1, #110	; 0x6e
 8000806:	2050      	movs	r0, #80	; 0x50
 8000808:	f7ff fe94 	bl	8000534 <Uart_Tx_Byte>
	  //printf("Uart_Tx_Byte(temperature)\r\n");
	  HAL_Delay(100);
 800080c:	2064      	movs	r0, #100	; 0x64
 800080e:	f000 fb8f 	bl	8000f30 <HAL_Delay>
	  if(('n' == Uart_Rx_active) && (1 <= rxByte_cnt)){
 8000812:	4b27      	ldr	r3, [pc, #156]	; (80008b0 <main+0x1dc>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b6e      	cmp	r3, #110	; 0x6e
 8000818:	d123      	bne.n	8000862 <main+0x18e>
 800081a:	4b21      	ldr	r3, [pc, #132]	; (80008a0 <main+0x1cc>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2b00      	cmp	r3, #0
 8000820:	dd1f      	ble.n	8000862 <main+0x18e>
		  for(m = 1; m <= rxByte_cnt; m++){
 8000822:	2301      	movs	r3, #1
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	e002      	b.n	800082e <main+0x15a>
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3301      	adds	r3, #1
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <main+0x1cc>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	429a      	cmp	r2, r3
 8000836:	ddf7      	ble.n	8000828 <main+0x154>
			 // printf("---rx:%c---data[%d]=0x%02x,parity=%c,stop=%c\r\n",Uart_Rx_Parity_Mode,m,UartRxData[m].data,UartRxData[m].parity,UartRxData[m].stop);
		  }
		  if(1 == rxByte_cnt){
 8000838:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <main+0x1cc>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d10c      	bne.n	800085a <main+0x186>
			  Temperature = UartRxData[1].data - 45;
 8000840:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <main+0x1e4>)
 8000842:	795b      	ldrb	r3, [r3, #5]
 8000844:	b29b      	uxth	r3, r3
 8000846:	3b2d      	subs	r3, #45	; 0x2d
 8000848:	b29a      	uxth	r2, r3
 800084a:	4b1f      	ldr	r3, [pc, #124]	; (80008c8 <main+0x1f4>)
 800084c:	801a      	strh	r2, [r3, #0]
			  printf("---UC-100 : Temperature = %d---\r\n",Temperature);
 800084e:	4b1e      	ldr	r3, [pc, #120]	; (80008c8 <main+0x1f4>)
 8000850:	881b      	ldrh	r3, [r3, #0]
 8000852:	4619      	mov	r1, r3
 8000854:	481d      	ldr	r0, [pc, #116]	; (80008cc <main+0x1f8>)
 8000856:	f002 f853 	bl	8002900 <iprintf>
		  }
		  rxByte_cnt = 0;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <main+0x1cc>)
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	e002      	b.n	8000868 <main+0x194>
	  }else{
		  printf("--Uart_Rx_Byte error(temperature)\r\n");
 8000862:	481b      	ldr	r0, [pc, #108]	; (80008d0 <main+0x1fc>)
 8000864:	f002 f8c0 	bl	80029e8 <puts>
	  }
	  //----- temperature -----

	  printf("---\r\n");
 8000868:	481a      	ldr	r0, [pc, #104]	; (80008d4 <main+0x200>)
 800086a:	f002 f8bd 	bl	80029e8 <puts>
	  HAL_Delay(1000);
 800086e:	e782      	b.n	8000776 <main+0xa2>
 8000870:	080037bc 	.word	0x080037bc
 8000874:	2000013c 	.word	0x2000013c
 8000878:	40010800 	.word	0x40010800
 800087c:	20000160 	.word	0x20000160
 8000880:	080037d8 	.word	0x080037d8
 8000884:	080037f4 	.word	0x080037f4
 8000888:	20000120 	.word	0x20000120
 800088c:	2000009c 	.word	0x2000009c
 8000890:	20000154 	.word	0x20000154
 8000894:	20000140 	.word	0x20000140
 8000898:	200001a8 	.word	0x200001a8
 800089c:	2000012e 	.word	0x2000012e
 80008a0:	20000158 	.word	0x20000158
 80008a4:	20000134 	.word	0x20000134
 80008a8:	20000138 	.word	0x20000138
 80008ac:	2000012d 	.word	0x2000012d
 80008b0:	2000012f 	.word	0x2000012f
 80008b4:	2000020c 	.word	0x2000020c
 80008b8:	200000a0 	.word	0x200000a0
 80008bc:	20000122 	.word	0x20000122
 80008c0:	08003814 	.word	0x08003814
 80008c4:	08003834 	.word	0x08003834
 80008c8:	20000124 	.word	0x20000124
 80008cc:	08003854 	.word	0x08003854
 80008d0:	08003878 	.word	0x08003878
 80008d4:	0800389c 	.word	0x0800389c

080008d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b090      	sub	sp, #64	; 0x40
 80008dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008de:	f107 0318 	add.w	r3, r7, #24
 80008e2:	2228      	movs	r2, #40	; 0x28
 80008e4:	2100      	movs	r1, #0
 80008e6:	4618      	mov	r0, r3
 80008e8:	f002 f802 	bl	80028f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008fa:	2302      	movs	r3, #2
 80008fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008fe:	2301      	movs	r3, #1
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000902:	2310      	movs	r3, #16
 8000904:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000906:	2302      	movs	r3, #2
 8000908:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800090a:	2300      	movs	r3, #0
 800090c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800090e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000912:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000914:	f107 0318 	add.w	r3, r7, #24
 8000918:	4618      	mov	r0, r3
 800091a:	f000 fdfd 	bl	8001518 <HAL_RCC_OscConfig>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000924:	f000 f90a 	bl	8000b3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000928:	230f      	movs	r3, #15
 800092a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800092c:	2302      	movs	r3, #2
 800092e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000930:	2300      	movs	r3, #0
 8000932:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000938:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2102      	movs	r1, #2
 8000942:	4618      	mov	r0, r3
 8000944:	f001 f868 	bl	8001a18 <HAL_RCC_ClockConfig>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800094e:	f000 f8f5 	bl	8000b3c <Error_Handler>
  }
}
 8000952:	bf00      	nop
 8000954:	3740      	adds	r7, #64	; 0x40
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
	...

0800095c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000962:	f107 0308 	add.w	r3, r7, #8
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000970:	463b      	mov	r3, r7
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000978:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <MX_TIM2_Init+0x94>)
 800097a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800097e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8000980:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <MX_TIM2_Init+0x94>)
 8000982:	223f      	movs	r2, #63	; 0x3f
 8000984:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000986:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <MX_TIM2_Init+0x94>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 26-1;
 800098c:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <MX_TIM2_Init+0x94>)
 800098e:	2219      	movs	r2, #25
 8000990:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000992:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <MX_TIM2_Init+0x94>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000998:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <MX_TIM2_Init+0x94>)
 800099a:	2200      	movs	r2, #0
 800099c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800099e:	4814      	ldr	r0, [pc, #80]	; (80009f0 <MX_TIM2_Init+0x94>)
 80009a0:	f001 f9d6 	bl	8001d50 <HAL_TIM_Base_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80009aa:	f000 f8c7 	bl	8000b3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009b4:	f107 0308 	add.w	r3, r7, #8
 80009b8:	4619      	mov	r1, r3
 80009ba:	480d      	ldr	r0, [pc, #52]	; (80009f0 <MX_TIM2_Init+0x94>)
 80009bc:	f001 fb72 	bl	80020a4 <HAL_TIM_ConfigClockSource>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80009c6:	f000 f8b9 	bl	8000b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ca:	2300      	movs	r3, #0
 80009cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009d2:	463b      	mov	r3, r7
 80009d4:	4619      	mov	r1, r3
 80009d6:	4806      	ldr	r0, [pc, #24]	; (80009f0 <MX_TIM2_Init+0x94>)
 80009d8:	f001 fd38 	bl	800244c <HAL_TIMEx_MasterConfigSynchronization>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80009e2:	f000 f8ab 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	3718      	adds	r7, #24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000160 	.word	0x20000160

080009f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 80009fa:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <MX_USART2_UART_Init+0x50>)
 80009fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a2c:	f001 fd7e 	bl	800252c <HAL_UART_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a36:	f000 f881 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200001c8 	.word	0x200001c8
 8000a44:	40004400 	.word	0x40004400

08000a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b088      	sub	sp, #32
 8000a4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4e:	f107 0310 	add.w	r3, r7, #16
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5c:	4b33      	ldr	r3, [pc, #204]	; (8000b2c <MX_GPIO_Init+0xe4>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	4a32      	ldr	r2, [pc, #200]	; (8000b2c <MX_GPIO_Init+0xe4>)
 8000a62:	f043 0310 	orr.w	r3, r3, #16
 8000a66:	6193      	str	r3, [r2, #24]
 8000a68:	4b30      	ldr	r3, [pc, #192]	; (8000b2c <MX_GPIO_Init+0xe4>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f003 0310 	and.w	r3, r3, #16
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a74:	4b2d      	ldr	r3, [pc, #180]	; (8000b2c <MX_GPIO_Init+0xe4>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	4a2c      	ldr	r2, [pc, #176]	; (8000b2c <MX_GPIO_Init+0xe4>)
 8000a7a:	f043 0320 	orr.w	r3, r3, #32
 8000a7e:	6193      	str	r3, [r2, #24]
 8000a80:	4b2a      	ldr	r3, [pc, #168]	; (8000b2c <MX_GPIO_Init+0xe4>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	f003 0320 	and.w	r3, r3, #32
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8c:	4b27      	ldr	r3, [pc, #156]	; (8000b2c <MX_GPIO_Init+0xe4>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	4a26      	ldr	r2, [pc, #152]	; (8000b2c <MX_GPIO_Init+0xe4>)
 8000a92:	f043 0304 	orr.w	r3, r3, #4
 8000a96:	6193      	str	r3, [r2, #24]
 8000a98:	4b24      	ldr	r3, [pc, #144]	; (8000b2c <MX_GPIO_Init+0xe4>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	f003 0304 	and.w	r3, r3, #4
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa4:	4b21      	ldr	r3, [pc, #132]	; (8000b2c <MX_GPIO_Init+0xe4>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	4a20      	ldr	r2, [pc, #128]	; (8000b2c <MX_GPIO_Init+0xe4>)
 8000aaa:	f043 0308 	orr.w	r3, r3, #8
 8000aae:	6193      	str	r3, [r2, #24]
 8000ab0:	4b1e      	ldr	r3, [pc, #120]	; (8000b2c <MX_GPIO_Init+0xe4>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	f003 0308 	and.w	r3, r3, #8
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2121      	movs	r1, #33	; 0x21
 8000ac0:	481b      	ldr	r0, [pc, #108]	; (8000b30 <MX_GPIO_Init+0xe8>)
 8000ac2:	f000 fcd6 	bl	8001472 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ac6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000acc:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <MX_GPIO_Init+0xec>)
 8000ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 0310 	add.w	r3, r7, #16
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4817      	ldr	r0, [pc, #92]	; (8000b38 <MX_GPIO_Init+0xf0>)
 8000adc:	f000 fb58 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aec:	f107 0310 	add.w	r3, r7, #16
 8000af0:	4619      	mov	r1, r3
 8000af2:	4811      	ldr	r0, [pc, #68]	; (8000b38 <MX_GPIO_Init+0xf0>)
 8000af4:	f000 fb4c 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin;
 8000af8:	2321      	movs	r3, #33	; 0x21
 8000afa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afc:	2301      	movs	r3, #1
 8000afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2302      	movs	r3, #2
 8000b06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4808      	ldr	r0, [pc, #32]	; (8000b30 <MX_GPIO_Init+0xe8>)
 8000b10:	f000 fb3e 	bl	8001190 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2100      	movs	r1, #0
 8000b18:	2028      	movs	r0, #40	; 0x28
 8000b1a:	f000 fb02 	bl	8001122 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b1e:	2028      	movs	r0, #40	; 0x28
 8000b20:	f000 fb1b 	bl	800115a <HAL_NVIC_EnableIRQ>

}
 8000b24:	bf00      	nop
 8000b26:	3720      	adds	r7, #32
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	40010800 	.word	0x40010800
 8000b34:	10110000 	.word	0x10110000
 8000b38:	40011000 	.word	0x40011000

08000b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr

08000b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b4e:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <HAL_MspInit+0x5c>)
 8000b50:	699b      	ldr	r3, [r3, #24]
 8000b52:	4a14      	ldr	r2, [pc, #80]	; (8000ba4 <HAL_MspInit+0x5c>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6193      	str	r3, [r2, #24]
 8000b5a:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <HAL_MspInit+0x5c>)
 8000b5c:	699b      	ldr	r3, [r3, #24]
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <HAL_MspInit+0x5c>)
 8000b68:	69db      	ldr	r3, [r3, #28]
 8000b6a:	4a0e      	ldr	r2, [pc, #56]	; (8000ba4 <HAL_MspInit+0x5c>)
 8000b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b70:	61d3      	str	r3, [r2, #28]
 8000b72:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <HAL_MspInit+0x5c>)
 8000b74:	69db      	ldr	r3, [r3, #28]
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <HAL_MspInit+0x60>)
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <HAL_MspInit+0x60>)
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	3714      	adds	r7, #20
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	40010000 	.word	0x40010000

08000bac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bbc:	d113      	bne.n	8000be6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <HAL_TIM_Base_MspInit+0x44>)
 8000bc0:	69db      	ldr	r3, [r3, #28]
 8000bc2:	4a0b      	ldr	r2, [pc, #44]	; (8000bf0 <HAL_TIM_Base_MspInit+0x44>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	61d3      	str	r3, [r2, #28]
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <HAL_TIM_Base_MspInit+0x44>)
 8000bcc:	69db      	ldr	r3, [r3, #28]
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2100      	movs	r1, #0
 8000bda:	201c      	movs	r0, #28
 8000bdc:	f000 faa1 	bl	8001122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000be0:	201c      	movs	r0, #28
 8000be2:	f000 faba 	bl	800115a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b088      	sub	sp, #32
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0310 	add.w	r3, r7, #16
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a15      	ldr	r2, [pc, #84]	; (8000c64 <HAL_UART_MspInit+0x70>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d123      	bne.n	8000c5c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c14:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <HAL_UART_MspInit+0x74>)
 8000c16:	69db      	ldr	r3, [r3, #28]
 8000c18:	4a13      	ldr	r2, [pc, #76]	; (8000c68 <HAL_UART_MspInit+0x74>)
 8000c1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c1e:	61d3      	str	r3, [r2, #28]
 8000c20:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <HAL_UART_MspInit+0x74>)
 8000c22:	69db      	ldr	r3, [r3, #28]
 8000c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2c:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <HAL_UART_MspInit+0x74>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	4a0d      	ldr	r2, [pc, #52]	; (8000c68 <HAL_UART_MspInit+0x74>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	6193      	str	r3, [r2, #24]
 8000c38:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <HAL_UART_MspInit+0x74>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c44:	230c      	movs	r3, #12
 8000c46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c50:	f107 0310 	add.w	r3, r7, #16
 8000c54:	4619      	mov	r1, r3
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <HAL_UART_MspInit+0x78>)
 8000c58:	f000 fa9a 	bl	8001190 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c5c:	bf00      	nop
 8000c5e:	3720      	adds	r7, #32
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40004400 	.word	0x40004400
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	40010800 	.word	0x40010800

08000c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr

08000c7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <HardFault_Handler+0x4>

08000c82 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <MemManage_Handler+0x4>

08000c88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <BusFault_Handler+0x4>

08000c8e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <UsageFault_Handler+0x4>

08000c94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr

08000ca0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr

08000cac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr

08000cb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cbc:	f000 f91c 	bl	8000ef8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cc8:	4802      	ldr	r0, [pc, #8]	; (8000cd4 <TIM2_IRQHandler+0x10>)
 8000cca:	f001 f8e3 	bl	8001e94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000160 	.word	0x20000160

08000cd8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000cdc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ce0:	f000 fbf8 	bl	80014d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	e00a      	b.n	8000d10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cfa:	f3af 8000 	nop.w
 8000cfe:	4601      	mov	r1, r0
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	1c5a      	adds	r2, r3, #1
 8000d04:	60ba      	str	r2, [r7, #8]
 8000d06:	b2ca      	uxtb	r2, r1
 8000d08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	697a      	ldr	r2, [r7, #20]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	dbf0      	blt.n	8000cfa <_read+0x12>
	}

return len;
 8000d18:	687b      	ldr	r3, [r7, #4]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	60f8      	str	r0, [r7, #12]
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	e009      	b.n	8000d48 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	1c5a      	adds	r2, r3, #1
 8000d38:	60ba      	str	r2, [r7, #8]
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fa05 	bl	800014c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	3301      	adds	r3, #1
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	697a      	ldr	r2, [r7, #20]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	dbf1      	blt.n	8000d34 <_write+0x12>
	}
	return len;
 8000d50:	687b      	ldr	r3, [r7, #4]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <_close>:

int _close(int file)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
	return -1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr

08000d70 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d80:	605a      	str	r2, [r3, #4]
	return 0;
 8000d82:	2300      	movs	r3, #0
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bc80      	pop	{r7}
 8000d8c:	4770      	bx	lr

08000d8e <_isatty>:

int _isatty(int file)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b083      	sub	sp, #12
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
	return 1;
 8000d96:	2301      	movs	r3, #1
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bc80      	pop	{r7}
 8000da0:	4770      	bx	lr

08000da2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000da2:	b480      	push	{r7}
 8000da4:	b085      	sub	sp, #20
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	60f8      	str	r0, [r7, #12]
 8000daa:	60b9      	str	r1, [r7, #8]
 8000dac:	607a      	str	r2, [r7, #4]
	return 0;
 8000dae:	2300      	movs	r3, #0
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bc80      	pop	{r7}
 8000db8:	4770      	bx	lr
	...

08000dbc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000dc4:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <_sbrk+0x50>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d102      	bne.n	8000dd2 <_sbrk+0x16>
		heap_end = &end;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <_sbrk+0x50>)
 8000dce:	4a10      	ldr	r2, [pc, #64]	; (8000e10 <_sbrk+0x54>)
 8000dd0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <_sbrk+0x50>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <_sbrk+0x50>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4413      	add	r3, r2
 8000de0:	466a      	mov	r2, sp
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d907      	bls.n	8000df6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000de6:	f001 fd59 	bl	800289c <__errno>
 8000dea:	4602      	mov	r2, r0
 8000dec:	230c      	movs	r3, #12
 8000dee:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000df0:	f04f 33ff 	mov.w	r3, #4294967295
 8000df4:	e006      	b.n	8000e04 <_sbrk+0x48>
	}

	heap_end += incr;
 8000df6:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <_sbrk+0x50>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	4a03      	ldr	r2, [pc, #12]	; (8000e0c <_sbrk+0x50>)
 8000e00:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000e02:	68fb      	ldr	r3, [r7, #12]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	2000008c 	.word	0x2000008c
 8000e10:	20000230 	.word	0x20000230

08000e14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr

08000e20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e20:	480c      	ldr	r0, [pc, #48]	; (8000e54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e22:	490d      	ldr	r1, [pc, #52]	; (8000e58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e24:	4a0d      	ldr	r2, [pc, #52]	; (8000e5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e28:	e002      	b.n	8000e30 <LoopCopyDataInit>

08000e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2e:	3304      	adds	r3, #4

08000e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e34:	d3f9      	bcc.n	8000e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e36:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e38:	4c0a      	ldr	r4, [pc, #40]	; (8000e64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e3c:	e001      	b.n	8000e42 <LoopFillZerobss>

08000e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e40:	3204      	adds	r2, #4

08000e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e44:	d3fb      	bcc.n	8000e3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e46:	f7ff ffe5 	bl	8000e14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e4a:	f001 fd2d 	bl	80028a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e4e:	f7ff fc41 	bl	80006d4 <main>
  bx lr
 8000e52:	4770      	bx	lr
  ldr r0, =_sdata
 8000e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e58:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e5c:	08003970 	.word	0x08003970
  ldr r2, =_sbss
 8000e60:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e64:	2000022c 	.word	0x2000022c

08000e68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e68:	e7fe      	b.n	8000e68 <ADC1_2_IRQHandler>
	...

08000e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <HAL_Init+0x28>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a07      	ldr	r2, [pc, #28]	; (8000e94 <HAL_Init+0x28>)
 8000e76:	f043 0310 	orr.w	r3, r3, #16
 8000e7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e7c:	2003      	movs	r0, #3
 8000e7e:	f000 f945 	bl	800110c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e82:	2000      	movs	r0, #0
 8000e84:	f000 f808 	bl	8000e98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e88:	f7ff fe5e 	bl	8000b48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40022000 	.word	0x40022000

08000e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <HAL_InitTick+0x54>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <HAL_InitTick+0x58>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 f95d 	bl	8001176 <HAL_SYSTICK_Config>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e00e      	b.n	8000ee4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b0f      	cmp	r3, #15
 8000eca:	d80a      	bhi.n	8000ee2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed4:	f000 f925 	bl	8001122 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed8:	4a06      	ldr	r2, [pc, #24]	; (8000ef4 <HAL_InitTick+0x5c>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	e000      	b.n	8000ee4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	20000004 	.word	0x20000004

08000ef8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <HAL_IncTick+0x1c>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <HAL_IncTick+0x20>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	4a03      	ldr	r2, [pc, #12]	; (8000f18 <HAL_IncTick+0x20>)
 8000f0a:	6013      	str	r3, [r2, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr
 8000f14:	20000008 	.word	0x20000008
 8000f18:	20000224 	.word	0x20000224

08000f1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f20:	4b02      	ldr	r3, [pc, #8]	; (8000f2c <HAL_GetTick+0x10>)
 8000f22:	681b      	ldr	r3, [r3, #0]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr
 8000f2c:	20000224 	.word	0x20000224

08000f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f38:	f7ff fff0 	bl	8000f1c <HAL_GetTick>
 8000f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f48:	d005      	beq.n	8000f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <HAL_Delay+0x40>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4413      	add	r3, r2
 8000f54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f56:	bf00      	nop
 8000f58:	f7ff ffe0 	bl	8000f1c <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d8f7      	bhi.n	8000f58 <HAL_Delay+0x28>
  {
  }
}
 8000f68:	bf00      	nop
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000008 	.word	0x20000008

08000f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f90:	4013      	ands	r3, r2
 8000f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa6:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	60d3      	str	r3, [r2, #12]
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	0a1b      	lsrs	r3, r3, #8
 8000fc6:	f003 0307 	and.w	r3, r3, #7
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	db0b      	blt.n	8001002 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	f003 021f 	and.w	r2, r3, #31
 8000ff0:	4906      	ldr	r1, [pc, #24]	; (800100c <__NVIC_EnableIRQ+0x34>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	095b      	lsrs	r3, r3, #5
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr
 800100c:	e000e100 	.word	0xe000e100

08001010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	6039      	str	r1, [r7, #0]
 800101a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001020:	2b00      	cmp	r3, #0
 8001022:	db0a      	blt.n	800103a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	b2da      	uxtb	r2, r3
 8001028:	490c      	ldr	r1, [pc, #48]	; (800105c <__NVIC_SetPriority+0x4c>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	0112      	lsls	r2, r2, #4
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	440b      	add	r3, r1
 8001034:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001038:	e00a      	b.n	8001050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4908      	ldr	r1, [pc, #32]	; (8001060 <__NVIC_SetPriority+0x50>)
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	f003 030f 	and.w	r3, r3, #15
 8001046:	3b04      	subs	r3, #4
 8001048:	0112      	lsls	r2, r2, #4
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	440b      	add	r3, r1
 800104e:	761a      	strb	r2, [r3, #24]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000e100 	.word	0xe000e100
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001064:	b480      	push	{r7}
 8001066:	b089      	sub	sp, #36	; 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f1c3 0307 	rsb	r3, r3, #7
 800107e:	2b04      	cmp	r3, #4
 8001080:	bf28      	it	cs
 8001082:	2304      	movcs	r3, #4
 8001084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3304      	adds	r3, #4
 800108a:	2b06      	cmp	r3, #6
 800108c:	d902      	bls.n	8001094 <NVIC_EncodePriority+0x30>
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3b03      	subs	r3, #3
 8001092:	e000      	b.n	8001096 <NVIC_EncodePriority+0x32>
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	f04f 32ff 	mov.w	r2, #4294967295
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43da      	mvns	r2, r3
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	401a      	ands	r2, r3
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ac:	f04f 31ff 	mov.w	r1, #4294967295
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	fa01 f303 	lsl.w	r3, r1, r3
 80010b6:	43d9      	mvns	r1, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	4313      	orrs	r3, r2
         );
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3724      	adds	r7, #36	; 0x24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr

080010c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d8:	d301      	bcc.n	80010de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010da:	2301      	movs	r3, #1
 80010dc:	e00f      	b.n	80010fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010de:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <SysTick_Config+0x40>)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e6:	210f      	movs	r1, #15
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ec:	f7ff ff90 	bl	8001010 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <SysTick_Config+0x40>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f6:	4b04      	ldr	r3, [pc, #16]	; (8001108 <SysTick_Config+0x40>)
 80010f8:	2207      	movs	r2, #7
 80010fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	e000e010 	.word	0xe000e010

0800110c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ff2d 	bl	8000f74 <__NVIC_SetPriorityGrouping>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001122:	b580      	push	{r7, lr}
 8001124:	b086      	sub	sp, #24
 8001126:	af00      	add	r7, sp, #0
 8001128:	4603      	mov	r3, r0
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
 800112e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001134:	f7ff ff42 	bl	8000fbc <__NVIC_GetPriorityGrouping>
 8001138:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	68b9      	ldr	r1, [r7, #8]
 800113e:	6978      	ldr	r0, [r7, #20]
 8001140:	f7ff ff90 	bl	8001064 <NVIC_EncodePriority>
 8001144:	4602      	mov	r2, r0
 8001146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff5f 	bl	8001010 <__NVIC_SetPriority>
}
 8001152:	bf00      	nop
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff35 	bl	8000fd8 <__NVIC_EnableIRQ>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ffa2 	bl	80010c8 <SysTick_Config>
 8001184:	4603      	mov	r3, r0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001190:	b480      	push	{r7}
 8001192:	b08b      	sub	sp, #44	; 0x2c
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800119a:	2300      	movs	r3, #0
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800119e:	2300      	movs	r3, #0
 80011a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011a2:	e127      	b.n	80013f4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011a4:	2201      	movs	r2, #1
 80011a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	69fa      	ldr	r2, [r7, #28]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	429a      	cmp	r2, r3
 80011be:	f040 8116 	bne.w	80013ee <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b12      	cmp	r3, #18
 80011c8:	d034      	beq.n	8001234 <HAL_GPIO_Init+0xa4>
 80011ca:	2b12      	cmp	r3, #18
 80011cc:	d80d      	bhi.n	80011ea <HAL_GPIO_Init+0x5a>
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d02b      	beq.n	800122a <HAL_GPIO_Init+0x9a>
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d804      	bhi.n	80011e0 <HAL_GPIO_Init+0x50>
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d031      	beq.n	800123e <HAL_GPIO_Init+0xae>
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d01c      	beq.n	8001218 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011de:	e048      	b.n	8001272 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011e0:	2b03      	cmp	r3, #3
 80011e2:	d043      	beq.n	800126c <HAL_GPIO_Init+0xdc>
 80011e4:	2b11      	cmp	r3, #17
 80011e6:	d01b      	beq.n	8001220 <HAL_GPIO_Init+0x90>
          break;
 80011e8:	e043      	b.n	8001272 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011ea:	4a89      	ldr	r2, [pc, #548]	; (8001410 <HAL_GPIO_Init+0x280>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d026      	beq.n	800123e <HAL_GPIO_Init+0xae>
 80011f0:	4a87      	ldr	r2, [pc, #540]	; (8001410 <HAL_GPIO_Init+0x280>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d806      	bhi.n	8001204 <HAL_GPIO_Init+0x74>
 80011f6:	4a87      	ldr	r2, [pc, #540]	; (8001414 <HAL_GPIO_Init+0x284>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d020      	beq.n	800123e <HAL_GPIO_Init+0xae>
 80011fc:	4a86      	ldr	r2, [pc, #536]	; (8001418 <HAL_GPIO_Init+0x288>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d01d      	beq.n	800123e <HAL_GPIO_Init+0xae>
          break;
 8001202:	e036      	b.n	8001272 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001204:	4a85      	ldr	r2, [pc, #532]	; (800141c <HAL_GPIO_Init+0x28c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d019      	beq.n	800123e <HAL_GPIO_Init+0xae>
 800120a:	4a85      	ldr	r2, [pc, #532]	; (8001420 <HAL_GPIO_Init+0x290>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d016      	beq.n	800123e <HAL_GPIO_Init+0xae>
 8001210:	4a84      	ldr	r2, [pc, #528]	; (8001424 <HAL_GPIO_Init+0x294>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d013      	beq.n	800123e <HAL_GPIO_Init+0xae>
          break;
 8001216:	e02c      	b.n	8001272 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	623b      	str	r3, [r7, #32]
          break;
 800121e:	e028      	b.n	8001272 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	3304      	adds	r3, #4
 8001226:	623b      	str	r3, [r7, #32]
          break;
 8001228:	e023      	b.n	8001272 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	3308      	adds	r3, #8
 8001230:	623b      	str	r3, [r7, #32]
          break;
 8001232:	e01e      	b.n	8001272 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	330c      	adds	r3, #12
 800123a:	623b      	str	r3, [r7, #32]
          break;
 800123c:	e019      	b.n	8001272 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d102      	bne.n	800124c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001246:	2304      	movs	r3, #4
 8001248:	623b      	str	r3, [r7, #32]
          break;
 800124a:	e012      	b.n	8001272 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d105      	bne.n	8001260 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001254:	2308      	movs	r3, #8
 8001256:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	69fa      	ldr	r2, [r7, #28]
 800125c:	611a      	str	r2, [r3, #16]
          break;
 800125e:	e008      	b.n	8001272 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001260:	2308      	movs	r3, #8
 8001262:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	69fa      	ldr	r2, [r7, #28]
 8001268:	615a      	str	r2, [r3, #20]
          break;
 800126a:	e002      	b.n	8001272 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800126c:	2300      	movs	r3, #0
 800126e:	623b      	str	r3, [r7, #32]
          break;
 8001270:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	2bff      	cmp	r3, #255	; 0xff
 8001276:	d801      	bhi.n	800127c <HAL_GPIO_Init+0xec>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	e001      	b.n	8001280 <HAL_GPIO_Init+0xf0>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3304      	adds	r3, #4
 8001280:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	2bff      	cmp	r3, #255	; 0xff
 8001286:	d802      	bhi.n	800128e <HAL_GPIO_Init+0xfe>
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	e002      	b.n	8001294 <HAL_GPIO_Init+0x104>
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	3b08      	subs	r3, #8
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	210f      	movs	r1, #15
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	fa01 f303 	lsl.w	r3, r1, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	401a      	ands	r2, r3
 80012a6:	6a39      	ldr	r1, [r7, #32]
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	fa01 f303 	lsl.w	r3, r1, r3
 80012ae:	431a      	orrs	r2, r3
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f000 8096 	beq.w	80013ee <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012c2:	4b59      	ldr	r3, [pc, #356]	; (8001428 <HAL_GPIO_Init+0x298>)
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	4a58      	ldr	r2, [pc, #352]	; (8001428 <HAL_GPIO_Init+0x298>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6193      	str	r3, [r2, #24]
 80012ce:	4b56      	ldr	r3, [pc, #344]	; (8001428 <HAL_GPIO_Init+0x298>)
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012da:	4a54      	ldr	r2, [pc, #336]	; (800142c <HAL_GPIO_Init+0x29c>)
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012de:	089b      	lsrs	r3, r3, #2
 80012e0:	3302      	adds	r3, #2
 80012e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	220f      	movs	r2, #15
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	4013      	ands	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a4b      	ldr	r2, [pc, #300]	; (8001430 <HAL_GPIO_Init+0x2a0>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d013      	beq.n	800132e <HAL_GPIO_Init+0x19e>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a4a      	ldr	r2, [pc, #296]	; (8001434 <HAL_GPIO_Init+0x2a4>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d00d      	beq.n	800132a <HAL_GPIO_Init+0x19a>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a49      	ldr	r2, [pc, #292]	; (8001438 <HAL_GPIO_Init+0x2a8>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d007      	beq.n	8001326 <HAL_GPIO_Init+0x196>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a48      	ldr	r2, [pc, #288]	; (800143c <HAL_GPIO_Init+0x2ac>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d101      	bne.n	8001322 <HAL_GPIO_Init+0x192>
 800131e:	2303      	movs	r3, #3
 8001320:	e006      	b.n	8001330 <HAL_GPIO_Init+0x1a0>
 8001322:	2304      	movs	r3, #4
 8001324:	e004      	b.n	8001330 <HAL_GPIO_Init+0x1a0>
 8001326:	2302      	movs	r3, #2
 8001328:	e002      	b.n	8001330 <HAL_GPIO_Init+0x1a0>
 800132a:	2301      	movs	r3, #1
 800132c:	e000      	b.n	8001330 <HAL_GPIO_Init+0x1a0>
 800132e:	2300      	movs	r3, #0
 8001330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001332:	f002 0203 	and.w	r2, r2, #3
 8001336:	0092      	lsls	r2, r2, #2
 8001338:	4093      	lsls	r3, r2
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	4313      	orrs	r3, r2
 800133e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001340:	493a      	ldr	r1, [pc, #232]	; (800142c <HAL_GPIO_Init+0x29c>)
 8001342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001344:	089b      	lsrs	r3, r3, #2
 8001346:	3302      	adds	r3, #2
 8001348:	68fa      	ldr	r2, [r7, #12]
 800134a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d006      	beq.n	8001368 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800135a:	4b39      	ldr	r3, [pc, #228]	; (8001440 <HAL_GPIO_Init+0x2b0>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	4938      	ldr	r1, [pc, #224]	; (8001440 <HAL_GPIO_Init+0x2b0>)
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	600b      	str	r3, [r1, #0]
 8001366:	e006      	b.n	8001376 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001368:	4b35      	ldr	r3, [pc, #212]	; (8001440 <HAL_GPIO_Init+0x2b0>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	43db      	mvns	r3, r3
 8001370:	4933      	ldr	r1, [pc, #204]	; (8001440 <HAL_GPIO_Init+0x2b0>)
 8001372:	4013      	ands	r3, r2
 8001374:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d006      	beq.n	8001390 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001382:	4b2f      	ldr	r3, [pc, #188]	; (8001440 <HAL_GPIO_Init+0x2b0>)
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	492e      	ldr	r1, [pc, #184]	; (8001440 <HAL_GPIO_Init+0x2b0>)
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	4313      	orrs	r3, r2
 800138c:	604b      	str	r3, [r1, #4]
 800138e:	e006      	b.n	800139e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001390:	4b2b      	ldr	r3, [pc, #172]	; (8001440 <HAL_GPIO_Init+0x2b0>)
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	43db      	mvns	r3, r3
 8001398:	4929      	ldr	r1, [pc, #164]	; (8001440 <HAL_GPIO_Init+0x2b0>)
 800139a:	4013      	ands	r3, r2
 800139c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d006      	beq.n	80013b8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013aa:	4b25      	ldr	r3, [pc, #148]	; (8001440 <HAL_GPIO_Init+0x2b0>)
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	4924      	ldr	r1, [pc, #144]	; (8001440 <HAL_GPIO_Init+0x2b0>)
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	608b      	str	r3, [r1, #8]
 80013b6:	e006      	b.n	80013c6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013b8:	4b21      	ldr	r3, [pc, #132]	; (8001440 <HAL_GPIO_Init+0x2b0>)
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	43db      	mvns	r3, r3
 80013c0:	491f      	ldr	r1, [pc, #124]	; (8001440 <HAL_GPIO_Init+0x2b0>)
 80013c2:	4013      	ands	r3, r2
 80013c4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d006      	beq.n	80013e0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013d2:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <HAL_GPIO_Init+0x2b0>)
 80013d4:	68da      	ldr	r2, [r3, #12]
 80013d6:	491a      	ldr	r1, [pc, #104]	; (8001440 <HAL_GPIO_Init+0x2b0>)
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	60cb      	str	r3, [r1, #12]
 80013de:	e006      	b.n	80013ee <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013e0:	4b17      	ldr	r3, [pc, #92]	; (8001440 <HAL_GPIO_Init+0x2b0>)
 80013e2:	68da      	ldr	r2, [r3, #12]
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	43db      	mvns	r3, r3
 80013e8:	4915      	ldr	r1, [pc, #84]	; (8001440 <HAL_GPIO_Init+0x2b0>)
 80013ea:	4013      	ands	r3, r2
 80013ec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80013ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f0:	3301      	adds	r3, #1
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	fa22 f303 	lsr.w	r3, r2, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f47f aed0 	bne.w	80011a4 <HAL_GPIO_Init+0x14>
  }
}
 8001404:	bf00      	nop
 8001406:	372c      	adds	r7, #44	; 0x2c
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	10210000 	.word	0x10210000
 8001414:	10110000 	.word	0x10110000
 8001418:	10120000 	.word	0x10120000
 800141c:	10310000 	.word	0x10310000
 8001420:	10320000 	.word	0x10320000
 8001424:	10220000 	.word	0x10220000
 8001428:	40021000 	.word	0x40021000
 800142c:	40010000 	.word	0x40010000
 8001430:	40010800 	.word	0x40010800
 8001434:	40010c00 	.word	0x40010c00
 8001438:	40011000 	.word	0x40011000
 800143c:	40011400 	.word	0x40011400
 8001440:	40010400 	.word	0x40010400

08001444 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	887b      	ldrh	r3, [r7, #2]
 8001456:	4013      	ands	r3, r2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d002      	beq.n	8001462 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800145c:	2301      	movs	r3, #1
 800145e:	73fb      	strb	r3, [r7, #15]
 8001460:	e001      	b.n	8001466 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001462:	2300      	movs	r3, #0
 8001464:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001466:	7bfb      	ldrb	r3, [r7, #15]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr

08001472 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
 800147a:	460b      	mov	r3, r1
 800147c:	807b      	strh	r3, [r7, #2]
 800147e:	4613      	mov	r3, r2
 8001480:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001482:	787b      	ldrb	r3, [r7, #1]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d003      	beq.n	8001490 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001488:	887a      	ldrh	r2, [r7, #2]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800148e:	e003      	b.n	8001498 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001490:	887b      	ldrh	r3, [r7, #2]
 8001492:	041a      	lsls	r2, r3, #16
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	611a      	str	r2, [r3, #16]
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr

080014a2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b085      	sub	sp, #20
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
 80014aa:	460b      	mov	r3, r1
 80014ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014b4:	887a      	ldrh	r2, [r7, #2]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4013      	ands	r3, r2
 80014ba:	041a      	lsls	r2, r3, #16
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	43d9      	mvns	r1, r3
 80014c0:	887b      	ldrh	r3, [r7, #2]
 80014c2:	400b      	ands	r3, r1
 80014c4:	431a      	orrs	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	611a      	str	r2, [r3, #16]
}
 80014ca:	bf00      	nop
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr

080014d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014de:	4b08      	ldr	r3, [pc, #32]	; (8001500 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014e0:	695a      	ldr	r2, [r3, #20]
 80014e2:	88fb      	ldrh	r3, [r7, #6]
 80014e4:	4013      	ands	r3, r2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d006      	beq.n	80014f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014ea:	4a05      	ldr	r2, [pc, #20]	; (8001500 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014ec:	88fb      	ldrh	r3, [r7, #6]
 80014ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014f0:	88fb      	ldrh	r3, [r7, #6]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 f806 	bl	8001504 <HAL_GPIO_EXTI_Callback>
  }
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40010400 	.word	0x40010400

08001504 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e26c      	b.n	8001a04 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b00      	cmp	r3, #0
 8001534:	f000 8087 	beq.w	8001646 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001538:	4b92      	ldr	r3, [pc, #584]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 030c 	and.w	r3, r3, #12
 8001540:	2b04      	cmp	r3, #4
 8001542:	d00c      	beq.n	800155e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001544:	4b8f      	ldr	r3, [pc, #572]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 030c 	and.w	r3, r3, #12
 800154c:	2b08      	cmp	r3, #8
 800154e:	d112      	bne.n	8001576 <HAL_RCC_OscConfig+0x5e>
 8001550:	4b8c      	ldr	r3, [pc, #560]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800155c:	d10b      	bne.n	8001576 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800155e:	4b89      	ldr	r3, [pc, #548]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d06c      	beq.n	8001644 <HAL_RCC_OscConfig+0x12c>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d168      	bne.n	8001644 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e246      	b.n	8001a04 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800157e:	d106      	bne.n	800158e <HAL_RCC_OscConfig+0x76>
 8001580:	4b80      	ldr	r3, [pc, #512]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a7f      	ldr	r2, [pc, #508]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158a:	6013      	str	r3, [r2, #0]
 800158c:	e02e      	b.n	80015ec <HAL_RCC_OscConfig+0xd4>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d10c      	bne.n	80015b0 <HAL_RCC_OscConfig+0x98>
 8001596:	4b7b      	ldr	r3, [pc, #492]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a7a      	ldr	r2, [pc, #488]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 800159c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	4b78      	ldr	r3, [pc, #480]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a77      	ldr	r2, [pc, #476]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 80015a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	e01d      	b.n	80015ec <HAL_RCC_OscConfig+0xd4>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015b8:	d10c      	bne.n	80015d4 <HAL_RCC_OscConfig+0xbc>
 80015ba:	4b72      	ldr	r3, [pc, #456]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a71      	ldr	r2, [pc, #452]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 80015c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	4b6f      	ldr	r3, [pc, #444]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a6e      	ldr	r2, [pc, #440]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	e00b      	b.n	80015ec <HAL_RCC_OscConfig+0xd4>
 80015d4:	4b6b      	ldr	r3, [pc, #428]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a6a      	ldr	r2, [pc, #424]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 80015da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015de:	6013      	str	r3, [r2, #0]
 80015e0:	4b68      	ldr	r3, [pc, #416]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a67      	ldr	r2, [pc, #412]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 80015e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d013      	beq.n	800161c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff fc92 	bl	8000f1c <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015fc:	f7ff fc8e 	bl	8000f1c <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b64      	cmp	r3, #100	; 0x64
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e1fa      	b.n	8001a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160e:	4b5d      	ldr	r3, [pc, #372]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0f0      	beq.n	80015fc <HAL_RCC_OscConfig+0xe4>
 800161a:	e014      	b.n	8001646 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161c:	f7ff fc7e 	bl	8000f1c <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001624:	f7ff fc7a 	bl	8000f1c <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b64      	cmp	r3, #100	; 0x64
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e1e6      	b.n	8001a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001636:	4b53      	ldr	r3, [pc, #332]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f0      	bne.n	8001624 <HAL_RCC_OscConfig+0x10c>
 8001642:	e000      	b.n	8001646 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d063      	beq.n	800171a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001652:	4b4c      	ldr	r3, [pc, #304]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f003 030c 	and.w	r3, r3, #12
 800165a:	2b00      	cmp	r3, #0
 800165c:	d00b      	beq.n	8001676 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800165e:	4b49      	ldr	r3, [pc, #292]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 030c 	and.w	r3, r3, #12
 8001666:	2b08      	cmp	r3, #8
 8001668:	d11c      	bne.n	80016a4 <HAL_RCC_OscConfig+0x18c>
 800166a:	4b46      	ldr	r3, [pc, #280]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d116      	bne.n	80016a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001676:	4b43      	ldr	r3, [pc, #268]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d005      	beq.n	800168e <HAL_RCC_OscConfig+0x176>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d001      	beq.n	800168e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e1ba      	b.n	8001a04 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800168e:	4b3d      	ldr	r3, [pc, #244]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	4939      	ldr	r1, [pc, #228]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016a2:	e03a      	b.n	800171a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d020      	beq.n	80016ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016ac:	4b36      	ldr	r3, [pc, #216]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b2:	f7ff fc33 	bl	8000f1c <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ba:	f7ff fc2f 	bl	8000f1c <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e19b      	b.n	8001a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016cc:	4b2d      	ldr	r3, [pc, #180]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0f0      	beq.n	80016ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d8:	4b2a      	ldr	r3, [pc, #168]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	695b      	ldr	r3, [r3, #20]
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	4927      	ldr	r1, [pc, #156]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	600b      	str	r3, [r1, #0]
 80016ec:	e015      	b.n	800171a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ee:	4b26      	ldr	r3, [pc, #152]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f4:	f7ff fc12 	bl	8000f1c <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016fc:	f7ff fc0e 	bl	8000f1c <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e17a      	b.n	8001a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800170e:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0308 	and.w	r3, r3, #8
 8001722:	2b00      	cmp	r3, #0
 8001724:	d03a      	beq.n	800179c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d019      	beq.n	8001762 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800172e:	4b17      	ldr	r3, [pc, #92]	; (800178c <HAL_RCC_OscConfig+0x274>)
 8001730:	2201      	movs	r2, #1
 8001732:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001734:	f7ff fbf2 	bl	8000f1c <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800173c:	f7ff fbee 	bl	8000f1c <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e15a      	b.n	8001a04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800174e:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0f0      	beq.n	800173c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800175a:	2001      	movs	r0, #1
 800175c:	f000 fada 	bl	8001d14 <RCC_Delay>
 8001760:	e01c      	b.n	800179c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <HAL_RCC_OscConfig+0x274>)
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001768:	f7ff fbd8 	bl	8000f1c <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800176e:	e00f      	b.n	8001790 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001770:	f7ff fbd4 	bl	8000f1c <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d908      	bls.n	8001790 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e140      	b.n	8001a04 <HAL_RCC_OscConfig+0x4ec>
 8001782:	bf00      	nop
 8001784:	40021000 	.word	0x40021000
 8001788:	42420000 	.word	0x42420000
 800178c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001790:	4b9e      	ldr	r3, [pc, #632]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 8001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1e9      	bne.n	8001770 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f000 80a6 	beq.w	80018f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017aa:	2300      	movs	r3, #0
 80017ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ae:	4b97      	ldr	r3, [pc, #604]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d10d      	bne.n	80017d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ba:	4b94      	ldr	r3, [pc, #592]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	4a93      	ldr	r2, [pc, #588]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 80017c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c4:	61d3      	str	r3, [r2, #28]
 80017c6:	4b91      	ldr	r3, [pc, #580]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017d2:	2301      	movs	r3, #1
 80017d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d6:	4b8e      	ldr	r3, [pc, #568]	; (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d118      	bne.n	8001814 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017e2:	4b8b      	ldr	r3, [pc, #556]	; (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a8a      	ldr	r2, [pc, #552]	; (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 80017e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ee:	f7ff fb95 	bl	8000f1c <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017f6:	f7ff fb91 	bl	8000f1c <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b64      	cmp	r3, #100	; 0x64
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e0fd      	b.n	8001a04 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001808:	4b81      	ldr	r3, [pc, #516]	; (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0f0      	beq.n	80017f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d106      	bne.n	800182a <HAL_RCC_OscConfig+0x312>
 800181c:	4b7b      	ldr	r3, [pc, #492]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	4a7a      	ldr	r2, [pc, #488]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	6213      	str	r3, [r2, #32]
 8001828:	e02d      	b.n	8001886 <HAL_RCC_OscConfig+0x36e>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d10c      	bne.n	800184c <HAL_RCC_OscConfig+0x334>
 8001832:	4b76      	ldr	r3, [pc, #472]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 8001834:	6a1b      	ldr	r3, [r3, #32]
 8001836:	4a75      	ldr	r2, [pc, #468]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 8001838:	f023 0301 	bic.w	r3, r3, #1
 800183c:	6213      	str	r3, [r2, #32]
 800183e:	4b73      	ldr	r3, [pc, #460]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 8001840:	6a1b      	ldr	r3, [r3, #32]
 8001842:	4a72      	ldr	r2, [pc, #456]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 8001844:	f023 0304 	bic.w	r3, r3, #4
 8001848:	6213      	str	r3, [r2, #32]
 800184a:	e01c      	b.n	8001886 <HAL_RCC_OscConfig+0x36e>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	2b05      	cmp	r3, #5
 8001852:	d10c      	bne.n	800186e <HAL_RCC_OscConfig+0x356>
 8001854:	4b6d      	ldr	r3, [pc, #436]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	4a6c      	ldr	r2, [pc, #432]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 800185a:	f043 0304 	orr.w	r3, r3, #4
 800185e:	6213      	str	r3, [r2, #32]
 8001860:	4b6a      	ldr	r3, [pc, #424]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	4a69      	ldr	r2, [pc, #420]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	6213      	str	r3, [r2, #32]
 800186c:	e00b      	b.n	8001886 <HAL_RCC_OscConfig+0x36e>
 800186e:	4b67      	ldr	r3, [pc, #412]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	4a66      	ldr	r2, [pc, #408]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 8001874:	f023 0301 	bic.w	r3, r3, #1
 8001878:	6213      	str	r3, [r2, #32]
 800187a:	4b64      	ldr	r3, [pc, #400]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	4a63      	ldr	r2, [pc, #396]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 8001880:	f023 0304 	bic.w	r3, r3, #4
 8001884:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d015      	beq.n	80018ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800188e:	f7ff fb45 	bl	8000f1c <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001894:	e00a      	b.n	80018ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001896:	f7ff fb41 	bl	8000f1c <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e0ab      	b.n	8001a04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ac:	4b57      	ldr	r3, [pc, #348]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0ee      	beq.n	8001896 <HAL_RCC_OscConfig+0x37e>
 80018b8:	e014      	b.n	80018e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ba:	f7ff fb2f 	bl	8000f1c <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c0:	e00a      	b.n	80018d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018c2:	f7ff fb2b 	bl	8000f1c <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e095      	b.n	8001a04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018d8:	4b4c      	ldr	r3, [pc, #304]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1ee      	bne.n	80018c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018e4:	7dfb      	ldrb	r3, [r7, #23]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d105      	bne.n	80018f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ea:	4b48      	ldr	r3, [pc, #288]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	4a47      	ldr	r2, [pc, #284]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 80018f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 8081 	beq.w	8001a02 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001900:	4b42      	ldr	r3, [pc, #264]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 030c 	and.w	r3, r3, #12
 8001908:	2b08      	cmp	r3, #8
 800190a:	d061      	beq.n	80019d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	2b02      	cmp	r3, #2
 8001912:	d146      	bne.n	80019a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001914:	4b3f      	ldr	r3, [pc, #252]	; (8001a14 <HAL_RCC_OscConfig+0x4fc>)
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191a:	f7ff faff 	bl	8000f1c <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001922:	f7ff fafb 	bl	8000f1c <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e067      	b.n	8001a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001934:	4b35      	ldr	r3, [pc, #212]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1f0      	bne.n	8001922 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001948:	d108      	bne.n	800195c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800194a:	4b30      	ldr	r3, [pc, #192]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	492d      	ldr	r1, [pc, #180]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 8001958:	4313      	orrs	r3, r2
 800195a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800195c:	4b2b      	ldr	r3, [pc, #172]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a19      	ldr	r1, [r3, #32]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196c:	430b      	orrs	r3, r1
 800196e:	4927      	ldr	r1, [pc, #156]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 8001970:	4313      	orrs	r3, r2
 8001972:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001974:	4b27      	ldr	r3, [pc, #156]	; (8001a14 <HAL_RCC_OscConfig+0x4fc>)
 8001976:	2201      	movs	r2, #1
 8001978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197a:	f7ff facf 	bl	8000f1c <HAL_GetTick>
 800197e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001982:	f7ff facb 	bl	8000f1c <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e037      	b.n	8001a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001994:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d0f0      	beq.n	8001982 <HAL_RCC_OscConfig+0x46a>
 80019a0:	e02f      	b.n	8001a02 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a2:	4b1c      	ldr	r3, [pc, #112]	; (8001a14 <HAL_RCC_OscConfig+0x4fc>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a8:	f7ff fab8 	bl	8000f1c <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b0:	f7ff fab4 	bl	8000f1c <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e020      	b.n	8001a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c2:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f0      	bne.n	80019b0 <HAL_RCC_OscConfig+0x498>
 80019ce:	e018      	b.n	8001a02 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69db      	ldr	r3, [r3, #28]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d101      	bne.n	80019dc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e013      	b.n	8001a04 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a1b      	ldr	r3, [r3, #32]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d106      	bne.n	80019fe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d001      	beq.n	8001a02 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e000      	b.n	8001a04 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40007000 	.word	0x40007000
 8001a14:	42420060 	.word	0x42420060

08001a18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0d0      	b.n	8001bce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a2c:	4b6a      	ldr	r3, [pc, #424]	; (8001bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d910      	bls.n	8001a5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3a:	4b67      	ldr	r3, [pc, #412]	; (8001bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f023 0207 	bic.w	r2, r3, #7
 8001a42:	4965      	ldr	r1, [pc, #404]	; (8001bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4a:	4b63      	ldr	r3, [pc, #396]	; (8001bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d001      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e0b8      	b.n	8001bce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d020      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d005      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a74:	4b59      	ldr	r3, [pc, #356]	; (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	4a58      	ldr	r2, [pc, #352]	; (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001a7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0308 	and.w	r3, r3, #8
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d005      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a8c:	4b53      	ldr	r3, [pc, #332]	; (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	4a52      	ldr	r2, [pc, #328]	; (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001a92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a98:	4b50      	ldr	r3, [pc, #320]	; (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	494d      	ldr	r1, [pc, #308]	; (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d040      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d107      	bne.n	8001ace <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001abe:	4b47      	ldr	r3, [pc, #284]	; (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d115      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e07f      	b.n	8001bce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d107      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ad6:	4b41      	ldr	r3, [pc, #260]	; (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d109      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e073      	b.n	8001bce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae6:	4b3d      	ldr	r3, [pc, #244]	; (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e06b      	b.n	8001bce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001af6:	4b39      	ldr	r3, [pc, #228]	; (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f023 0203 	bic.w	r2, r3, #3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	4936      	ldr	r1, [pc, #216]	; (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b08:	f7ff fa08 	bl	8000f1c <HAL_GetTick>
 8001b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0e:	e00a      	b.n	8001b26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b10:	f7ff fa04 	bl	8000f1c <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e053      	b.n	8001bce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b26:	4b2d      	ldr	r3, [pc, #180]	; (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f003 020c 	and.w	r2, r3, #12
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d1eb      	bne.n	8001b10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b38:	4b27      	ldr	r3, [pc, #156]	; (8001bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d210      	bcs.n	8001b68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b46:	4b24      	ldr	r3, [pc, #144]	; (8001bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f023 0207 	bic.w	r2, r3, #7
 8001b4e:	4922      	ldr	r1, [pc, #136]	; (8001bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b56:	4b20      	ldr	r3, [pc, #128]	; (8001bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d001      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e032      	b.n	8001bce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d008      	beq.n	8001b86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b74:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	4916      	ldr	r1, [pc, #88]	; (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d009      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b92:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	490e      	ldr	r1, [pc, #56]	; (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ba6:	f000 f821 	bl	8001bec <HAL_RCC_GetSysClockFreq>
 8001baa:	4601      	mov	r1, r0
 8001bac:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	091b      	lsrs	r3, r3, #4
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	4a0a      	ldr	r2, [pc, #40]	; (8001be0 <HAL_RCC_ClockConfig+0x1c8>)
 8001bb8:	5cd3      	ldrb	r3, [r2, r3]
 8001bba:	fa21 f303 	lsr.w	r3, r1, r3
 8001bbe:	4a09      	ldr	r2, [pc, #36]	; (8001be4 <HAL_RCC_ClockConfig+0x1cc>)
 8001bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bc2:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <HAL_RCC_ClockConfig+0x1d0>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff f966 	bl	8000e98 <HAL_InitTick>

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40022000 	.word	0x40022000
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	080038b8 	.word	0x080038b8
 8001be4:	20000000 	.word	0x20000000
 8001be8:	20000004 	.word	0x20000004

08001bec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bec:	b490      	push	{r4, r7}
 8001bee:	b08a      	sub	sp, #40	; 0x28
 8001bf0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001bf2:	4b2a      	ldr	r3, [pc, #168]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001bf4:	1d3c      	adds	r4, r7, #4
 8001bf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bf8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001bfc:	4b28      	ldr	r3, [pc, #160]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
 8001c06:	2300      	movs	r3, #0
 8001c08:	61bb      	str	r3, [r7, #24]
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c16:	4b23      	ldr	r3, [pc, #140]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d002      	beq.n	8001c2c <HAL_RCC_GetSysClockFreq+0x40>
 8001c26:	2b08      	cmp	r3, #8
 8001c28:	d003      	beq.n	8001c32 <HAL_RCC_GetSysClockFreq+0x46>
 8001c2a:	e02d      	b.n	8001c88 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c2e:	623b      	str	r3, [r7, #32]
      break;
 8001c30:	e02d      	b.n	8001c8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	0c9b      	lsrs	r3, r3, #18
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c3e:	4413      	add	r3, r2
 8001c40:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c44:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d013      	beq.n	8001c78 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c50:	4b14      	ldr	r3, [pc, #80]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	0c5b      	lsrs	r3, r3, #17
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c5e:	4413      	add	r3, r2
 8001c60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c64:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	4a0f      	ldr	r2, [pc, #60]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c6a:	fb02 f203 	mul.w	r2, r2, r3
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
 8001c76:	e004      	b.n	8001c82 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	4a0c      	ldr	r2, [pc, #48]	; (8001cac <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c7c:	fb02 f303 	mul.w	r3, r2, r3
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	623b      	str	r3, [r7, #32]
      break;
 8001c86:	e002      	b.n	8001c8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c88:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c8a:	623b      	str	r3, [r7, #32]
      break;
 8001c8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c8e:	6a3b      	ldr	r3, [r7, #32]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3728      	adds	r7, #40	; 0x28
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc90      	pop	{r4, r7}
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	080038a4 	.word	0x080038a4
 8001ca0:	080038b4 	.word	0x080038b4
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	007a1200 	.word	0x007a1200
 8001cac:	003d0900 	.word	0x003d0900

08001cb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cb4:	4b02      	ldr	r3, [pc, #8]	; (8001cc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr
 8001cc0:	20000000 	.word	0x20000000

08001cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cc8:	f7ff fff2 	bl	8001cb0 <HAL_RCC_GetHCLKFreq>
 8001ccc:	4601      	mov	r1, r0
 8001cce:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	0a1b      	lsrs	r3, r3, #8
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	4a03      	ldr	r2, [pc, #12]	; (8001ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cda:	5cd3      	ldrb	r3, [r2, r3]
 8001cdc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	080038c8 	.word	0x080038c8

08001cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cf0:	f7ff ffde 	bl	8001cb0 <HAL_RCC_GetHCLKFreq>
 8001cf4:	4601      	mov	r1, r0
 8001cf6:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	0adb      	lsrs	r3, r3, #11
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	4a03      	ldr	r2, [pc, #12]	; (8001d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d02:	5cd3      	ldrb	r3, [r2, r3]
 8001d04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	080038c8 	.word	0x080038c8

08001d14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d1c:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <RCC_Delay+0x34>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a0a      	ldr	r2, [pc, #40]	; (8001d4c <RCC_Delay+0x38>)
 8001d22:	fba2 2303 	umull	r2, r3, r2, r3
 8001d26:	0a5b      	lsrs	r3, r3, #9
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	fb02 f303 	mul.w	r3, r2, r3
 8001d2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d30:	bf00      	nop
  }
  while (Delay --);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	1e5a      	subs	r2, r3, #1
 8001d36:	60fa      	str	r2, [r7, #12]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1f9      	bne.n	8001d30 <RCC_Delay+0x1c>
}
 8001d3c:	bf00      	nop
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20000000 	.word	0x20000000
 8001d4c:	10624dd3 	.word	0x10624dd3

08001d50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e041      	b.n	8001de6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d106      	bne.n	8001d7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7fe ff18 	bl	8000bac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2202      	movs	r2, #2
 8001d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3304      	adds	r3, #4
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4610      	mov	r0, r2
 8001d90:	f000 fa64 	bl	800225c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d001      	beq.n	8001e08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e03a      	b.n	8001e7e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68da      	ldr	r2, [r3, #12]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0201 	orr.w	r2, r2, #1
 8001e1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a18      	ldr	r2, [pc, #96]	; (8001e88 <HAL_TIM_Base_Start_IT+0x98>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d00e      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x58>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e32:	d009      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x58>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a14      	ldr	r2, [pc, #80]	; (8001e8c <HAL_TIM_Base_Start_IT+0x9c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d004      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x58>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a13      	ldr	r2, [pc, #76]	; (8001e90 <HAL_TIM_Base_Start_IT+0xa0>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d111      	bne.n	8001e6c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2b06      	cmp	r3, #6
 8001e58:	d010      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f042 0201 	orr.w	r2, r2, #1
 8001e68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e6a:	e007      	b.n	8001e7c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 0201 	orr.w	r2, r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr
 8001e88:	40012c00 	.word	0x40012c00
 8001e8c:	40000400 	.word	0x40000400
 8001e90:	40000800 	.word	0x40000800

08001e94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d122      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d11b      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f06f 0202 	mvn.w	r2, #2
 8001ec0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f9a4 	bl	8002224 <HAL_TIM_IC_CaptureCallback>
 8001edc:	e005      	b.n	8001eea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f997 	bl	8002212 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f9a6 	bl	8002236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d122      	bne.n	8001f44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b04      	cmp	r3, #4
 8001f0a:	d11b      	bne.n	8001f44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f06f 0204 	mvn.w	r2, #4
 8001f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2202      	movs	r2, #2
 8001f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f97a 	bl	8002224 <HAL_TIM_IC_CaptureCallback>
 8001f30:	e005      	b.n	8001f3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f96d 	bl	8002212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f97c 	bl	8002236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	d122      	bne.n	8001f98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	d11b      	bne.n	8001f98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f06f 0208 	mvn.w	r2, #8
 8001f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2204      	movs	r2, #4
 8001f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f950 	bl	8002224 <HAL_TIM_IC_CaptureCallback>
 8001f84:	e005      	b.n	8001f92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f943 	bl	8002212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f952 	bl	8002236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	f003 0310 	and.w	r3, r3, #16
 8001fa2:	2b10      	cmp	r3, #16
 8001fa4:	d122      	bne.n	8001fec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f003 0310 	and.w	r3, r3, #16
 8001fb0:	2b10      	cmp	r3, #16
 8001fb2:	d11b      	bne.n	8001fec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f06f 0210 	mvn.w	r2, #16
 8001fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2208      	movs	r2, #8
 8001fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f926 	bl	8002224 <HAL_TIM_IC_CaptureCallback>
 8001fd8:	e005      	b.n	8001fe6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f919 	bl	8002212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f928 	bl	8002236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d10e      	bne.n	8002018 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b01      	cmp	r3, #1
 8002006:	d107      	bne.n	8002018 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f06f 0201 	mvn.w	r2, #1
 8002010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7fe f8ac 	bl	8000170 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002022:	2b80      	cmp	r3, #128	; 0x80
 8002024:	d10e      	bne.n	8002044 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002030:	2b80      	cmp	r3, #128	; 0x80
 8002032:	d107      	bne.n	8002044 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800203c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 fa6b 	bl	800251a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800204e:	2b40      	cmp	r3, #64	; 0x40
 8002050:	d10e      	bne.n	8002070 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800205c:	2b40      	cmp	r3, #64	; 0x40
 800205e:	d107      	bne.n	8002070 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f8ec 	bl	8002248 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	f003 0320 	and.w	r3, r3, #32
 800207a:	2b20      	cmp	r3, #32
 800207c:	d10e      	bne.n	800209c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f003 0320 	and.w	r3, r3, #32
 8002088:	2b20      	cmp	r3, #32
 800208a:	d107      	bne.n	800209c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f06f 0220 	mvn.w	r2, #32
 8002094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 fa36 	bl	8002508 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <HAL_TIM_ConfigClockSource+0x18>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e0a6      	b.n	800220a <HAL_TIM_ConfigClockSource+0x166>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2202      	movs	r2, #2
 80020c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80020da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020e2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b40      	cmp	r3, #64	; 0x40
 80020f2:	d067      	beq.n	80021c4 <HAL_TIM_ConfigClockSource+0x120>
 80020f4:	2b40      	cmp	r3, #64	; 0x40
 80020f6:	d80b      	bhi.n	8002110 <HAL_TIM_ConfigClockSource+0x6c>
 80020f8:	2b10      	cmp	r3, #16
 80020fa:	d073      	beq.n	80021e4 <HAL_TIM_ConfigClockSource+0x140>
 80020fc:	2b10      	cmp	r3, #16
 80020fe:	d802      	bhi.n	8002106 <HAL_TIM_ConfigClockSource+0x62>
 8002100:	2b00      	cmp	r3, #0
 8002102:	d06f      	beq.n	80021e4 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002104:	e078      	b.n	80021f8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002106:	2b20      	cmp	r3, #32
 8002108:	d06c      	beq.n	80021e4 <HAL_TIM_ConfigClockSource+0x140>
 800210a:	2b30      	cmp	r3, #48	; 0x30
 800210c:	d06a      	beq.n	80021e4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800210e:	e073      	b.n	80021f8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002110:	2b70      	cmp	r3, #112	; 0x70
 8002112:	d00d      	beq.n	8002130 <HAL_TIM_ConfigClockSource+0x8c>
 8002114:	2b70      	cmp	r3, #112	; 0x70
 8002116:	d804      	bhi.n	8002122 <HAL_TIM_ConfigClockSource+0x7e>
 8002118:	2b50      	cmp	r3, #80	; 0x50
 800211a:	d033      	beq.n	8002184 <HAL_TIM_ConfigClockSource+0xe0>
 800211c:	2b60      	cmp	r3, #96	; 0x60
 800211e:	d041      	beq.n	80021a4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002120:	e06a      	b.n	80021f8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002126:	d066      	beq.n	80021f6 <HAL_TIM_ConfigClockSource+0x152>
 8002128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800212c:	d017      	beq.n	800215e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800212e:	e063      	b.n	80021f8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6818      	ldr	r0, [r3, #0]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	6899      	ldr	r1, [r3, #8]
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	f000 f965 	bl	800240e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002152:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	609a      	str	r2, [r3, #8]
      break;
 800215c:	e04c      	b.n	80021f8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6818      	ldr	r0, [r3, #0]
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	6899      	ldr	r1, [r3, #8]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	f000 f94e 	bl	800240e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002180:	609a      	str	r2, [r3, #8]
      break;
 8002182:	e039      	b.n	80021f8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6818      	ldr	r0, [r3, #0]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	6859      	ldr	r1, [r3, #4]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	461a      	mov	r2, r3
 8002192:	f000 f8c5 	bl	8002320 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2150      	movs	r1, #80	; 0x50
 800219c:	4618      	mov	r0, r3
 800219e:	f000 f91c 	bl	80023da <TIM_ITRx_SetConfig>
      break;
 80021a2:	e029      	b.n	80021f8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6818      	ldr	r0, [r3, #0]
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	6859      	ldr	r1, [r3, #4]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	461a      	mov	r2, r3
 80021b2:	f000 f8e3 	bl	800237c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2160      	movs	r1, #96	; 0x60
 80021bc:	4618      	mov	r0, r3
 80021be:	f000 f90c 	bl	80023da <TIM_ITRx_SetConfig>
      break;
 80021c2:	e019      	b.n	80021f8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6818      	ldr	r0, [r3, #0]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	6859      	ldr	r1, [r3, #4]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	461a      	mov	r2, r3
 80021d2:	f000 f8a5 	bl	8002320 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2140      	movs	r1, #64	; 0x40
 80021dc:	4618      	mov	r0, r3
 80021de:	f000 f8fc 	bl	80023da <TIM_ITRx_SetConfig>
      break;
 80021e2:	e009      	b.n	80021f8 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4619      	mov	r1, r3
 80021ee:	4610      	mov	r0, r2
 80021f0:	f000 f8f3 	bl	80023da <TIM_ITRx_SetConfig>
        break;
 80021f4:	e000      	b.n	80021f8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80021f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr

08002224 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr

08002236 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr
	...

0800225c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a29      	ldr	r2, [pc, #164]	; (8002314 <TIM_Base_SetConfig+0xb8>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d00b      	beq.n	800228c <TIM_Base_SetConfig+0x30>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800227a:	d007      	beq.n	800228c <TIM_Base_SetConfig+0x30>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a26      	ldr	r2, [pc, #152]	; (8002318 <TIM_Base_SetConfig+0xbc>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d003      	beq.n	800228c <TIM_Base_SetConfig+0x30>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a25      	ldr	r2, [pc, #148]	; (800231c <TIM_Base_SetConfig+0xc0>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d108      	bne.n	800229e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002292:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	4313      	orrs	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a1c      	ldr	r2, [pc, #112]	; (8002314 <TIM_Base_SetConfig+0xb8>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d00b      	beq.n	80022be <TIM_Base_SetConfig+0x62>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ac:	d007      	beq.n	80022be <TIM_Base_SetConfig+0x62>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a19      	ldr	r2, [pc, #100]	; (8002318 <TIM_Base_SetConfig+0xbc>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d003      	beq.n	80022be <TIM_Base_SetConfig+0x62>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a18      	ldr	r2, [pc, #96]	; (800231c <TIM_Base_SetConfig+0xc0>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d108      	bne.n	80022d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	4313      	orrs	r3, r2
 80022dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a07      	ldr	r2, [pc, #28]	; (8002314 <TIM_Base_SetConfig+0xb8>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d103      	bne.n	8002304 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	691a      	ldr	r2, [r3, #16]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	615a      	str	r2, [r3, #20]
}
 800230a:	bf00      	nop
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr
 8002314:	40012c00 	.word	0x40012c00
 8002318:	40000400 	.word	0x40000400
 800231c:	40000800 	.word	0x40000800

08002320 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002320:	b480      	push	{r7}
 8002322:	b087      	sub	sp, #28
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	f023 0201 	bic.w	r2, r3, #1
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800234a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4313      	orrs	r3, r2
 8002354:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f023 030a 	bic.w	r3, r3, #10
 800235c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	4313      	orrs	r3, r2
 8002364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	621a      	str	r2, [r3, #32]
}
 8002372:	bf00      	nop
 8002374:	371c      	adds	r7, #28
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr

0800237c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800237c:	b480      	push	{r7}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	f023 0210 	bic.w	r2, r3, #16
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80023a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	031b      	lsls	r3, r3, #12
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80023b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	011b      	lsls	r3, r3, #4
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	621a      	str	r2, [r3, #32]
}
 80023d0:	bf00      	nop
 80023d2:	371c      	adds	r7, #28
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr

080023da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023da:	b480      	push	{r7}
 80023dc:	b085      	sub	sp, #20
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
 80023e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	f043 0307 	orr.w	r3, r3, #7
 80023fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	609a      	str	r2, [r3, #8]
}
 8002404:	bf00      	nop
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr

0800240e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800240e:	b480      	push	{r7}
 8002410:	b087      	sub	sp, #28
 8002412:	af00      	add	r7, sp, #0
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	607a      	str	r2, [r7, #4]
 800241a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002428:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	021a      	lsls	r2, r3, #8
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	431a      	orrs	r2, r3
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	4313      	orrs	r3, r2
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	4313      	orrs	r3, r2
 800243a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	609a      	str	r2, [r3, #8]
}
 8002442:	bf00      	nop
 8002444:	371c      	adds	r7, #28
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr

0800244c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800245c:	2b01      	cmp	r3, #1
 800245e:	d101      	bne.n	8002464 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002460:	2302      	movs	r3, #2
 8002462:	e046      	b.n	80024f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800248a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	4313      	orrs	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a16      	ldr	r2, [pc, #88]	; (80024fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d00e      	beq.n	80024c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b0:	d009      	beq.n	80024c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a12      	ldr	r2, [pc, #72]	; (8002500 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d004      	beq.n	80024c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a10      	ldr	r2, [pc, #64]	; (8002504 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d10c      	bne.n	80024e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68ba      	ldr	r2, [r7, #8]
 80024de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr
 80024fc:	40012c00 	.word	0x40012c00
 8002500:	40000400 	.word	0x40000400
 8002504:	40000800 	.word	0x40000800

08002508 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr

0800251a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr

0800252c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e03f      	b.n	80025be <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d106      	bne.n	8002558 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7fe fb4e 	bl	8000bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2224      	movs	r2, #36	; 0x24
 800255c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800256e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 f905 	bl	8002780 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	691a      	ldr	r2, [r3, #16]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002584:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695a      	ldr	r2, [r3, #20]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002594:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2220      	movs	r2, #32
 80025b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2220      	movs	r2, #32
 80025b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b08a      	sub	sp, #40	; 0x28
 80025ca:	af02      	add	r7, sp, #8
 80025cc:	60f8      	str	r0, [r7, #12]
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	603b      	str	r3, [r7, #0]
 80025d2:	4613      	mov	r3, r2
 80025d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b20      	cmp	r3, #32
 80025e4:	d17c      	bne.n	80026e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d002      	beq.n	80025f2 <HAL_UART_Transmit+0x2c>
 80025ec:	88fb      	ldrh	r3, [r7, #6]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e075      	b.n	80026e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d101      	bne.n	8002604 <HAL_UART_Transmit+0x3e>
 8002600:	2302      	movs	r3, #2
 8002602:	e06e      	b.n	80026e2 <HAL_UART_Transmit+0x11c>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2221      	movs	r2, #33	; 0x21
 8002616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800261a:	f7fe fc7f 	bl	8000f1c <HAL_GetTick>
 800261e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	88fa      	ldrh	r2, [r7, #6]
 8002624:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	88fa      	ldrh	r2, [r7, #6]
 800262a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002634:	d108      	bne.n	8002648 <HAL_UART_Transmit+0x82>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d104      	bne.n	8002648 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800263e:	2300      	movs	r3, #0
 8002640:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	61bb      	str	r3, [r7, #24]
 8002646:	e003      	b.n	8002650 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800264c:	2300      	movs	r3, #0
 800264e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002658:	e02a      	b.n	80026b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	2200      	movs	r2, #0
 8002662:	2180      	movs	r1, #128	; 0x80
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 f840 	bl	80026ea <UART_WaitOnFlagUntilTimeout>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e036      	b.n	80026e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10b      	bne.n	8002692 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002688:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	3302      	adds	r3, #2
 800268e:	61bb      	str	r3, [r7, #24]
 8002690:	e007      	b.n	80026a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	781a      	ldrb	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	3301      	adds	r3, #1
 80026a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	3b01      	subs	r3, #1
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1cf      	bne.n	800265a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	2200      	movs	r2, #0
 80026c2:	2140      	movs	r1, #64	; 0x40
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f000 f810 	bl	80026ea <UART_WaitOnFlagUntilTimeout>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e006      	b.n	80026e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2220      	movs	r2, #32
 80026d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80026dc:	2300      	movs	r3, #0
 80026de:	e000      	b.n	80026e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80026e0:	2302      	movs	r3, #2
  }
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3720      	adds	r7, #32
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b084      	sub	sp, #16
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	60f8      	str	r0, [r7, #12]
 80026f2:	60b9      	str	r1, [r7, #8]
 80026f4:	603b      	str	r3, [r7, #0]
 80026f6:	4613      	mov	r3, r2
 80026f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026fa:	e02c      	b.n	8002756 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002702:	d028      	beq.n	8002756 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d007      	beq.n	800271a <UART_WaitOnFlagUntilTimeout+0x30>
 800270a:	f7fe fc07 	bl	8000f1c <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	429a      	cmp	r2, r3
 8002718:	d21d      	bcs.n	8002756 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68da      	ldr	r2, [r3, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002728:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	695a      	ldr	r2, [r3, #20]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0201 	bic.w	r2, r2, #1
 8002738:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2220      	movs	r2, #32
 800273e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2220      	movs	r2, #32
 8002746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e00f      	b.n	8002776 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	4013      	ands	r3, r2
 8002760:	68ba      	ldr	r2, [r7, #8]
 8002762:	429a      	cmp	r2, r3
 8002764:	bf0c      	ite	eq
 8002766:	2301      	moveq	r3, #1
 8002768:	2300      	movne	r3, #0
 800276a:	b2db      	uxtb	r3, r3
 800276c:	461a      	mov	r2, r3
 800276e:	79fb      	ldrb	r3, [r7, #7]
 8002770:	429a      	cmp	r2, r3
 8002772:	d0c3      	beq.n	80026fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
	...

08002780 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80027ba:	f023 030c 	bic.w	r3, r3, #12
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	6812      	ldr	r2, [r2, #0]
 80027c2:	68b9      	ldr	r1, [r7, #8]
 80027c4:	430b      	orrs	r3, r1
 80027c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	699a      	ldr	r2, [r3, #24]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a2c      	ldr	r2, [pc, #176]	; (8002894 <UART_SetConfig+0x114>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d103      	bne.n	80027f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80027e8:	f7ff fa80 	bl	8001cec <HAL_RCC_GetPCLK2Freq>
 80027ec:	60f8      	str	r0, [r7, #12]
 80027ee:	e002      	b.n	80027f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80027f0:	f7ff fa68 	bl	8001cc4 <HAL_RCC_GetPCLK1Freq>
 80027f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	4613      	mov	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	009a      	lsls	r2, r3, #2
 8002800:	441a      	add	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	fbb2 f3f3 	udiv	r3, r2, r3
 800280c:	4a22      	ldr	r2, [pc, #136]	; (8002898 <UART_SetConfig+0x118>)
 800280e:	fba2 2303 	umull	r2, r3, r2, r3
 8002812:	095b      	lsrs	r3, r3, #5
 8002814:	0119      	lsls	r1, r3, #4
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	4613      	mov	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	009a      	lsls	r2, r3, #2
 8002820:	441a      	add	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	fbb2 f2f3 	udiv	r2, r2, r3
 800282c:	4b1a      	ldr	r3, [pc, #104]	; (8002898 <UART_SetConfig+0x118>)
 800282e:	fba3 0302 	umull	r0, r3, r3, r2
 8002832:	095b      	lsrs	r3, r3, #5
 8002834:	2064      	movs	r0, #100	; 0x64
 8002836:	fb00 f303 	mul.w	r3, r0, r3
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	011b      	lsls	r3, r3, #4
 800283e:	3332      	adds	r3, #50	; 0x32
 8002840:	4a15      	ldr	r2, [pc, #84]	; (8002898 <UART_SetConfig+0x118>)
 8002842:	fba2 2303 	umull	r2, r3, r2, r3
 8002846:	095b      	lsrs	r3, r3, #5
 8002848:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800284c:	4419      	add	r1, r3
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	4613      	mov	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	009a      	lsls	r2, r3, #2
 8002858:	441a      	add	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	fbb2 f2f3 	udiv	r2, r2, r3
 8002864:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <UART_SetConfig+0x118>)
 8002866:	fba3 0302 	umull	r0, r3, r3, r2
 800286a:	095b      	lsrs	r3, r3, #5
 800286c:	2064      	movs	r0, #100	; 0x64
 800286e:	fb00 f303 	mul.w	r3, r0, r3
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	011b      	lsls	r3, r3, #4
 8002876:	3332      	adds	r3, #50	; 0x32
 8002878:	4a07      	ldr	r2, [pc, #28]	; (8002898 <UART_SetConfig+0x118>)
 800287a:	fba2 2303 	umull	r2, r3, r2, r3
 800287e:	095b      	lsrs	r3, r3, #5
 8002880:	f003 020f 	and.w	r2, r3, #15
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	440a      	add	r2, r1
 800288a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800288c:	bf00      	nop
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40013800 	.word	0x40013800
 8002898:	51eb851f 	.word	0x51eb851f

0800289c <__errno>:
 800289c:	4b01      	ldr	r3, [pc, #4]	; (80028a4 <__errno+0x8>)
 800289e:	6818      	ldr	r0, [r3, #0]
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	2000000c 	.word	0x2000000c

080028a8 <__libc_init_array>:
 80028a8:	b570      	push	{r4, r5, r6, lr}
 80028aa:	2500      	movs	r5, #0
 80028ac:	4e0c      	ldr	r6, [pc, #48]	; (80028e0 <__libc_init_array+0x38>)
 80028ae:	4c0d      	ldr	r4, [pc, #52]	; (80028e4 <__libc_init_array+0x3c>)
 80028b0:	1ba4      	subs	r4, r4, r6
 80028b2:	10a4      	asrs	r4, r4, #2
 80028b4:	42a5      	cmp	r5, r4
 80028b6:	d109      	bne.n	80028cc <__libc_init_array+0x24>
 80028b8:	f000 ff74 	bl	80037a4 <_init>
 80028bc:	2500      	movs	r5, #0
 80028be:	4e0a      	ldr	r6, [pc, #40]	; (80028e8 <__libc_init_array+0x40>)
 80028c0:	4c0a      	ldr	r4, [pc, #40]	; (80028ec <__libc_init_array+0x44>)
 80028c2:	1ba4      	subs	r4, r4, r6
 80028c4:	10a4      	asrs	r4, r4, #2
 80028c6:	42a5      	cmp	r5, r4
 80028c8:	d105      	bne.n	80028d6 <__libc_init_array+0x2e>
 80028ca:	bd70      	pop	{r4, r5, r6, pc}
 80028cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028d0:	4798      	blx	r3
 80028d2:	3501      	adds	r5, #1
 80028d4:	e7ee      	b.n	80028b4 <__libc_init_array+0xc>
 80028d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028da:	4798      	blx	r3
 80028dc:	3501      	adds	r5, #1
 80028de:	e7f2      	b.n	80028c6 <__libc_init_array+0x1e>
 80028e0:	08003968 	.word	0x08003968
 80028e4:	08003968 	.word	0x08003968
 80028e8:	08003968 	.word	0x08003968
 80028ec:	0800396c 	.word	0x0800396c

080028f0 <memset>:
 80028f0:	4603      	mov	r3, r0
 80028f2:	4402      	add	r2, r0
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d100      	bne.n	80028fa <memset+0xa>
 80028f8:	4770      	bx	lr
 80028fa:	f803 1b01 	strb.w	r1, [r3], #1
 80028fe:	e7f9      	b.n	80028f4 <memset+0x4>

08002900 <iprintf>:
 8002900:	b40f      	push	{r0, r1, r2, r3}
 8002902:	4b0a      	ldr	r3, [pc, #40]	; (800292c <iprintf+0x2c>)
 8002904:	b513      	push	{r0, r1, r4, lr}
 8002906:	681c      	ldr	r4, [r3, #0]
 8002908:	b124      	cbz	r4, 8002914 <iprintf+0x14>
 800290a:	69a3      	ldr	r3, [r4, #24]
 800290c:	b913      	cbnz	r3, 8002914 <iprintf+0x14>
 800290e:	4620      	mov	r0, r4
 8002910:	f000 fa22 	bl	8002d58 <__sinit>
 8002914:	ab05      	add	r3, sp, #20
 8002916:	9a04      	ldr	r2, [sp, #16]
 8002918:	68a1      	ldr	r1, [r4, #8]
 800291a:	4620      	mov	r0, r4
 800291c:	9301      	str	r3, [sp, #4]
 800291e:	f000 fbd7 	bl	80030d0 <_vfiprintf_r>
 8002922:	b002      	add	sp, #8
 8002924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002928:	b004      	add	sp, #16
 800292a:	4770      	bx	lr
 800292c:	2000000c 	.word	0x2000000c

08002930 <_puts_r>:
 8002930:	b570      	push	{r4, r5, r6, lr}
 8002932:	460e      	mov	r6, r1
 8002934:	4605      	mov	r5, r0
 8002936:	b118      	cbz	r0, 8002940 <_puts_r+0x10>
 8002938:	6983      	ldr	r3, [r0, #24]
 800293a:	b90b      	cbnz	r3, 8002940 <_puts_r+0x10>
 800293c:	f000 fa0c 	bl	8002d58 <__sinit>
 8002940:	69ab      	ldr	r3, [r5, #24]
 8002942:	68ac      	ldr	r4, [r5, #8]
 8002944:	b913      	cbnz	r3, 800294c <_puts_r+0x1c>
 8002946:	4628      	mov	r0, r5
 8002948:	f000 fa06 	bl	8002d58 <__sinit>
 800294c:	4b23      	ldr	r3, [pc, #140]	; (80029dc <_puts_r+0xac>)
 800294e:	429c      	cmp	r4, r3
 8002950:	d117      	bne.n	8002982 <_puts_r+0x52>
 8002952:	686c      	ldr	r4, [r5, #4]
 8002954:	89a3      	ldrh	r3, [r4, #12]
 8002956:	071b      	lsls	r3, r3, #28
 8002958:	d51d      	bpl.n	8002996 <_puts_r+0x66>
 800295a:	6923      	ldr	r3, [r4, #16]
 800295c:	b1db      	cbz	r3, 8002996 <_puts_r+0x66>
 800295e:	3e01      	subs	r6, #1
 8002960:	68a3      	ldr	r3, [r4, #8]
 8002962:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002966:	3b01      	subs	r3, #1
 8002968:	60a3      	str	r3, [r4, #8]
 800296a:	b9e9      	cbnz	r1, 80029a8 <_puts_r+0x78>
 800296c:	2b00      	cmp	r3, #0
 800296e:	da2e      	bge.n	80029ce <_puts_r+0x9e>
 8002970:	4622      	mov	r2, r4
 8002972:	210a      	movs	r1, #10
 8002974:	4628      	mov	r0, r5
 8002976:	f000 f83f 	bl	80029f8 <__swbuf_r>
 800297a:	3001      	adds	r0, #1
 800297c:	d011      	beq.n	80029a2 <_puts_r+0x72>
 800297e:	200a      	movs	r0, #10
 8002980:	e011      	b.n	80029a6 <_puts_r+0x76>
 8002982:	4b17      	ldr	r3, [pc, #92]	; (80029e0 <_puts_r+0xb0>)
 8002984:	429c      	cmp	r4, r3
 8002986:	d101      	bne.n	800298c <_puts_r+0x5c>
 8002988:	68ac      	ldr	r4, [r5, #8]
 800298a:	e7e3      	b.n	8002954 <_puts_r+0x24>
 800298c:	4b15      	ldr	r3, [pc, #84]	; (80029e4 <_puts_r+0xb4>)
 800298e:	429c      	cmp	r4, r3
 8002990:	bf08      	it	eq
 8002992:	68ec      	ldreq	r4, [r5, #12]
 8002994:	e7de      	b.n	8002954 <_puts_r+0x24>
 8002996:	4621      	mov	r1, r4
 8002998:	4628      	mov	r0, r5
 800299a:	f000 f87f 	bl	8002a9c <__swsetup_r>
 800299e:	2800      	cmp	r0, #0
 80029a0:	d0dd      	beq.n	800295e <_puts_r+0x2e>
 80029a2:	f04f 30ff 	mov.w	r0, #4294967295
 80029a6:	bd70      	pop	{r4, r5, r6, pc}
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	da04      	bge.n	80029b6 <_puts_r+0x86>
 80029ac:	69a2      	ldr	r2, [r4, #24]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	dc06      	bgt.n	80029c0 <_puts_r+0x90>
 80029b2:	290a      	cmp	r1, #10
 80029b4:	d004      	beq.n	80029c0 <_puts_r+0x90>
 80029b6:	6823      	ldr	r3, [r4, #0]
 80029b8:	1c5a      	adds	r2, r3, #1
 80029ba:	6022      	str	r2, [r4, #0]
 80029bc:	7019      	strb	r1, [r3, #0]
 80029be:	e7cf      	b.n	8002960 <_puts_r+0x30>
 80029c0:	4622      	mov	r2, r4
 80029c2:	4628      	mov	r0, r5
 80029c4:	f000 f818 	bl	80029f8 <__swbuf_r>
 80029c8:	3001      	adds	r0, #1
 80029ca:	d1c9      	bne.n	8002960 <_puts_r+0x30>
 80029cc:	e7e9      	b.n	80029a2 <_puts_r+0x72>
 80029ce:	200a      	movs	r0, #10
 80029d0:	6823      	ldr	r3, [r4, #0]
 80029d2:	1c5a      	adds	r2, r3, #1
 80029d4:	6022      	str	r2, [r4, #0]
 80029d6:	7018      	strb	r0, [r3, #0]
 80029d8:	e7e5      	b.n	80029a6 <_puts_r+0x76>
 80029da:	bf00      	nop
 80029dc:	080038f4 	.word	0x080038f4
 80029e0:	08003914 	.word	0x08003914
 80029e4:	080038d4 	.word	0x080038d4

080029e8 <puts>:
 80029e8:	4b02      	ldr	r3, [pc, #8]	; (80029f4 <puts+0xc>)
 80029ea:	4601      	mov	r1, r0
 80029ec:	6818      	ldr	r0, [r3, #0]
 80029ee:	f7ff bf9f 	b.w	8002930 <_puts_r>
 80029f2:	bf00      	nop
 80029f4:	2000000c 	.word	0x2000000c

080029f8 <__swbuf_r>:
 80029f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029fa:	460e      	mov	r6, r1
 80029fc:	4614      	mov	r4, r2
 80029fe:	4605      	mov	r5, r0
 8002a00:	b118      	cbz	r0, 8002a0a <__swbuf_r+0x12>
 8002a02:	6983      	ldr	r3, [r0, #24]
 8002a04:	b90b      	cbnz	r3, 8002a0a <__swbuf_r+0x12>
 8002a06:	f000 f9a7 	bl	8002d58 <__sinit>
 8002a0a:	4b21      	ldr	r3, [pc, #132]	; (8002a90 <__swbuf_r+0x98>)
 8002a0c:	429c      	cmp	r4, r3
 8002a0e:	d12a      	bne.n	8002a66 <__swbuf_r+0x6e>
 8002a10:	686c      	ldr	r4, [r5, #4]
 8002a12:	69a3      	ldr	r3, [r4, #24]
 8002a14:	60a3      	str	r3, [r4, #8]
 8002a16:	89a3      	ldrh	r3, [r4, #12]
 8002a18:	071a      	lsls	r2, r3, #28
 8002a1a:	d52e      	bpl.n	8002a7a <__swbuf_r+0x82>
 8002a1c:	6923      	ldr	r3, [r4, #16]
 8002a1e:	b363      	cbz	r3, 8002a7a <__swbuf_r+0x82>
 8002a20:	6923      	ldr	r3, [r4, #16]
 8002a22:	6820      	ldr	r0, [r4, #0]
 8002a24:	b2f6      	uxtb	r6, r6
 8002a26:	1ac0      	subs	r0, r0, r3
 8002a28:	6963      	ldr	r3, [r4, #20]
 8002a2a:	4637      	mov	r7, r6
 8002a2c:	4283      	cmp	r3, r0
 8002a2e:	dc04      	bgt.n	8002a3a <__swbuf_r+0x42>
 8002a30:	4621      	mov	r1, r4
 8002a32:	4628      	mov	r0, r5
 8002a34:	f000 f926 	bl	8002c84 <_fflush_r>
 8002a38:	bb28      	cbnz	r0, 8002a86 <__swbuf_r+0x8e>
 8002a3a:	68a3      	ldr	r3, [r4, #8]
 8002a3c:	3001      	adds	r0, #1
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	60a3      	str	r3, [r4, #8]
 8002a42:	6823      	ldr	r3, [r4, #0]
 8002a44:	1c5a      	adds	r2, r3, #1
 8002a46:	6022      	str	r2, [r4, #0]
 8002a48:	701e      	strb	r6, [r3, #0]
 8002a4a:	6963      	ldr	r3, [r4, #20]
 8002a4c:	4283      	cmp	r3, r0
 8002a4e:	d004      	beq.n	8002a5a <__swbuf_r+0x62>
 8002a50:	89a3      	ldrh	r3, [r4, #12]
 8002a52:	07db      	lsls	r3, r3, #31
 8002a54:	d519      	bpl.n	8002a8a <__swbuf_r+0x92>
 8002a56:	2e0a      	cmp	r6, #10
 8002a58:	d117      	bne.n	8002a8a <__swbuf_r+0x92>
 8002a5a:	4621      	mov	r1, r4
 8002a5c:	4628      	mov	r0, r5
 8002a5e:	f000 f911 	bl	8002c84 <_fflush_r>
 8002a62:	b190      	cbz	r0, 8002a8a <__swbuf_r+0x92>
 8002a64:	e00f      	b.n	8002a86 <__swbuf_r+0x8e>
 8002a66:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <__swbuf_r+0x9c>)
 8002a68:	429c      	cmp	r4, r3
 8002a6a:	d101      	bne.n	8002a70 <__swbuf_r+0x78>
 8002a6c:	68ac      	ldr	r4, [r5, #8]
 8002a6e:	e7d0      	b.n	8002a12 <__swbuf_r+0x1a>
 8002a70:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <__swbuf_r+0xa0>)
 8002a72:	429c      	cmp	r4, r3
 8002a74:	bf08      	it	eq
 8002a76:	68ec      	ldreq	r4, [r5, #12]
 8002a78:	e7cb      	b.n	8002a12 <__swbuf_r+0x1a>
 8002a7a:	4621      	mov	r1, r4
 8002a7c:	4628      	mov	r0, r5
 8002a7e:	f000 f80d 	bl	8002a9c <__swsetup_r>
 8002a82:	2800      	cmp	r0, #0
 8002a84:	d0cc      	beq.n	8002a20 <__swbuf_r+0x28>
 8002a86:	f04f 37ff 	mov.w	r7, #4294967295
 8002a8a:	4638      	mov	r0, r7
 8002a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	080038f4 	.word	0x080038f4
 8002a94:	08003914 	.word	0x08003914
 8002a98:	080038d4 	.word	0x080038d4

08002a9c <__swsetup_r>:
 8002a9c:	4b32      	ldr	r3, [pc, #200]	; (8002b68 <__swsetup_r+0xcc>)
 8002a9e:	b570      	push	{r4, r5, r6, lr}
 8002aa0:	681d      	ldr	r5, [r3, #0]
 8002aa2:	4606      	mov	r6, r0
 8002aa4:	460c      	mov	r4, r1
 8002aa6:	b125      	cbz	r5, 8002ab2 <__swsetup_r+0x16>
 8002aa8:	69ab      	ldr	r3, [r5, #24]
 8002aaa:	b913      	cbnz	r3, 8002ab2 <__swsetup_r+0x16>
 8002aac:	4628      	mov	r0, r5
 8002aae:	f000 f953 	bl	8002d58 <__sinit>
 8002ab2:	4b2e      	ldr	r3, [pc, #184]	; (8002b6c <__swsetup_r+0xd0>)
 8002ab4:	429c      	cmp	r4, r3
 8002ab6:	d10f      	bne.n	8002ad8 <__swsetup_r+0x3c>
 8002ab8:	686c      	ldr	r4, [r5, #4]
 8002aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	0715      	lsls	r5, r2, #28
 8002ac2:	d42c      	bmi.n	8002b1e <__swsetup_r+0x82>
 8002ac4:	06d0      	lsls	r0, r2, #27
 8002ac6:	d411      	bmi.n	8002aec <__swsetup_r+0x50>
 8002ac8:	2209      	movs	r2, #9
 8002aca:	6032      	str	r2, [r6, #0]
 8002acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ad0:	81a3      	strh	r3, [r4, #12]
 8002ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad6:	e03e      	b.n	8002b56 <__swsetup_r+0xba>
 8002ad8:	4b25      	ldr	r3, [pc, #148]	; (8002b70 <__swsetup_r+0xd4>)
 8002ada:	429c      	cmp	r4, r3
 8002adc:	d101      	bne.n	8002ae2 <__swsetup_r+0x46>
 8002ade:	68ac      	ldr	r4, [r5, #8]
 8002ae0:	e7eb      	b.n	8002aba <__swsetup_r+0x1e>
 8002ae2:	4b24      	ldr	r3, [pc, #144]	; (8002b74 <__swsetup_r+0xd8>)
 8002ae4:	429c      	cmp	r4, r3
 8002ae6:	bf08      	it	eq
 8002ae8:	68ec      	ldreq	r4, [r5, #12]
 8002aea:	e7e6      	b.n	8002aba <__swsetup_r+0x1e>
 8002aec:	0751      	lsls	r1, r2, #29
 8002aee:	d512      	bpl.n	8002b16 <__swsetup_r+0x7a>
 8002af0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002af2:	b141      	cbz	r1, 8002b06 <__swsetup_r+0x6a>
 8002af4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002af8:	4299      	cmp	r1, r3
 8002afa:	d002      	beq.n	8002b02 <__swsetup_r+0x66>
 8002afc:	4630      	mov	r0, r6
 8002afe:	f000 fa19 	bl	8002f34 <_free_r>
 8002b02:	2300      	movs	r3, #0
 8002b04:	6363      	str	r3, [r4, #52]	; 0x34
 8002b06:	89a3      	ldrh	r3, [r4, #12]
 8002b08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002b0c:	81a3      	strh	r3, [r4, #12]
 8002b0e:	2300      	movs	r3, #0
 8002b10:	6063      	str	r3, [r4, #4]
 8002b12:	6923      	ldr	r3, [r4, #16]
 8002b14:	6023      	str	r3, [r4, #0]
 8002b16:	89a3      	ldrh	r3, [r4, #12]
 8002b18:	f043 0308 	orr.w	r3, r3, #8
 8002b1c:	81a3      	strh	r3, [r4, #12]
 8002b1e:	6923      	ldr	r3, [r4, #16]
 8002b20:	b94b      	cbnz	r3, 8002b36 <__swsetup_r+0x9a>
 8002b22:	89a3      	ldrh	r3, [r4, #12]
 8002b24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b2c:	d003      	beq.n	8002b36 <__swsetup_r+0x9a>
 8002b2e:	4621      	mov	r1, r4
 8002b30:	4630      	mov	r0, r6
 8002b32:	f000 f9bf 	bl	8002eb4 <__smakebuf_r>
 8002b36:	89a2      	ldrh	r2, [r4, #12]
 8002b38:	f012 0301 	ands.w	r3, r2, #1
 8002b3c:	d00c      	beq.n	8002b58 <__swsetup_r+0xbc>
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60a3      	str	r3, [r4, #8]
 8002b42:	6963      	ldr	r3, [r4, #20]
 8002b44:	425b      	negs	r3, r3
 8002b46:	61a3      	str	r3, [r4, #24]
 8002b48:	6923      	ldr	r3, [r4, #16]
 8002b4a:	b953      	cbnz	r3, 8002b62 <__swsetup_r+0xc6>
 8002b4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b50:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002b54:	d1ba      	bne.n	8002acc <__swsetup_r+0x30>
 8002b56:	bd70      	pop	{r4, r5, r6, pc}
 8002b58:	0792      	lsls	r2, r2, #30
 8002b5a:	bf58      	it	pl
 8002b5c:	6963      	ldrpl	r3, [r4, #20]
 8002b5e:	60a3      	str	r3, [r4, #8]
 8002b60:	e7f2      	b.n	8002b48 <__swsetup_r+0xac>
 8002b62:	2000      	movs	r0, #0
 8002b64:	e7f7      	b.n	8002b56 <__swsetup_r+0xba>
 8002b66:	bf00      	nop
 8002b68:	2000000c 	.word	0x2000000c
 8002b6c:	080038f4 	.word	0x080038f4
 8002b70:	08003914 	.word	0x08003914
 8002b74:	080038d4 	.word	0x080038d4

08002b78 <__sflush_r>:
 8002b78:	898a      	ldrh	r2, [r1, #12]
 8002b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b7e:	4605      	mov	r5, r0
 8002b80:	0710      	lsls	r0, r2, #28
 8002b82:	460c      	mov	r4, r1
 8002b84:	d458      	bmi.n	8002c38 <__sflush_r+0xc0>
 8002b86:	684b      	ldr	r3, [r1, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	dc05      	bgt.n	8002b98 <__sflush_r+0x20>
 8002b8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	dc02      	bgt.n	8002b98 <__sflush_r+0x20>
 8002b92:	2000      	movs	r0, #0
 8002b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002b9a:	2e00      	cmp	r6, #0
 8002b9c:	d0f9      	beq.n	8002b92 <__sflush_r+0x1a>
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002ba4:	682f      	ldr	r7, [r5, #0]
 8002ba6:	6a21      	ldr	r1, [r4, #32]
 8002ba8:	602b      	str	r3, [r5, #0]
 8002baa:	d032      	beq.n	8002c12 <__sflush_r+0x9a>
 8002bac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002bae:	89a3      	ldrh	r3, [r4, #12]
 8002bb0:	075a      	lsls	r2, r3, #29
 8002bb2:	d505      	bpl.n	8002bc0 <__sflush_r+0x48>
 8002bb4:	6863      	ldr	r3, [r4, #4]
 8002bb6:	1ac0      	subs	r0, r0, r3
 8002bb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002bba:	b10b      	cbz	r3, 8002bc0 <__sflush_r+0x48>
 8002bbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002bbe:	1ac0      	subs	r0, r0, r3
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002bc6:	6a21      	ldr	r1, [r4, #32]
 8002bc8:	4628      	mov	r0, r5
 8002bca:	47b0      	blx	r6
 8002bcc:	1c43      	adds	r3, r0, #1
 8002bce:	89a3      	ldrh	r3, [r4, #12]
 8002bd0:	d106      	bne.n	8002be0 <__sflush_r+0x68>
 8002bd2:	6829      	ldr	r1, [r5, #0]
 8002bd4:	291d      	cmp	r1, #29
 8002bd6:	d848      	bhi.n	8002c6a <__sflush_r+0xf2>
 8002bd8:	4a29      	ldr	r2, [pc, #164]	; (8002c80 <__sflush_r+0x108>)
 8002bda:	40ca      	lsrs	r2, r1
 8002bdc:	07d6      	lsls	r6, r2, #31
 8002bde:	d544      	bpl.n	8002c6a <__sflush_r+0xf2>
 8002be0:	2200      	movs	r2, #0
 8002be2:	6062      	str	r2, [r4, #4]
 8002be4:	6922      	ldr	r2, [r4, #16]
 8002be6:	04d9      	lsls	r1, r3, #19
 8002be8:	6022      	str	r2, [r4, #0]
 8002bea:	d504      	bpl.n	8002bf6 <__sflush_r+0x7e>
 8002bec:	1c42      	adds	r2, r0, #1
 8002bee:	d101      	bne.n	8002bf4 <__sflush_r+0x7c>
 8002bf0:	682b      	ldr	r3, [r5, #0]
 8002bf2:	b903      	cbnz	r3, 8002bf6 <__sflush_r+0x7e>
 8002bf4:	6560      	str	r0, [r4, #84]	; 0x54
 8002bf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002bf8:	602f      	str	r7, [r5, #0]
 8002bfa:	2900      	cmp	r1, #0
 8002bfc:	d0c9      	beq.n	8002b92 <__sflush_r+0x1a>
 8002bfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c02:	4299      	cmp	r1, r3
 8002c04:	d002      	beq.n	8002c0c <__sflush_r+0x94>
 8002c06:	4628      	mov	r0, r5
 8002c08:	f000 f994 	bl	8002f34 <_free_r>
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	6360      	str	r0, [r4, #52]	; 0x34
 8002c10:	e7c0      	b.n	8002b94 <__sflush_r+0x1c>
 8002c12:	2301      	movs	r3, #1
 8002c14:	4628      	mov	r0, r5
 8002c16:	47b0      	blx	r6
 8002c18:	1c41      	adds	r1, r0, #1
 8002c1a:	d1c8      	bne.n	8002bae <__sflush_r+0x36>
 8002c1c:	682b      	ldr	r3, [r5, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0c5      	beq.n	8002bae <__sflush_r+0x36>
 8002c22:	2b1d      	cmp	r3, #29
 8002c24:	d001      	beq.n	8002c2a <__sflush_r+0xb2>
 8002c26:	2b16      	cmp	r3, #22
 8002c28:	d101      	bne.n	8002c2e <__sflush_r+0xb6>
 8002c2a:	602f      	str	r7, [r5, #0]
 8002c2c:	e7b1      	b.n	8002b92 <__sflush_r+0x1a>
 8002c2e:	89a3      	ldrh	r3, [r4, #12]
 8002c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c34:	81a3      	strh	r3, [r4, #12]
 8002c36:	e7ad      	b.n	8002b94 <__sflush_r+0x1c>
 8002c38:	690f      	ldr	r7, [r1, #16]
 8002c3a:	2f00      	cmp	r7, #0
 8002c3c:	d0a9      	beq.n	8002b92 <__sflush_r+0x1a>
 8002c3e:	0793      	lsls	r3, r2, #30
 8002c40:	bf18      	it	ne
 8002c42:	2300      	movne	r3, #0
 8002c44:	680e      	ldr	r6, [r1, #0]
 8002c46:	bf08      	it	eq
 8002c48:	694b      	ldreq	r3, [r1, #20]
 8002c4a:	eba6 0807 	sub.w	r8, r6, r7
 8002c4e:	600f      	str	r7, [r1, #0]
 8002c50:	608b      	str	r3, [r1, #8]
 8002c52:	f1b8 0f00 	cmp.w	r8, #0
 8002c56:	dd9c      	ble.n	8002b92 <__sflush_r+0x1a>
 8002c58:	4643      	mov	r3, r8
 8002c5a:	463a      	mov	r2, r7
 8002c5c:	6a21      	ldr	r1, [r4, #32]
 8002c5e:	4628      	mov	r0, r5
 8002c60:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002c62:	47b0      	blx	r6
 8002c64:	2800      	cmp	r0, #0
 8002c66:	dc06      	bgt.n	8002c76 <__sflush_r+0xfe>
 8002c68:	89a3      	ldrh	r3, [r4, #12]
 8002c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c6e:	81a3      	strh	r3, [r4, #12]
 8002c70:	f04f 30ff 	mov.w	r0, #4294967295
 8002c74:	e78e      	b.n	8002b94 <__sflush_r+0x1c>
 8002c76:	4407      	add	r7, r0
 8002c78:	eba8 0800 	sub.w	r8, r8, r0
 8002c7c:	e7e9      	b.n	8002c52 <__sflush_r+0xda>
 8002c7e:	bf00      	nop
 8002c80:	20400001 	.word	0x20400001

08002c84 <_fflush_r>:
 8002c84:	b538      	push	{r3, r4, r5, lr}
 8002c86:	690b      	ldr	r3, [r1, #16]
 8002c88:	4605      	mov	r5, r0
 8002c8a:	460c      	mov	r4, r1
 8002c8c:	b1db      	cbz	r3, 8002cc6 <_fflush_r+0x42>
 8002c8e:	b118      	cbz	r0, 8002c98 <_fflush_r+0x14>
 8002c90:	6983      	ldr	r3, [r0, #24]
 8002c92:	b90b      	cbnz	r3, 8002c98 <_fflush_r+0x14>
 8002c94:	f000 f860 	bl	8002d58 <__sinit>
 8002c98:	4b0c      	ldr	r3, [pc, #48]	; (8002ccc <_fflush_r+0x48>)
 8002c9a:	429c      	cmp	r4, r3
 8002c9c:	d109      	bne.n	8002cb2 <_fflush_r+0x2e>
 8002c9e:	686c      	ldr	r4, [r5, #4]
 8002ca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ca4:	b17b      	cbz	r3, 8002cc6 <_fflush_r+0x42>
 8002ca6:	4621      	mov	r1, r4
 8002ca8:	4628      	mov	r0, r5
 8002caa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002cae:	f7ff bf63 	b.w	8002b78 <__sflush_r>
 8002cb2:	4b07      	ldr	r3, [pc, #28]	; (8002cd0 <_fflush_r+0x4c>)
 8002cb4:	429c      	cmp	r4, r3
 8002cb6:	d101      	bne.n	8002cbc <_fflush_r+0x38>
 8002cb8:	68ac      	ldr	r4, [r5, #8]
 8002cba:	e7f1      	b.n	8002ca0 <_fflush_r+0x1c>
 8002cbc:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <_fflush_r+0x50>)
 8002cbe:	429c      	cmp	r4, r3
 8002cc0:	bf08      	it	eq
 8002cc2:	68ec      	ldreq	r4, [r5, #12]
 8002cc4:	e7ec      	b.n	8002ca0 <_fflush_r+0x1c>
 8002cc6:	2000      	movs	r0, #0
 8002cc8:	bd38      	pop	{r3, r4, r5, pc}
 8002cca:	bf00      	nop
 8002ccc:	080038f4 	.word	0x080038f4
 8002cd0:	08003914 	.word	0x08003914
 8002cd4:	080038d4 	.word	0x080038d4

08002cd8 <std>:
 8002cd8:	2300      	movs	r3, #0
 8002cda:	b510      	push	{r4, lr}
 8002cdc:	4604      	mov	r4, r0
 8002cde:	e9c0 3300 	strd	r3, r3, [r0]
 8002ce2:	6083      	str	r3, [r0, #8]
 8002ce4:	8181      	strh	r1, [r0, #12]
 8002ce6:	6643      	str	r3, [r0, #100]	; 0x64
 8002ce8:	81c2      	strh	r2, [r0, #14]
 8002cea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002cee:	6183      	str	r3, [r0, #24]
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	2208      	movs	r2, #8
 8002cf4:	305c      	adds	r0, #92	; 0x5c
 8002cf6:	f7ff fdfb 	bl	80028f0 <memset>
 8002cfa:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <std+0x38>)
 8002cfc:	6224      	str	r4, [r4, #32]
 8002cfe:	6263      	str	r3, [r4, #36]	; 0x24
 8002d00:	4b04      	ldr	r3, [pc, #16]	; (8002d14 <std+0x3c>)
 8002d02:	62a3      	str	r3, [r4, #40]	; 0x28
 8002d04:	4b04      	ldr	r3, [pc, #16]	; (8002d18 <std+0x40>)
 8002d06:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002d08:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <std+0x44>)
 8002d0a:	6323      	str	r3, [r4, #48]	; 0x30
 8002d0c:	bd10      	pop	{r4, pc}
 8002d0e:	bf00      	nop
 8002d10:	0800362d 	.word	0x0800362d
 8002d14:	0800364f 	.word	0x0800364f
 8002d18:	08003687 	.word	0x08003687
 8002d1c:	080036ab 	.word	0x080036ab

08002d20 <_cleanup_r>:
 8002d20:	4901      	ldr	r1, [pc, #4]	; (8002d28 <_cleanup_r+0x8>)
 8002d22:	f000 b885 	b.w	8002e30 <_fwalk_reent>
 8002d26:	bf00      	nop
 8002d28:	08002c85 	.word	0x08002c85

08002d2c <__sfmoreglue>:
 8002d2c:	b570      	push	{r4, r5, r6, lr}
 8002d2e:	2568      	movs	r5, #104	; 0x68
 8002d30:	1e4a      	subs	r2, r1, #1
 8002d32:	4355      	muls	r5, r2
 8002d34:	460e      	mov	r6, r1
 8002d36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002d3a:	f000 f947 	bl	8002fcc <_malloc_r>
 8002d3e:	4604      	mov	r4, r0
 8002d40:	b140      	cbz	r0, 8002d54 <__sfmoreglue+0x28>
 8002d42:	2100      	movs	r1, #0
 8002d44:	e9c0 1600 	strd	r1, r6, [r0]
 8002d48:	300c      	adds	r0, #12
 8002d4a:	60a0      	str	r0, [r4, #8]
 8002d4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002d50:	f7ff fdce 	bl	80028f0 <memset>
 8002d54:	4620      	mov	r0, r4
 8002d56:	bd70      	pop	{r4, r5, r6, pc}

08002d58 <__sinit>:
 8002d58:	6983      	ldr	r3, [r0, #24]
 8002d5a:	b510      	push	{r4, lr}
 8002d5c:	4604      	mov	r4, r0
 8002d5e:	bb33      	cbnz	r3, 8002dae <__sinit+0x56>
 8002d60:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002d64:	6503      	str	r3, [r0, #80]	; 0x50
 8002d66:	4b12      	ldr	r3, [pc, #72]	; (8002db0 <__sinit+0x58>)
 8002d68:	4a12      	ldr	r2, [pc, #72]	; (8002db4 <__sinit+0x5c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6282      	str	r2, [r0, #40]	; 0x28
 8002d6e:	4298      	cmp	r0, r3
 8002d70:	bf04      	itt	eq
 8002d72:	2301      	moveq	r3, #1
 8002d74:	6183      	streq	r3, [r0, #24]
 8002d76:	f000 f81f 	bl	8002db8 <__sfp>
 8002d7a:	6060      	str	r0, [r4, #4]
 8002d7c:	4620      	mov	r0, r4
 8002d7e:	f000 f81b 	bl	8002db8 <__sfp>
 8002d82:	60a0      	str	r0, [r4, #8]
 8002d84:	4620      	mov	r0, r4
 8002d86:	f000 f817 	bl	8002db8 <__sfp>
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	60e0      	str	r0, [r4, #12]
 8002d8e:	2104      	movs	r1, #4
 8002d90:	6860      	ldr	r0, [r4, #4]
 8002d92:	f7ff ffa1 	bl	8002cd8 <std>
 8002d96:	2201      	movs	r2, #1
 8002d98:	2109      	movs	r1, #9
 8002d9a:	68a0      	ldr	r0, [r4, #8]
 8002d9c:	f7ff ff9c 	bl	8002cd8 <std>
 8002da0:	2202      	movs	r2, #2
 8002da2:	2112      	movs	r1, #18
 8002da4:	68e0      	ldr	r0, [r4, #12]
 8002da6:	f7ff ff97 	bl	8002cd8 <std>
 8002daa:	2301      	movs	r3, #1
 8002dac:	61a3      	str	r3, [r4, #24]
 8002dae:	bd10      	pop	{r4, pc}
 8002db0:	080038d0 	.word	0x080038d0
 8002db4:	08002d21 	.word	0x08002d21

08002db8 <__sfp>:
 8002db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dba:	4b1b      	ldr	r3, [pc, #108]	; (8002e28 <__sfp+0x70>)
 8002dbc:	4607      	mov	r7, r0
 8002dbe:	681e      	ldr	r6, [r3, #0]
 8002dc0:	69b3      	ldr	r3, [r6, #24]
 8002dc2:	b913      	cbnz	r3, 8002dca <__sfp+0x12>
 8002dc4:	4630      	mov	r0, r6
 8002dc6:	f7ff ffc7 	bl	8002d58 <__sinit>
 8002dca:	3648      	adds	r6, #72	; 0x48
 8002dcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	d503      	bpl.n	8002ddc <__sfp+0x24>
 8002dd4:	6833      	ldr	r3, [r6, #0]
 8002dd6:	b133      	cbz	r3, 8002de6 <__sfp+0x2e>
 8002dd8:	6836      	ldr	r6, [r6, #0]
 8002dda:	e7f7      	b.n	8002dcc <__sfp+0x14>
 8002ddc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002de0:	b16d      	cbz	r5, 8002dfe <__sfp+0x46>
 8002de2:	3468      	adds	r4, #104	; 0x68
 8002de4:	e7f4      	b.n	8002dd0 <__sfp+0x18>
 8002de6:	2104      	movs	r1, #4
 8002de8:	4638      	mov	r0, r7
 8002dea:	f7ff ff9f 	bl	8002d2c <__sfmoreglue>
 8002dee:	6030      	str	r0, [r6, #0]
 8002df0:	2800      	cmp	r0, #0
 8002df2:	d1f1      	bne.n	8002dd8 <__sfp+0x20>
 8002df4:	230c      	movs	r3, #12
 8002df6:	4604      	mov	r4, r0
 8002df8:	603b      	str	r3, [r7, #0]
 8002dfa:	4620      	mov	r0, r4
 8002dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dfe:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <__sfp+0x74>)
 8002e00:	6665      	str	r5, [r4, #100]	; 0x64
 8002e02:	e9c4 5500 	strd	r5, r5, [r4]
 8002e06:	60a5      	str	r5, [r4, #8]
 8002e08:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002e0c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002e10:	2208      	movs	r2, #8
 8002e12:	4629      	mov	r1, r5
 8002e14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002e18:	f7ff fd6a 	bl	80028f0 <memset>
 8002e1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002e20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002e24:	e7e9      	b.n	8002dfa <__sfp+0x42>
 8002e26:	bf00      	nop
 8002e28:	080038d0 	.word	0x080038d0
 8002e2c:	ffff0001 	.word	0xffff0001

08002e30 <_fwalk_reent>:
 8002e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e34:	4680      	mov	r8, r0
 8002e36:	4689      	mov	r9, r1
 8002e38:	2600      	movs	r6, #0
 8002e3a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002e3e:	b914      	cbnz	r4, 8002e46 <_fwalk_reent+0x16>
 8002e40:	4630      	mov	r0, r6
 8002e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e46:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002e4a:	3f01      	subs	r7, #1
 8002e4c:	d501      	bpl.n	8002e52 <_fwalk_reent+0x22>
 8002e4e:	6824      	ldr	r4, [r4, #0]
 8002e50:	e7f5      	b.n	8002e3e <_fwalk_reent+0xe>
 8002e52:	89ab      	ldrh	r3, [r5, #12]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d907      	bls.n	8002e68 <_fwalk_reent+0x38>
 8002e58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	d003      	beq.n	8002e68 <_fwalk_reent+0x38>
 8002e60:	4629      	mov	r1, r5
 8002e62:	4640      	mov	r0, r8
 8002e64:	47c8      	blx	r9
 8002e66:	4306      	orrs	r6, r0
 8002e68:	3568      	adds	r5, #104	; 0x68
 8002e6a:	e7ee      	b.n	8002e4a <_fwalk_reent+0x1a>

08002e6c <__swhatbuf_r>:
 8002e6c:	b570      	push	{r4, r5, r6, lr}
 8002e6e:	460e      	mov	r6, r1
 8002e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e74:	b096      	sub	sp, #88	; 0x58
 8002e76:	2900      	cmp	r1, #0
 8002e78:	4614      	mov	r4, r2
 8002e7a:	461d      	mov	r5, r3
 8002e7c:	da07      	bge.n	8002e8e <__swhatbuf_r+0x22>
 8002e7e:	2300      	movs	r3, #0
 8002e80:	602b      	str	r3, [r5, #0]
 8002e82:	89b3      	ldrh	r3, [r6, #12]
 8002e84:	061a      	lsls	r2, r3, #24
 8002e86:	d410      	bmi.n	8002eaa <__swhatbuf_r+0x3e>
 8002e88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e8c:	e00e      	b.n	8002eac <__swhatbuf_r+0x40>
 8002e8e:	466a      	mov	r2, sp
 8002e90:	f000 fc32 	bl	80036f8 <_fstat_r>
 8002e94:	2800      	cmp	r0, #0
 8002e96:	dbf2      	blt.n	8002e7e <__swhatbuf_r+0x12>
 8002e98:	9a01      	ldr	r2, [sp, #4]
 8002e9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002e9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002ea2:	425a      	negs	r2, r3
 8002ea4:	415a      	adcs	r2, r3
 8002ea6:	602a      	str	r2, [r5, #0]
 8002ea8:	e7ee      	b.n	8002e88 <__swhatbuf_r+0x1c>
 8002eaa:	2340      	movs	r3, #64	; 0x40
 8002eac:	2000      	movs	r0, #0
 8002eae:	6023      	str	r3, [r4, #0]
 8002eb0:	b016      	add	sp, #88	; 0x58
 8002eb2:	bd70      	pop	{r4, r5, r6, pc}

08002eb4 <__smakebuf_r>:
 8002eb4:	898b      	ldrh	r3, [r1, #12]
 8002eb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002eb8:	079d      	lsls	r5, r3, #30
 8002eba:	4606      	mov	r6, r0
 8002ebc:	460c      	mov	r4, r1
 8002ebe:	d507      	bpl.n	8002ed0 <__smakebuf_r+0x1c>
 8002ec0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002ec4:	6023      	str	r3, [r4, #0]
 8002ec6:	6123      	str	r3, [r4, #16]
 8002ec8:	2301      	movs	r3, #1
 8002eca:	6163      	str	r3, [r4, #20]
 8002ecc:	b002      	add	sp, #8
 8002ece:	bd70      	pop	{r4, r5, r6, pc}
 8002ed0:	ab01      	add	r3, sp, #4
 8002ed2:	466a      	mov	r2, sp
 8002ed4:	f7ff ffca 	bl	8002e6c <__swhatbuf_r>
 8002ed8:	9900      	ldr	r1, [sp, #0]
 8002eda:	4605      	mov	r5, r0
 8002edc:	4630      	mov	r0, r6
 8002ede:	f000 f875 	bl	8002fcc <_malloc_r>
 8002ee2:	b948      	cbnz	r0, 8002ef8 <__smakebuf_r+0x44>
 8002ee4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ee8:	059a      	lsls	r2, r3, #22
 8002eea:	d4ef      	bmi.n	8002ecc <__smakebuf_r+0x18>
 8002eec:	f023 0303 	bic.w	r3, r3, #3
 8002ef0:	f043 0302 	orr.w	r3, r3, #2
 8002ef4:	81a3      	strh	r3, [r4, #12]
 8002ef6:	e7e3      	b.n	8002ec0 <__smakebuf_r+0xc>
 8002ef8:	4b0d      	ldr	r3, [pc, #52]	; (8002f30 <__smakebuf_r+0x7c>)
 8002efa:	62b3      	str	r3, [r6, #40]	; 0x28
 8002efc:	89a3      	ldrh	r3, [r4, #12]
 8002efe:	6020      	str	r0, [r4, #0]
 8002f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f04:	81a3      	strh	r3, [r4, #12]
 8002f06:	9b00      	ldr	r3, [sp, #0]
 8002f08:	6120      	str	r0, [r4, #16]
 8002f0a:	6163      	str	r3, [r4, #20]
 8002f0c:	9b01      	ldr	r3, [sp, #4]
 8002f0e:	b15b      	cbz	r3, 8002f28 <__smakebuf_r+0x74>
 8002f10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f14:	4630      	mov	r0, r6
 8002f16:	f000 fc01 	bl	800371c <_isatty_r>
 8002f1a:	b128      	cbz	r0, 8002f28 <__smakebuf_r+0x74>
 8002f1c:	89a3      	ldrh	r3, [r4, #12]
 8002f1e:	f023 0303 	bic.w	r3, r3, #3
 8002f22:	f043 0301 	orr.w	r3, r3, #1
 8002f26:	81a3      	strh	r3, [r4, #12]
 8002f28:	89a3      	ldrh	r3, [r4, #12]
 8002f2a:	431d      	orrs	r5, r3
 8002f2c:	81a5      	strh	r5, [r4, #12]
 8002f2e:	e7cd      	b.n	8002ecc <__smakebuf_r+0x18>
 8002f30:	08002d21 	.word	0x08002d21

08002f34 <_free_r>:
 8002f34:	b538      	push	{r3, r4, r5, lr}
 8002f36:	4605      	mov	r5, r0
 8002f38:	2900      	cmp	r1, #0
 8002f3a:	d043      	beq.n	8002fc4 <_free_r+0x90>
 8002f3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f40:	1f0c      	subs	r4, r1, #4
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	bfb8      	it	lt
 8002f46:	18e4      	addlt	r4, r4, r3
 8002f48:	f000 fc18 	bl	800377c <__malloc_lock>
 8002f4c:	4a1e      	ldr	r2, [pc, #120]	; (8002fc8 <_free_r+0x94>)
 8002f4e:	6813      	ldr	r3, [r2, #0]
 8002f50:	4610      	mov	r0, r2
 8002f52:	b933      	cbnz	r3, 8002f62 <_free_r+0x2e>
 8002f54:	6063      	str	r3, [r4, #4]
 8002f56:	6014      	str	r4, [r2, #0]
 8002f58:	4628      	mov	r0, r5
 8002f5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f5e:	f000 bc0e 	b.w	800377e <__malloc_unlock>
 8002f62:	42a3      	cmp	r3, r4
 8002f64:	d90b      	bls.n	8002f7e <_free_r+0x4a>
 8002f66:	6821      	ldr	r1, [r4, #0]
 8002f68:	1862      	adds	r2, r4, r1
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	bf01      	itttt	eq
 8002f6e:	681a      	ldreq	r2, [r3, #0]
 8002f70:	685b      	ldreq	r3, [r3, #4]
 8002f72:	1852      	addeq	r2, r2, r1
 8002f74:	6022      	streq	r2, [r4, #0]
 8002f76:	6063      	str	r3, [r4, #4]
 8002f78:	6004      	str	r4, [r0, #0]
 8002f7a:	e7ed      	b.n	8002f58 <_free_r+0x24>
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	b10a      	cbz	r2, 8002f86 <_free_r+0x52>
 8002f82:	42a2      	cmp	r2, r4
 8002f84:	d9fa      	bls.n	8002f7c <_free_r+0x48>
 8002f86:	6819      	ldr	r1, [r3, #0]
 8002f88:	1858      	adds	r0, r3, r1
 8002f8a:	42a0      	cmp	r0, r4
 8002f8c:	d10b      	bne.n	8002fa6 <_free_r+0x72>
 8002f8e:	6820      	ldr	r0, [r4, #0]
 8002f90:	4401      	add	r1, r0
 8002f92:	1858      	adds	r0, r3, r1
 8002f94:	4282      	cmp	r2, r0
 8002f96:	6019      	str	r1, [r3, #0]
 8002f98:	d1de      	bne.n	8002f58 <_free_r+0x24>
 8002f9a:	6810      	ldr	r0, [r2, #0]
 8002f9c:	6852      	ldr	r2, [r2, #4]
 8002f9e:	4401      	add	r1, r0
 8002fa0:	6019      	str	r1, [r3, #0]
 8002fa2:	605a      	str	r2, [r3, #4]
 8002fa4:	e7d8      	b.n	8002f58 <_free_r+0x24>
 8002fa6:	d902      	bls.n	8002fae <_free_r+0x7a>
 8002fa8:	230c      	movs	r3, #12
 8002faa:	602b      	str	r3, [r5, #0]
 8002fac:	e7d4      	b.n	8002f58 <_free_r+0x24>
 8002fae:	6820      	ldr	r0, [r4, #0]
 8002fb0:	1821      	adds	r1, r4, r0
 8002fb2:	428a      	cmp	r2, r1
 8002fb4:	bf01      	itttt	eq
 8002fb6:	6811      	ldreq	r1, [r2, #0]
 8002fb8:	6852      	ldreq	r2, [r2, #4]
 8002fba:	1809      	addeq	r1, r1, r0
 8002fbc:	6021      	streq	r1, [r4, #0]
 8002fbe:	6062      	str	r2, [r4, #4]
 8002fc0:	605c      	str	r4, [r3, #4]
 8002fc2:	e7c9      	b.n	8002f58 <_free_r+0x24>
 8002fc4:	bd38      	pop	{r3, r4, r5, pc}
 8002fc6:	bf00      	nop
 8002fc8:	20000090 	.word	0x20000090

08002fcc <_malloc_r>:
 8002fcc:	b570      	push	{r4, r5, r6, lr}
 8002fce:	1ccd      	adds	r5, r1, #3
 8002fd0:	f025 0503 	bic.w	r5, r5, #3
 8002fd4:	3508      	adds	r5, #8
 8002fd6:	2d0c      	cmp	r5, #12
 8002fd8:	bf38      	it	cc
 8002fda:	250c      	movcc	r5, #12
 8002fdc:	2d00      	cmp	r5, #0
 8002fde:	4606      	mov	r6, r0
 8002fe0:	db01      	blt.n	8002fe6 <_malloc_r+0x1a>
 8002fe2:	42a9      	cmp	r1, r5
 8002fe4:	d903      	bls.n	8002fee <_malloc_r+0x22>
 8002fe6:	230c      	movs	r3, #12
 8002fe8:	6033      	str	r3, [r6, #0]
 8002fea:	2000      	movs	r0, #0
 8002fec:	bd70      	pop	{r4, r5, r6, pc}
 8002fee:	f000 fbc5 	bl	800377c <__malloc_lock>
 8002ff2:	4a21      	ldr	r2, [pc, #132]	; (8003078 <_malloc_r+0xac>)
 8002ff4:	6814      	ldr	r4, [r2, #0]
 8002ff6:	4621      	mov	r1, r4
 8002ff8:	b991      	cbnz	r1, 8003020 <_malloc_r+0x54>
 8002ffa:	4c20      	ldr	r4, [pc, #128]	; (800307c <_malloc_r+0xb0>)
 8002ffc:	6823      	ldr	r3, [r4, #0]
 8002ffe:	b91b      	cbnz	r3, 8003008 <_malloc_r+0x3c>
 8003000:	4630      	mov	r0, r6
 8003002:	f000 fb03 	bl	800360c <_sbrk_r>
 8003006:	6020      	str	r0, [r4, #0]
 8003008:	4629      	mov	r1, r5
 800300a:	4630      	mov	r0, r6
 800300c:	f000 fafe 	bl	800360c <_sbrk_r>
 8003010:	1c43      	adds	r3, r0, #1
 8003012:	d124      	bne.n	800305e <_malloc_r+0x92>
 8003014:	230c      	movs	r3, #12
 8003016:	4630      	mov	r0, r6
 8003018:	6033      	str	r3, [r6, #0]
 800301a:	f000 fbb0 	bl	800377e <__malloc_unlock>
 800301e:	e7e4      	b.n	8002fea <_malloc_r+0x1e>
 8003020:	680b      	ldr	r3, [r1, #0]
 8003022:	1b5b      	subs	r3, r3, r5
 8003024:	d418      	bmi.n	8003058 <_malloc_r+0x8c>
 8003026:	2b0b      	cmp	r3, #11
 8003028:	d90f      	bls.n	800304a <_malloc_r+0x7e>
 800302a:	600b      	str	r3, [r1, #0]
 800302c:	18cc      	adds	r4, r1, r3
 800302e:	50cd      	str	r5, [r1, r3]
 8003030:	4630      	mov	r0, r6
 8003032:	f000 fba4 	bl	800377e <__malloc_unlock>
 8003036:	f104 000b 	add.w	r0, r4, #11
 800303a:	1d23      	adds	r3, r4, #4
 800303c:	f020 0007 	bic.w	r0, r0, #7
 8003040:	1ac3      	subs	r3, r0, r3
 8003042:	d0d3      	beq.n	8002fec <_malloc_r+0x20>
 8003044:	425a      	negs	r2, r3
 8003046:	50e2      	str	r2, [r4, r3]
 8003048:	e7d0      	b.n	8002fec <_malloc_r+0x20>
 800304a:	684b      	ldr	r3, [r1, #4]
 800304c:	428c      	cmp	r4, r1
 800304e:	bf16      	itet	ne
 8003050:	6063      	strne	r3, [r4, #4]
 8003052:	6013      	streq	r3, [r2, #0]
 8003054:	460c      	movne	r4, r1
 8003056:	e7eb      	b.n	8003030 <_malloc_r+0x64>
 8003058:	460c      	mov	r4, r1
 800305a:	6849      	ldr	r1, [r1, #4]
 800305c:	e7cc      	b.n	8002ff8 <_malloc_r+0x2c>
 800305e:	1cc4      	adds	r4, r0, #3
 8003060:	f024 0403 	bic.w	r4, r4, #3
 8003064:	42a0      	cmp	r0, r4
 8003066:	d005      	beq.n	8003074 <_malloc_r+0xa8>
 8003068:	1a21      	subs	r1, r4, r0
 800306a:	4630      	mov	r0, r6
 800306c:	f000 face 	bl	800360c <_sbrk_r>
 8003070:	3001      	adds	r0, #1
 8003072:	d0cf      	beq.n	8003014 <_malloc_r+0x48>
 8003074:	6025      	str	r5, [r4, #0]
 8003076:	e7db      	b.n	8003030 <_malloc_r+0x64>
 8003078:	20000090 	.word	0x20000090
 800307c:	20000094 	.word	0x20000094

08003080 <__sfputc_r>:
 8003080:	6893      	ldr	r3, [r2, #8]
 8003082:	b410      	push	{r4}
 8003084:	3b01      	subs	r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	6093      	str	r3, [r2, #8]
 800308a:	da07      	bge.n	800309c <__sfputc_r+0x1c>
 800308c:	6994      	ldr	r4, [r2, #24]
 800308e:	42a3      	cmp	r3, r4
 8003090:	db01      	blt.n	8003096 <__sfputc_r+0x16>
 8003092:	290a      	cmp	r1, #10
 8003094:	d102      	bne.n	800309c <__sfputc_r+0x1c>
 8003096:	bc10      	pop	{r4}
 8003098:	f7ff bcae 	b.w	80029f8 <__swbuf_r>
 800309c:	6813      	ldr	r3, [r2, #0]
 800309e:	1c58      	adds	r0, r3, #1
 80030a0:	6010      	str	r0, [r2, #0]
 80030a2:	7019      	strb	r1, [r3, #0]
 80030a4:	4608      	mov	r0, r1
 80030a6:	bc10      	pop	{r4}
 80030a8:	4770      	bx	lr

080030aa <__sfputs_r>:
 80030aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ac:	4606      	mov	r6, r0
 80030ae:	460f      	mov	r7, r1
 80030b0:	4614      	mov	r4, r2
 80030b2:	18d5      	adds	r5, r2, r3
 80030b4:	42ac      	cmp	r4, r5
 80030b6:	d101      	bne.n	80030bc <__sfputs_r+0x12>
 80030b8:	2000      	movs	r0, #0
 80030ba:	e007      	b.n	80030cc <__sfputs_r+0x22>
 80030bc:	463a      	mov	r2, r7
 80030be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030c2:	4630      	mov	r0, r6
 80030c4:	f7ff ffdc 	bl	8003080 <__sfputc_r>
 80030c8:	1c43      	adds	r3, r0, #1
 80030ca:	d1f3      	bne.n	80030b4 <__sfputs_r+0xa>
 80030cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080030d0 <_vfiprintf_r>:
 80030d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030d4:	460c      	mov	r4, r1
 80030d6:	b09d      	sub	sp, #116	; 0x74
 80030d8:	4617      	mov	r7, r2
 80030da:	461d      	mov	r5, r3
 80030dc:	4606      	mov	r6, r0
 80030de:	b118      	cbz	r0, 80030e8 <_vfiprintf_r+0x18>
 80030e0:	6983      	ldr	r3, [r0, #24]
 80030e2:	b90b      	cbnz	r3, 80030e8 <_vfiprintf_r+0x18>
 80030e4:	f7ff fe38 	bl	8002d58 <__sinit>
 80030e8:	4b7c      	ldr	r3, [pc, #496]	; (80032dc <_vfiprintf_r+0x20c>)
 80030ea:	429c      	cmp	r4, r3
 80030ec:	d158      	bne.n	80031a0 <_vfiprintf_r+0xd0>
 80030ee:	6874      	ldr	r4, [r6, #4]
 80030f0:	89a3      	ldrh	r3, [r4, #12]
 80030f2:	0718      	lsls	r0, r3, #28
 80030f4:	d55e      	bpl.n	80031b4 <_vfiprintf_r+0xe4>
 80030f6:	6923      	ldr	r3, [r4, #16]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d05b      	beq.n	80031b4 <_vfiprintf_r+0xe4>
 80030fc:	2300      	movs	r3, #0
 80030fe:	9309      	str	r3, [sp, #36]	; 0x24
 8003100:	2320      	movs	r3, #32
 8003102:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003106:	2330      	movs	r3, #48	; 0x30
 8003108:	f04f 0b01 	mov.w	fp, #1
 800310c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003110:	9503      	str	r5, [sp, #12]
 8003112:	46b8      	mov	r8, r7
 8003114:	4645      	mov	r5, r8
 8003116:	f815 3b01 	ldrb.w	r3, [r5], #1
 800311a:	b10b      	cbz	r3, 8003120 <_vfiprintf_r+0x50>
 800311c:	2b25      	cmp	r3, #37	; 0x25
 800311e:	d154      	bne.n	80031ca <_vfiprintf_r+0xfa>
 8003120:	ebb8 0a07 	subs.w	sl, r8, r7
 8003124:	d00b      	beq.n	800313e <_vfiprintf_r+0x6e>
 8003126:	4653      	mov	r3, sl
 8003128:	463a      	mov	r2, r7
 800312a:	4621      	mov	r1, r4
 800312c:	4630      	mov	r0, r6
 800312e:	f7ff ffbc 	bl	80030aa <__sfputs_r>
 8003132:	3001      	adds	r0, #1
 8003134:	f000 80c2 	beq.w	80032bc <_vfiprintf_r+0x1ec>
 8003138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800313a:	4453      	add	r3, sl
 800313c:	9309      	str	r3, [sp, #36]	; 0x24
 800313e:	f898 3000 	ldrb.w	r3, [r8]
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 80ba 	beq.w	80032bc <_vfiprintf_r+0x1ec>
 8003148:	2300      	movs	r3, #0
 800314a:	f04f 32ff 	mov.w	r2, #4294967295
 800314e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003152:	9304      	str	r3, [sp, #16]
 8003154:	9307      	str	r3, [sp, #28]
 8003156:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800315a:	931a      	str	r3, [sp, #104]	; 0x68
 800315c:	46a8      	mov	r8, r5
 800315e:	2205      	movs	r2, #5
 8003160:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003164:	485e      	ldr	r0, [pc, #376]	; (80032e0 <_vfiprintf_r+0x210>)
 8003166:	f000 fafb 	bl	8003760 <memchr>
 800316a:	9b04      	ldr	r3, [sp, #16]
 800316c:	bb78      	cbnz	r0, 80031ce <_vfiprintf_r+0xfe>
 800316e:	06d9      	lsls	r1, r3, #27
 8003170:	bf44      	itt	mi
 8003172:	2220      	movmi	r2, #32
 8003174:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003178:	071a      	lsls	r2, r3, #28
 800317a:	bf44      	itt	mi
 800317c:	222b      	movmi	r2, #43	; 0x2b
 800317e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003182:	782a      	ldrb	r2, [r5, #0]
 8003184:	2a2a      	cmp	r2, #42	; 0x2a
 8003186:	d02a      	beq.n	80031de <_vfiprintf_r+0x10e>
 8003188:	46a8      	mov	r8, r5
 800318a:	2000      	movs	r0, #0
 800318c:	250a      	movs	r5, #10
 800318e:	9a07      	ldr	r2, [sp, #28]
 8003190:	4641      	mov	r1, r8
 8003192:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003196:	3b30      	subs	r3, #48	; 0x30
 8003198:	2b09      	cmp	r3, #9
 800319a:	d969      	bls.n	8003270 <_vfiprintf_r+0x1a0>
 800319c:	b360      	cbz	r0, 80031f8 <_vfiprintf_r+0x128>
 800319e:	e024      	b.n	80031ea <_vfiprintf_r+0x11a>
 80031a0:	4b50      	ldr	r3, [pc, #320]	; (80032e4 <_vfiprintf_r+0x214>)
 80031a2:	429c      	cmp	r4, r3
 80031a4:	d101      	bne.n	80031aa <_vfiprintf_r+0xda>
 80031a6:	68b4      	ldr	r4, [r6, #8]
 80031a8:	e7a2      	b.n	80030f0 <_vfiprintf_r+0x20>
 80031aa:	4b4f      	ldr	r3, [pc, #316]	; (80032e8 <_vfiprintf_r+0x218>)
 80031ac:	429c      	cmp	r4, r3
 80031ae:	bf08      	it	eq
 80031b0:	68f4      	ldreq	r4, [r6, #12]
 80031b2:	e79d      	b.n	80030f0 <_vfiprintf_r+0x20>
 80031b4:	4621      	mov	r1, r4
 80031b6:	4630      	mov	r0, r6
 80031b8:	f7ff fc70 	bl	8002a9c <__swsetup_r>
 80031bc:	2800      	cmp	r0, #0
 80031be:	d09d      	beq.n	80030fc <_vfiprintf_r+0x2c>
 80031c0:	f04f 30ff 	mov.w	r0, #4294967295
 80031c4:	b01d      	add	sp, #116	; 0x74
 80031c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031ca:	46a8      	mov	r8, r5
 80031cc:	e7a2      	b.n	8003114 <_vfiprintf_r+0x44>
 80031ce:	4a44      	ldr	r2, [pc, #272]	; (80032e0 <_vfiprintf_r+0x210>)
 80031d0:	4645      	mov	r5, r8
 80031d2:	1a80      	subs	r0, r0, r2
 80031d4:	fa0b f000 	lsl.w	r0, fp, r0
 80031d8:	4318      	orrs	r0, r3
 80031da:	9004      	str	r0, [sp, #16]
 80031dc:	e7be      	b.n	800315c <_vfiprintf_r+0x8c>
 80031de:	9a03      	ldr	r2, [sp, #12]
 80031e0:	1d11      	adds	r1, r2, #4
 80031e2:	6812      	ldr	r2, [r2, #0]
 80031e4:	9103      	str	r1, [sp, #12]
 80031e6:	2a00      	cmp	r2, #0
 80031e8:	db01      	blt.n	80031ee <_vfiprintf_r+0x11e>
 80031ea:	9207      	str	r2, [sp, #28]
 80031ec:	e004      	b.n	80031f8 <_vfiprintf_r+0x128>
 80031ee:	4252      	negs	r2, r2
 80031f0:	f043 0302 	orr.w	r3, r3, #2
 80031f4:	9207      	str	r2, [sp, #28]
 80031f6:	9304      	str	r3, [sp, #16]
 80031f8:	f898 3000 	ldrb.w	r3, [r8]
 80031fc:	2b2e      	cmp	r3, #46	; 0x2e
 80031fe:	d10e      	bne.n	800321e <_vfiprintf_r+0x14e>
 8003200:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003204:	2b2a      	cmp	r3, #42	; 0x2a
 8003206:	d138      	bne.n	800327a <_vfiprintf_r+0x1aa>
 8003208:	9b03      	ldr	r3, [sp, #12]
 800320a:	f108 0802 	add.w	r8, r8, #2
 800320e:	1d1a      	adds	r2, r3, #4
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	9203      	str	r2, [sp, #12]
 8003214:	2b00      	cmp	r3, #0
 8003216:	bfb8      	it	lt
 8003218:	f04f 33ff 	movlt.w	r3, #4294967295
 800321c:	9305      	str	r3, [sp, #20]
 800321e:	4d33      	ldr	r5, [pc, #204]	; (80032ec <_vfiprintf_r+0x21c>)
 8003220:	2203      	movs	r2, #3
 8003222:	f898 1000 	ldrb.w	r1, [r8]
 8003226:	4628      	mov	r0, r5
 8003228:	f000 fa9a 	bl	8003760 <memchr>
 800322c:	b140      	cbz	r0, 8003240 <_vfiprintf_r+0x170>
 800322e:	2340      	movs	r3, #64	; 0x40
 8003230:	1b40      	subs	r0, r0, r5
 8003232:	fa03 f000 	lsl.w	r0, r3, r0
 8003236:	9b04      	ldr	r3, [sp, #16]
 8003238:	f108 0801 	add.w	r8, r8, #1
 800323c:	4303      	orrs	r3, r0
 800323e:	9304      	str	r3, [sp, #16]
 8003240:	f898 1000 	ldrb.w	r1, [r8]
 8003244:	2206      	movs	r2, #6
 8003246:	482a      	ldr	r0, [pc, #168]	; (80032f0 <_vfiprintf_r+0x220>)
 8003248:	f108 0701 	add.w	r7, r8, #1
 800324c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003250:	f000 fa86 	bl	8003760 <memchr>
 8003254:	2800      	cmp	r0, #0
 8003256:	d037      	beq.n	80032c8 <_vfiprintf_r+0x1f8>
 8003258:	4b26      	ldr	r3, [pc, #152]	; (80032f4 <_vfiprintf_r+0x224>)
 800325a:	bb1b      	cbnz	r3, 80032a4 <_vfiprintf_r+0x1d4>
 800325c:	9b03      	ldr	r3, [sp, #12]
 800325e:	3307      	adds	r3, #7
 8003260:	f023 0307 	bic.w	r3, r3, #7
 8003264:	3308      	adds	r3, #8
 8003266:	9303      	str	r3, [sp, #12]
 8003268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800326a:	444b      	add	r3, r9
 800326c:	9309      	str	r3, [sp, #36]	; 0x24
 800326e:	e750      	b.n	8003112 <_vfiprintf_r+0x42>
 8003270:	fb05 3202 	mla	r2, r5, r2, r3
 8003274:	2001      	movs	r0, #1
 8003276:	4688      	mov	r8, r1
 8003278:	e78a      	b.n	8003190 <_vfiprintf_r+0xc0>
 800327a:	2300      	movs	r3, #0
 800327c:	250a      	movs	r5, #10
 800327e:	4619      	mov	r1, r3
 8003280:	f108 0801 	add.w	r8, r8, #1
 8003284:	9305      	str	r3, [sp, #20]
 8003286:	4640      	mov	r0, r8
 8003288:	f810 2b01 	ldrb.w	r2, [r0], #1
 800328c:	3a30      	subs	r2, #48	; 0x30
 800328e:	2a09      	cmp	r2, #9
 8003290:	d903      	bls.n	800329a <_vfiprintf_r+0x1ca>
 8003292:	2b00      	cmp	r3, #0
 8003294:	d0c3      	beq.n	800321e <_vfiprintf_r+0x14e>
 8003296:	9105      	str	r1, [sp, #20]
 8003298:	e7c1      	b.n	800321e <_vfiprintf_r+0x14e>
 800329a:	fb05 2101 	mla	r1, r5, r1, r2
 800329e:	2301      	movs	r3, #1
 80032a0:	4680      	mov	r8, r0
 80032a2:	e7f0      	b.n	8003286 <_vfiprintf_r+0x1b6>
 80032a4:	ab03      	add	r3, sp, #12
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	4622      	mov	r2, r4
 80032aa:	4b13      	ldr	r3, [pc, #76]	; (80032f8 <_vfiprintf_r+0x228>)
 80032ac:	a904      	add	r1, sp, #16
 80032ae:	4630      	mov	r0, r6
 80032b0:	f3af 8000 	nop.w
 80032b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80032b8:	4681      	mov	r9, r0
 80032ba:	d1d5      	bne.n	8003268 <_vfiprintf_r+0x198>
 80032bc:	89a3      	ldrh	r3, [r4, #12]
 80032be:	065b      	lsls	r3, r3, #25
 80032c0:	f53f af7e 	bmi.w	80031c0 <_vfiprintf_r+0xf0>
 80032c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80032c6:	e77d      	b.n	80031c4 <_vfiprintf_r+0xf4>
 80032c8:	ab03      	add	r3, sp, #12
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	4622      	mov	r2, r4
 80032ce:	4b0a      	ldr	r3, [pc, #40]	; (80032f8 <_vfiprintf_r+0x228>)
 80032d0:	a904      	add	r1, sp, #16
 80032d2:	4630      	mov	r0, r6
 80032d4:	f000 f888 	bl	80033e8 <_printf_i>
 80032d8:	e7ec      	b.n	80032b4 <_vfiprintf_r+0x1e4>
 80032da:	bf00      	nop
 80032dc:	080038f4 	.word	0x080038f4
 80032e0:	08003934 	.word	0x08003934
 80032e4:	08003914 	.word	0x08003914
 80032e8:	080038d4 	.word	0x080038d4
 80032ec:	0800393a 	.word	0x0800393a
 80032f0:	0800393e 	.word	0x0800393e
 80032f4:	00000000 	.word	0x00000000
 80032f8:	080030ab 	.word	0x080030ab

080032fc <_printf_common>:
 80032fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003300:	4691      	mov	r9, r2
 8003302:	461f      	mov	r7, r3
 8003304:	688a      	ldr	r2, [r1, #8]
 8003306:	690b      	ldr	r3, [r1, #16]
 8003308:	4606      	mov	r6, r0
 800330a:	4293      	cmp	r3, r2
 800330c:	bfb8      	it	lt
 800330e:	4613      	movlt	r3, r2
 8003310:	f8c9 3000 	str.w	r3, [r9]
 8003314:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003318:	460c      	mov	r4, r1
 800331a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800331e:	b112      	cbz	r2, 8003326 <_printf_common+0x2a>
 8003320:	3301      	adds	r3, #1
 8003322:	f8c9 3000 	str.w	r3, [r9]
 8003326:	6823      	ldr	r3, [r4, #0]
 8003328:	0699      	lsls	r1, r3, #26
 800332a:	bf42      	ittt	mi
 800332c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003330:	3302      	addmi	r3, #2
 8003332:	f8c9 3000 	strmi.w	r3, [r9]
 8003336:	6825      	ldr	r5, [r4, #0]
 8003338:	f015 0506 	ands.w	r5, r5, #6
 800333c:	d107      	bne.n	800334e <_printf_common+0x52>
 800333e:	f104 0a19 	add.w	sl, r4, #25
 8003342:	68e3      	ldr	r3, [r4, #12]
 8003344:	f8d9 2000 	ldr.w	r2, [r9]
 8003348:	1a9b      	subs	r3, r3, r2
 800334a:	42ab      	cmp	r3, r5
 800334c:	dc29      	bgt.n	80033a2 <_printf_common+0xa6>
 800334e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003352:	6822      	ldr	r2, [r4, #0]
 8003354:	3300      	adds	r3, #0
 8003356:	bf18      	it	ne
 8003358:	2301      	movne	r3, #1
 800335a:	0692      	lsls	r2, r2, #26
 800335c:	d42e      	bmi.n	80033bc <_printf_common+0xc0>
 800335e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003362:	4639      	mov	r1, r7
 8003364:	4630      	mov	r0, r6
 8003366:	47c0      	blx	r8
 8003368:	3001      	adds	r0, #1
 800336a:	d021      	beq.n	80033b0 <_printf_common+0xb4>
 800336c:	6823      	ldr	r3, [r4, #0]
 800336e:	68e5      	ldr	r5, [r4, #12]
 8003370:	f003 0306 	and.w	r3, r3, #6
 8003374:	2b04      	cmp	r3, #4
 8003376:	bf18      	it	ne
 8003378:	2500      	movne	r5, #0
 800337a:	f8d9 2000 	ldr.w	r2, [r9]
 800337e:	f04f 0900 	mov.w	r9, #0
 8003382:	bf08      	it	eq
 8003384:	1aad      	subeq	r5, r5, r2
 8003386:	68a3      	ldr	r3, [r4, #8]
 8003388:	6922      	ldr	r2, [r4, #16]
 800338a:	bf08      	it	eq
 800338c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003390:	4293      	cmp	r3, r2
 8003392:	bfc4      	itt	gt
 8003394:	1a9b      	subgt	r3, r3, r2
 8003396:	18ed      	addgt	r5, r5, r3
 8003398:	341a      	adds	r4, #26
 800339a:	454d      	cmp	r5, r9
 800339c:	d11a      	bne.n	80033d4 <_printf_common+0xd8>
 800339e:	2000      	movs	r0, #0
 80033a0:	e008      	b.n	80033b4 <_printf_common+0xb8>
 80033a2:	2301      	movs	r3, #1
 80033a4:	4652      	mov	r2, sl
 80033a6:	4639      	mov	r1, r7
 80033a8:	4630      	mov	r0, r6
 80033aa:	47c0      	blx	r8
 80033ac:	3001      	adds	r0, #1
 80033ae:	d103      	bne.n	80033b8 <_printf_common+0xbc>
 80033b0:	f04f 30ff 	mov.w	r0, #4294967295
 80033b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033b8:	3501      	adds	r5, #1
 80033ba:	e7c2      	b.n	8003342 <_printf_common+0x46>
 80033bc:	2030      	movs	r0, #48	; 0x30
 80033be:	18e1      	adds	r1, r4, r3
 80033c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80033c4:	1c5a      	adds	r2, r3, #1
 80033c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80033ca:	4422      	add	r2, r4
 80033cc:	3302      	adds	r3, #2
 80033ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80033d2:	e7c4      	b.n	800335e <_printf_common+0x62>
 80033d4:	2301      	movs	r3, #1
 80033d6:	4622      	mov	r2, r4
 80033d8:	4639      	mov	r1, r7
 80033da:	4630      	mov	r0, r6
 80033dc:	47c0      	blx	r8
 80033de:	3001      	adds	r0, #1
 80033e0:	d0e6      	beq.n	80033b0 <_printf_common+0xb4>
 80033e2:	f109 0901 	add.w	r9, r9, #1
 80033e6:	e7d8      	b.n	800339a <_printf_common+0x9e>

080033e8 <_printf_i>:
 80033e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033ec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80033f0:	460c      	mov	r4, r1
 80033f2:	7e09      	ldrb	r1, [r1, #24]
 80033f4:	b085      	sub	sp, #20
 80033f6:	296e      	cmp	r1, #110	; 0x6e
 80033f8:	4617      	mov	r7, r2
 80033fa:	4606      	mov	r6, r0
 80033fc:	4698      	mov	r8, r3
 80033fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003400:	f000 80b3 	beq.w	800356a <_printf_i+0x182>
 8003404:	d822      	bhi.n	800344c <_printf_i+0x64>
 8003406:	2963      	cmp	r1, #99	; 0x63
 8003408:	d036      	beq.n	8003478 <_printf_i+0x90>
 800340a:	d80a      	bhi.n	8003422 <_printf_i+0x3a>
 800340c:	2900      	cmp	r1, #0
 800340e:	f000 80b9 	beq.w	8003584 <_printf_i+0x19c>
 8003412:	2958      	cmp	r1, #88	; 0x58
 8003414:	f000 8083 	beq.w	800351e <_printf_i+0x136>
 8003418:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800341c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003420:	e032      	b.n	8003488 <_printf_i+0xa0>
 8003422:	2964      	cmp	r1, #100	; 0x64
 8003424:	d001      	beq.n	800342a <_printf_i+0x42>
 8003426:	2969      	cmp	r1, #105	; 0x69
 8003428:	d1f6      	bne.n	8003418 <_printf_i+0x30>
 800342a:	6820      	ldr	r0, [r4, #0]
 800342c:	6813      	ldr	r3, [r2, #0]
 800342e:	0605      	lsls	r5, r0, #24
 8003430:	f103 0104 	add.w	r1, r3, #4
 8003434:	d52a      	bpl.n	800348c <_printf_i+0xa4>
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6011      	str	r1, [r2, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	da03      	bge.n	8003446 <_printf_i+0x5e>
 800343e:	222d      	movs	r2, #45	; 0x2d
 8003440:	425b      	negs	r3, r3
 8003442:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003446:	486f      	ldr	r0, [pc, #444]	; (8003604 <_printf_i+0x21c>)
 8003448:	220a      	movs	r2, #10
 800344a:	e039      	b.n	80034c0 <_printf_i+0xd8>
 800344c:	2973      	cmp	r1, #115	; 0x73
 800344e:	f000 809d 	beq.w	800358c <_printf_i+0x1a4>
 8003452:	d808      	bhi.n	8003466 <_printf_i+0x7e>
 8003454:	296f      	cmp	r1, #111	; 0x6f
 8003456:	d020      	beq.n	800349a <_printf_i+0xb2>
 8003458:	2970      	cmp	r1, #112	; 0x70
 800345a:	d1dd      	bne.n	8003418 <_printf_i+0x30>
 800345c:	6823      	ldr	r3, [r4, #0]
 800345e:	f043 0320 	orr.w	r3, r3, #32
 8003462:	6023      	str	r3, [r4, #0]
 8003464:	e003      	b.n	800346e <_printf_i+0x86>
 8003466:	2975      	cmp	r1, #117	; 0x75
 8003468:	d017      	beq.n	800349a <_printf_i+0xb2>
 800346a:	2978      	cmp	r1, #120	; 0x78
 800346c:	d1d4      	bne.n	8003418 <_printf_i+0x30>
 800346e:	2378      	movs	r3, #120	; 0x78
 8003470:	4865      	ldr	r0, [pc, #404]	; (8003608 <_printf_i+0x220>)
 8003472:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003476:	e055      	b.n	8003524 <_printf_i+0x13c>
 8003478:	6813      	ldr	r3, [r2, #0]
 800347a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800347e:	1d19      	adds	r1, r3, #4
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6011      	str	r1, [r2, #0]
 8003484:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003488:	2301      	movs	r3, #1
 800348a:	e08c      	b.n	80035a6 <_printf_i+0x1be>
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003492:	6011      	str	r1, [r2, #0]
 8003494:	bf18      	it	ne
 8003496:	b21b      	sxthne	r3, r3
 8003498:	e7cf      	b.n	800343a <_printf_i+0x52>
 800349a:	6813      	ldr	r3, [r2, #0]
 800349c:	6825      	ldr	r5, [r4, #0]
 800349e:	1d18      	adds	r0, r3, #4
 80034a0:	6010      	str	r0, [r2, #0]
 80034a2:	0628      	lsls	r0, r5, #24
 80034a4:	d501      	bpl.n	80034aa <_printf_i+0xc2>
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	e002      	b.n	80034b0 <_printf_i+0xc8>
 80034aa:	0668      	lsls	r0, r5, #25
 80034ac:	d5fb      	bpl.n	80034a6 <_printf_i+0xbe>
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	296f      	cmp	r1, #111	; 0x6f
 80034b2:	bf14      	ite	ne
 80034b4:	220a      	movne	r2, #10
 80034b6:	2208      	moveq	r2, #8
 80034b8:	4852      	ldr	r0, [pc, #328]	; (8003604 <_printf_i+0x21c>)
 80034ba:	2100      	movs	r1, #0
 80034bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80034c0:	6865      	ldr	r5, [r4, #4]
 80034c2:	2d00      	cmp	r5, #0
 80034c4:	60a5      	str	r5, [r4, #8]
 80034c6:	f2c0 8095 	blt.w	80035f4 <_printf_i+0x20c>
 80034ca:	6821      	ldr	r1, [r4, #0]
 80034cc:	f021 0104 	bic.w	r1, r1, #4
 80034d0:	6021      	str	r1, [r4, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d13d      	bne.n	8003552 <_printf_i+0x16a>
 80034d6:	2d00      	cmp	r5, #0
 80034d8:	f040 808e 	bne.w	80035f8 <_printf_i+0x210>
 80034dc:	4665      	mov	r5, ip
 80034de:	2a08      	cmp	r2, #8
 80034e0:	d10b      	bne.n	80034fa <_printf_i+0x112>
 80034e2:	6823      	ldr	r3, [r4, #0]
 80034e4:	07db      	lsls	r3, r3, #31
 80034e6:	d508      	bpl.n	80034fa <_printf_i+0x112>
 80034e8:	6923      	ldr	r3, [r4, #16]
 80034ea:	6862      	ldr	r2, [r4, #4]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	bfde      	ittt	le
 80034f0:	2330      	movle	r3, #48	; 0x30
 80034f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80034f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80034fa:	ebac 0305 	sub.w	r3, ip, r5
 80034fe:	6123      	str	r3, [r4, #16]
 8003500:	f8cd 8000 	str.w	r8, [sp]
 8003504:	463b      	mov	r3, r7
 8003506:	aa03      	add	r2, sp, #12
 8003508:	4621      	mov	r1, r4
 800350a:	4630      	mov	r0, r6
 800350c:	f7ff fef6 	bl	80032fc <_printf_common>
 8003510:	3001      	adds	r0, #1
 8003512:	d14d      	bne.n	80035b0 <_printf_i+0x1c8>
 8003514:	f04f 30ff 	mov.w	r0, #4294967295
 8003518:	b005      	add	sp, #20
 800351a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800351e:	4839      	ldr	r0, [pc, #228]	; (8003604 <_printf_i+0x21c>)
 8003520:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003524:	6813      	ldr	r3, [r2, #0]
 8003526:	6821      	ldr	r1, [r4, #0]
 8003528:	1d1d      	adds	r5, r3, #4
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6015      	str	r5, [r2, #0]
 800352e:	060a      	lsls	r2, r1, #24
 8003530:	d50b      	bpl.n	800354a <_printf_i+0x162>
 8003532:	07ca      	lsls	r2, r1, #31
 8003534:	bf44      	itt	mi
 8003536:	f041 0120 	orrmi.w	r1, r1, #32
 800353a:	6021      	strmi	r1, [r4, #0]
 800353c:	b91b      	cbnz	r3, 8003546 <_printf_i+0x15e>
 800353e:	6822      	ldr	r2, [r4, #0]
 8003540:	f022 0220 	bic.w	r2, r2, #32
 8003544:	6022      	str	r2, [r4, #0]
 8003546:	2210      	movs	r2, #16
 8003548:	e7b7      	b.n	80034ba <_printf_i+0xd2>
 800354a:	064d      	lsls	r5, r1, #25
 800354c:	bf48      	it	mi
 800354e:	b29b      	uxthmi	r3, r3
 8003550:	e7ef      	b.n	8003532 <_printf_i+0x14a>
 8003552:	4665      	mov	r5, ip
 8003554:	fbb3 f1f2 	udiv	r1, r3, r2
 8003558:	fb02 3311 	mls	r3, r2, r1, r3
 800355c:	5cc3      	ldrb	r3, [r0, r3]
 800355e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003562:	460b      	mov	r3, r1
 8003564:	2900      	cmp	r1, #0
 8003566:	d1f5      	bne.n	8003554 <_printf_i+0x16c>
 8003568:	e7b9      	b.n	80034de <_printf_i+0xf6>
 800356a:	6813      	ldr	r3, [r2, #0]
 800356c:	6825      	ldr	r5, [r4, #0]
 800356e:	1d18      	adds	r0, r3, #4
 8003570:	6961      	ldr	r1, [r4, #20]
 8003572:	6010      	str	r0, [r2, #0]
 8003574:	0628      	lsls	r0, r5, #24
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	d501      	bpl.n	800357e <_printf_i+0x196>
 800357a:	6019      	str	r1, [r3, #0]
 800357c:	e002      	b.n	8003584 <_printf_i+0x19c>
 800357e:	066a      	lsls	r2, r5, #25
 8003580:	d5fb      	bpl.n	800357a <_printf_i+0x192>
 8003582:	8019      	strh	r1, [r3, #0]
 8003584:	2300      	movs	r3, #0
 8003586:	4665      	mov	r5, ip
 8003588:	6123      	str	r3, [r4, #16]
 800358a:	e7b9      	b.n	8003500 <_printf_i+0x118>
 800358c:	6813      	ldr	r3, [r2, #0]
 800358e:	1d19      	adds	r1, r3, #4
 8003590:	6011      	str	r1, [r2, #0]
 8003592:	681d      	ldr	r5, [r3, #0]
 8003594:	6862      	ldr	r2, [r4, #4]
 8003596:	2100      	movs	r1, #0
 8003598:	4628      	mov	r0, r5
 800359a:	f000 f8e1 	bl	8003760 <memchr>
 800359e:	b108      	cbz	r0, 80035a4 <_printf_i+0x1bc>
 80035a0:	1b40      	subs	r0, r0, r5
 80035a2:	6060      	str	r0, [r4, #4]
 80035a4:	6863      	ldr	r3, [r4, #4]
 80035a6:	6123      	str	r3, [r4, #16]
 80035a8:	2300      	movs	r3, #0
 80035aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035ae:	e7a7      	b.n	8003500 <_printf_i+0x118>
 80035b0:	6923      	ldr	r3, [r4, #16]
 80035b2:	462a      	mov	r2, r5
 80035b4:	4639      	mov	r1, r7
 80035b6:	4630      	mov	r0, r6
 80035b8:	47c0      	blx	r8
 80035ba:	3001      	adds	r0, #1
 80035bc:	d0aa      	beq.n	8003514 <_printf_i+0x12c>
 80035be:	6823      	ldr	r3, [r4, #0]
 80035c0:	079b      	lsls	r3, r3, #30
 80035c2:	d413      	bmi.n	80035ec <_printf_i+0x204>
 80035c4:	68e0      	ldr	r0, [r4, #12]
 80035c6:	9b03      	ldr	r3, [sp, #12]
 80035c8:	4298      	cmp	r0, r3
 80035ca:	bfb8      	it	lt
 80035cc:	4618      	movlt	r0, r3
 80035ce:	e7a3      	b.n	8003518 <_printf_i+0x130>
 80035d0:	2301      	movs	r3, #1
 80035d2:	464a      	mov	r2, r9
 80035d4:	4639      	mov	r1, r7
 80035d6:	4630      	mov	r0, r6
 80035d8:	47c0      	blx	r8
 80035da:	3001      	adds	r0, #1
 80035dc:	d09a      	beq.n	8003514 <_printf_i+0x12c>
 80035de:	3501      	adds	r5, #1
 80035e0:	68e3      	ldr	r3, [r4, #12]
 80035e2:	9a03      	ldr	r2, [sp, #12]
 80035e4:	1a9b      	subs	r3, r3, r2
 80035e6:	42ab      	cmp	r3, r5
 80035e8:	dcf2      	bgt.n	80035d0 <_printf_i+0x1e8>
 80035ea:	e7eb      	b.n	80035c4 <_printf_i+0x1dc>
 80035ec:	2500      	movs	r5, #0
 80035ee:	f104 0919 	add.w	r9, r4, #25
 80035f2:	e7f5      	b.n	80035e0 <_printf_i+0x1f8>
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1ac      	bne.n	8003552 <_printf_i+0x16a>
 80035f8:	7803      	ldrb	r3, [r0, #0]
 80035fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003602:	e76c      	b.n	80034de <_printf_i+0xf6>
 8003604:	08003945 	.word	0x08003945
 8003608:	08003956 	.word	0x08003956

0800360c <_sbrk_r>:
 800360c:	b538      	push	{r3, r4, r5, lr}
 800360e:	2300      	movs	r3, #0
 8003610:	4c05      	ldr	r4, [pc, #20]	; (8003628 <_sbrk_r+0x1c>)
 8003612:	4605      	mov	r5, r0
 8003614:	4608      	mov	r0, r1
 8003616:	6023      	str	r3, [r4, #0]
 8003618:	f7fd fbd0 	bl	8000dbc <_sbrk>
 800361c:	1c43      	adds	r3, r0, #1
 800361e:	d102      	bne.n	8003626 <_sbrk_r+0x1a>
 8003620:	6823      	ldr	r3, [r4, #0]
 8003622:	b103      	cbz	r3, 8003626 <_sbrk_r+0x1a>
 8003624:	602b      	str	r3, [r5, #0]
 8003626:	bd38      	pop	{r3, r4, r5, pc}
 8003628:	20000228 	.word	0x20000228

0800362c <__sread>:
 800362c:	b510      	push	{r4, lr}
 800362e:	460c      	mov	r4, r1
 8003630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003634:	f000 f8a4 	bl	8003780 <_read_r>
 8003638:	2800      	cmp	r0, #0
 800363a:	bfab      	itete	ge
 800363c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800363e:	89a3      	ldrhlt	r3, [r4, #12]
 8003640:	181b      	addge	r3, r3, r0
 8003642:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003646:	bfac      	ite	ge
 8003648:	6563      	strge	r3, [r4, #84]	; 0x54
 800364a:	81a3      	strhlt	r3, [r4, #12]
 800364c:	bd10      	pop	{r4, pc}

0800364e <__swrite>:
 800364e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003652:	461f      	mov	r7, r3
 8003654:	898b      	ldrh	r3, [r1, #12]
 8003656:	4605      	mov	r5, r0
 8003658:	05db      	lsls	r3, r3, #23
 800365a:	460c      	mov	r4, r1
 800365c:	4616      	mov	r6, r2
 800365e:	d505      	bpl.n	800366c <__swrite+0x1e>
 8003660:	2302      	movs	r3, #2
 8003662:	2200      	movs	r2, #0
 8003664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003668:	f000 f868 	bl	800373c <_lseek_r>
 800366c:	89a3      	ldrh	r3, [r4, #12]
 800366e:	4632      	mov	r2, r6
 8003670:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003674:	81a3      	strh	r3, [r4, #12]
 8003676:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800367a:	463b      	mov	r3, r7
 800367c:	4628      	mov	r0, r5
 800367e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003682:	f000 b817 	b.w	80036b4 <_write_r>

08003686 <__sseek>:
 8003686:	b510      	push	{r4, lr}
 8003688:	460c      	mov	r4, r1
 800368a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800368e:	f000 f855 	bl	800373c <_lseek_r>
 8003692:	1c43      	adds	r3, r0, #1
 8003694:	89a3      	ldrh	r3, [r4, #12]
 8003696:	bf15      	itete	ne
 8003698:	6560      	strne	r0, [r4, #84]	; 0x54
 800369a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800369e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80036a2:	81a3      	strheq	r3, [r4, #12]
 80036a4:	bf18      	it	ne
 80036a6:	81a3      	strhne	r3, [r4, #12]
 80036a8:	bd10      	pop	{r4, pc}

080036aa <__sclose>:
 80036aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036ae:	f000 b813 	b.w	80036d8 <_close_r>
	...

080036b4 <_write_r>:
 80036b4:	b538      	push	{r3, r4, r5, lr}
 80036b6:	4605      	mov	r5, r0
 80036b8:	4608      	mov	r0, r1
 80036ba:	4611      	mov	r1, r2
 80036bc:	2200      	movs	r2, #0
 80036be:	4c05      	ldr	r4, [pc, #20]	; (80036d4 <_write_r+0x20>)
 80036c0:	6022      	str	r2, [r4, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	f7fd fb2d 	bl	8000d22 <_write>
 80036c8:	1c43      	adds	r3, r0, #1
 80036ca:	d102      	bne.n	80036d2 <_write_r+0x1e>
 80036cc:	6823      	ldr	r3, [r4, #0]
 80036ce:	b103      	cbz	r3, 80036d2 <_write_r+0x1e>
 80036d0:	602b      	str	r3, [r5, #0]
 80036d2:	bd38      	pop	{r3, r4, r5, pc}
 80036d4:	20000228 	.word	0x20000228

080036d8 <_close_r>:
 80036d8:	b538      	push	{r3, r4, r5, lr}
 80036da:	2300      	movs	r3, #0
 80036dc:	4c05      	ldr	r4, [pc, #20]	; (80036f4 <_close_r+0x1c>)
 80036de:	4605      	mov	r5, r0
 80036e0:	4608      	mov	r0, r1
 80036e2:	6023      	str	r3, [r4, #0]
 80036e4:	f7fd fb39 	bl	8000d5a <_close>
 80036e8:	1c43      	adds	r3, r0, #1
 80036ea:	d102      	bne.n	80036f2 <_close_r+0x1a>
 80036ec:	6823      	ldr	r3, [r4, #0]
 80036ee:	b103      	cbz	r3, 80036f2 <_close_r+0x1a>
 80036f0:	602b      	str	r3, [r5, #0]
 80036f2:	bd38      	pop	{r3, r4, r5, pc}
 80036f4:	20000228 	.word	0x20000228

080036f8 <_fstat_r>:
 80036f8:	b538      	push	{r3, r4, r5, lr}
 80036fa:	2300      	movs	r3, #0
 80036fc:	4c06      	ldr	r4, [pc, #24]	; (8003718 <_fstat_r+0x20>)
 80036fe:	4605      	mov	r5, r0
 8003700:	4608      	mov	r0, r1
 8003702:	4611      	mov	r1, r2
 8003704:	6023      	str	r3, [r4, #0]
 8003706:	f7fd fb33 	bl	8000d70 <_fstat>
 800370a:	1c43      	adds	r3, r0, #1
 800370c:	d102      	bne.n	8003714 <_fstat_r+0x1c>
 800370e:	6823      	ldr	r3, [r4, #0]
 8003710:	b103      	cbz	r3, 8003714 <_fstat_r+0x1c>
 8003712:	602b      	str	r3, [r5, #0]
 8003714:	bd38      	pop	{r3, r4, r5, pc}
 8003716:	bf00      	nop
 8003718:	20000228 	.word	0x20000228

0800371c <_isatty_r>:
 800371c:	b538      	push	{r3, r4, r5, lr}
 800371e:	2300      	movs	r3, #0
 8003720:	4c05      	ldr	r4, [pc, #20]	; (8003738 <_isatty_r+0x1c>)
 8003722:	4605      	mov	r5, r0
 8003724:	4608      	mov	r0, r1
 8003726:	6023      	str	r3, [r4, #0]
 8003728:	f7fd fb31 	bl	8000d8e <_isatty>
 800372c:	1c43      	adds	r3, r0, #1
 800372e:	d102      	bne.n	8003736 <_isatty_r+0x1a>
 8003730:	6823      	ldr	r3, [r4, #0]
 8003732:	b103      	cbz	r3, 8003736 <_isatty_r+0x1a>
 8003734:	602b      	str	r3, [r5, #0]
 8003736:	bd38      	pop	{r3, r4, r5, pc}
 8003738:	20000228 	.word	0x20000228

0800373c <_lseek_r>:
 800373c:	b538      	push	{r3, r4, r5, lr}
 800373e:	4605      	mov	r5, r0
 8003740:	4608      	mov	r0, r1
 8003742:	4611      	mov	r1, r2
 8003744:	2200      	movs	r2, #0
 8003746:	4c05      	ldr	r4, [pc, #20]	; (800375c <_lseek_r+0x20>)
 8003748:	6022      	str	r2, [r4, #0]
 800374a:	461a      	mov	r2, r3
 800374c:	f7fd fb29 	bl	8000da2 <_lseek>
 8003750:	1c43      	adds	r3, r0, #1
 8003752:	d102      	bne.n	800375a <_lseek_r+0x1e>
 8003754:	6823      	ldr	r3, [r4, #0]
 8003756:	b103      	cbz	r3, 800375a <_lseek_r+0x1e>
 8003758:	602b      	str	r3, [r5, #0]
 800375a:	bd38      	pop	{r3, r4, r5, pc}
 800375c:	20000228 	.word	0x20000228

08003760 <memchr>:
 8003760:	b510      	push	{r4, lr}
 8003762:	b2c9      	uxtb	r1, r1
 8003764:	4402      	add	r2, r0
 8003766:	4290      	cmp	r0, r2
 8003768:	4603      	mov	r3, r0
 800376a:	d101      	bne.n	8003770 <memchr+0x10>
 800376c:	2300      	movs	r3, #0
 800376e:	e003      	b.n	8003778 <memchr+0x18>
 8003770:	781c      	ldrb	r4, [r3, #0]
 8003772:	3001      	adds	r0, #1
 8003774:	428c      	cmp	r4, r1
 8003776:	d1f6      	bne.n	8003766 <memchr+0x6>
 8003778:	4618      	mov	r0, r3
 800377a:	bd10      	pop	{r4, pc}

0800377c <__malloc_lock>:
 800377c:	4770      	bx	lr

0800377e <__malloc_unlock>:
 800377e:	4770      	bx	lr

08003780 <_read_r>:
 8003780:	b538      	push	{r3, r4, r5, lr}
 8003782:	4605      	mov	r5, r0
 8003784:	4608      	mov	r0, r1
 8003786:	4611      	mov	r1, r2
 8003788:	2200      	movs	r2, #0
 800378a:	4c05      	ldr	r4, [pc, #20]	; (80037a0 <_read_r+0x20>)
 800378c:	6022      	str	r2, [r4, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	f7fd faaa 	bl	8000ce8 <_read>
 8003794:	1c43      	adds	r3, r0, #1
 8003796:	d102      	bne.n	800379e <_read_r+0x1e>
 8003798:	6823      	ldr	r3, [r4, #0]
 800379a:	b103      	cbz	r3, 800379e <_read_r+0x1e>
 800379c:	602b      	str	r3, [r5, #0]
 800379e:	bd38      	pop	{r3, r4, r5, pc}
 80037a0:	20000228 	.word	0x20000228

080037a4 <_init>:
 80037a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a6:	bf00      	nop
 80037a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037aa:	bc08      	pop	{r3}
 80037ac:	469e      	mov	lr, r3
 80037ae:	4770      	bx	lr

080037b0 <_fini>:
 80037b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b2:	bf00      	nop
 80037b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037b6:	bc08      	pop	{r3}
 80037b8:	469e      	mov	lr, r3
 80037ba:	4770      	bx	lr
